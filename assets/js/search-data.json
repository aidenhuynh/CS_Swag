{
  
    
        "post0": {
            "title": "Loops, Dictionaries, and Lists",
            "content": "For Loop Test . InfoDb = [] # Data structure with keys and values # Append to list a Dictionary of key/values related to a person and their hobbies InfoDb.append({ &quot;FirstName&quot;: &quot;Aiden&quot;, &quot;LastName&quot;: &quot;Huynh&quot;, &quot;DOB&quot;: &quot;May 12&quot;, &quot;Residence&quot;: &quot;Escondido&quot;, &quot;Email&quot;: &quot;ah5993909@gmail.com&quot;, &quot;Hobbies&quot;: [&quot;Gaming&quot;, &quot;Video Editing&quot;] }) # Append a 2nd dictionary InfoDb.append({ &quot;FirstName&quot;: &quot;Avinh&quot;, &quot;LastName&quot;: &quot;Huynh&quot;, &quot;DOB&quot;: &quot;December 27&quot;, &quot;Residence&quot;: &quot;Escondido&quot;, &quot;Email&quot;: &quot;avinhahuynh@gmail.com&quot;, &quot;Hobbies&quot;: [&quot;Gaming&quot;, &quot;Streaming&quot;] }) # Prints all of the dictionary values def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # comma adds space between two values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t adds an indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print() # Loop algorithm def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Aiden Huynh Residence: Escondido Birth Day: May 12 Hobbies: Gaming, Video Editing Avinh Huynh Residence: Escondido Birth Day: December 27 Hobbies: Gaming, Streaming . While Loop Test . InfoDb = [] # Data structure with keys and values # Append to list a Dictionary of key/values related to a person and their hobbies InfoDb.append({ &quot;FirstName&quot;: &quot;Aiden&quot;, &quot;LastName&quot;: &quot;Huynh&quot;, &quot;DOB&quot;: &quot;May 12&quot;, &quot;Residence&quot;: &quot;Escondido&quot;, &quot;Email&quot;: &quot;ah5993909@gmail.com&quot;, &quot;Hobbies&quot;: [&quot;Gaming&quot;, &quot;Video Editing&quot;] }) # Append a 2nd dictionary InfoDb.append({ &quot;FirstName&quot;: &quot;Avinh&quot;, &quot;LastName&quot;: &quot;Huynh&quot;, &quot;DOB&quot;: &quot;December 27&quot;, &quot;Residence&quot;: &quot;Escondido&quot;, &quot;Email&quot;: &quot;avinhahuynh@gmail.com&quot;, &quot;Hobbies&quot;: [&quot;Gaming&quot;, &quot;Streaming&quot;] }) # Prints all of the dictionary values def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # comma adds space between two values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t adds an indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print() # While Loop -&gt; While a specified condition is met (i &lt; len(InfoDb)), it will loop def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output Aiden Huynh Residence: Escondido Birth Day: May 12 Hobbies: Gaming, Video Editing Avinh Huynh Residence: Escondido Birth Day: December 27 Hobbies: Gaming, Streaming . Recursive Loop Test . InfoDb = [] # Data structure with keys and values # Append to list a Dictionary of key/values related to a person and their hobbies InfoDb.append({ &quot;FirstName&quot;: &quot;Aiden&quot;, &quot;LastName&quot;: &quot;Huynh&quot;, &quot;DOB&quot;: &quot;May 12&quot;, &quot;Residence&quot;: &quot;Escondido&quot;, &quot;Email&quot;: &quot;ah5993909@gmail.com&quot;, &quot;Hobbies&quot;: [&quot;Gaming&quot;, &quot;Video Editing&quot;] }) # Append a 2nd dictionary InfoDb.append({ &quot;FirstName&quot;: &quot;Avinh&quot;, &quot;LastName&quot;: &quot;Huynh&quot;, &quot;DOB&quot;: &quot;December 27&quot;, &quot;Residence&quot;: &quot;Escondido&quot;, &quot;Email&quot;: &quot;avinhahuynh@gmail.com&quot;, &quot;Hobbies&quot;: [&quot;Gaming&quot;, &quot;Streaming&quot;] }) # Prints all of the dictionary values def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # comma adds space between two values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t adds an indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print() # Recursive Loop -&gt; keeps incrementing on each call (n+1) until exit condition is met def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Aiden Huynh Residence: Escondido Birth Day: May 12 Hobbies: Gaming, Video Editing Avinh Huynh Residence: Escondido Birth Day: December 27 Hobbies: Gaming, Streaming . Reversed List . GList = [ [&quot;Apple&quot;, &quot;1.32&quot;], [&quot;Orange&quot;, &quot;1.45&quot;], [&quot;Banana&quot;, &quot;0.62&quot;], [&quot;Strawberry&quot;, &quot;0.11&quot;], [&quot;Blueberry&quot;, &quot;0.02&quot;], [&quot;Pineapple&quot;, &quot;2.18&quot;], [&quot;Watermelon&quot;, &quot;4.98&quot;], [&quot;Kiwi&quot;, &quot;1.07&quot;], [&quot;Mango&quot;, &quot;1.32&quot;], [&quot;Grape&quot;, &quot;0.03&quot;] ] # Reverses the list GList.reverse() print(GList) . [[&#39;Grape&#39;, &#39;0.03&#39;], [&#39;Mango&#39;, &#39;1.32&#39;], [&#39;Kiwi&#39;, &#39;1.07&#39;], [&#39;Watermelon&#39;, &#39;4.98&#39;], [&#39;Pineapple&#39;, &#39;2.18&#39;], [&#39;Blueberry&#39;, &#39;0.02&#39;], [&#39;Strawberry&#39;, &#39;0.11&#39;], [&#39;Banana&#39;, &#39;0.62&#39;], [&#39;Orange&#39;, &#39;1.45&#39;], [&#39;Apple&#39;, &#39;1.32&#39;]] . Randomized List . import random # Imports various commands for randomization # List of fruits and their prices GList = [ [&quot;Apple&quot;, &quot;1.32&quot;], [&quot;Orange&quot;, &quot;1.45&quot;], [&quot;Banana&quot;, &quot;0.62&quot;], [&quot;Strawberry&quot;, &quot;0.11&quot;], [&quot;Blueberry&quot;, &quot;0.02&quot;], [&quot;Pineapple&quot;, &quot;2.18&quot;], [&quot;Watermelon&quot;, &quot;4.98&quot;], [&quot;Kiwi&quot;, &quot;1.07&quot;], [&quot;Mango&quot;, &quot;1.32&quot;], [&quot;Grape&quot;, &quot;0.03&quot;] ] # Randomizes (shuffles) the list random.shuffle(GList) print(GList) . [[&#39;Strawberry&#39;, &#39;0.11&#39;], [&#39;Mango&#39;, &#39;1.32&#39;], [&#39;Orange&#39;, &#39;1.45&#39;], [&#39;Watermelon&#39;, &#39;4.98&#39;], [&#39;Grape&#39;, &#39;0.03&#39;], [&#39;Banana&#39;, &#39;0.62&#39;], [&#39;Blueberry&#39;, &#39;0.02&#39;], [&#39;Kiwi&#39;, &#39;1.07&#39;], [&#39;Pineapple&#39;, &#39;2.18&#39;], [&#39;Apple&#39;, &#39;1.32&#39;]] . Random Grocery List Generator . Uses lists and a loop to generate a specified number of fruits and their respective prices, along with the sum of all of the prices. . import random # List of fruits and their prices GList = [ [&quot;Apple&quot;, &quot;1.32&quot;], [&quot;Orange&quot;, &quot;1.45&quot;], [&quot;Banana&quot;, &quot;0.62&quot;], [&quot;Strawberry&quot;, &quot;0.11&quot;], [&quot;Blueberry&quot;, &quot;0.02&quot;], [&quot;Pineapple&quot;, &quot;2.18&quot;], [&quot;Watermelon&quot;, &quot;4.98&quot;], [&quot;Kiwi&quot;, &quot;1.07&quot;], [&quot;Mango&quot;, &quot;1.32&quot;], [&quot;Grape&quot;, &quot;0.03&quot;] ] print(&quot;Input the desired number of fruits (esc to cancel):&quot;) fruitCount = input() # Prompts user on the desired amount of fruits # k defines the number of fruits to pull, and by setting that equal to the input(), we pull only the amount desired by the user selectedPairs = random.choices(GList, k=int(fruitCount)) # int() is used because k must be an integer, did not do this in line 18 because input() must be a string to be printed print(&quot;You selected &quot;+fruitCount+&quot; fruits:&quot;) # This section defines the first term as the fruit and second as the corresponding price, allowing us to use each part separately for pricePair in selectedPairs: fruit = pricePair[0] price = pricePair[1] print(fruit+&quot;: $&quot;+price) # Calculates the sum of the prices n = float(price) sum = sum+n total = round(sum, 2) print(&quot;Your total is: $&quot;+str(total)) sum = 0 . Input the desired number of fruits (esc to cancel): You selected 10 fruits: Strawberry: $0.11 Apple: $1.32 Strawberry: $0.11 Blueberry: $0.02 Grape: $0.03 Apple: $1.32 Pineapple: $2.18 Strawberry: $0.11 Mango: $1.32 Banana: $0.62 Your total is: $7.14 . Quiz using lists . Basic Python Quiz .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/markdown/2022/09/05/dictionaries-test.html",
            "relUrl": "/jupyter/markdown/2022/09/05/dictionaries-test.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Week 2 - Data Abstraction & HTML Fragments",
            "content": "Week 2 Review Ticket - Data Abstraction &amp; HTML Fragments . Data Abstraction For Loop Test | With Loop Test | Recursive Loop | Randomized Grocery List (Application of lists and other stuff) | Test with lists (from Week 1) | | &quot;Actually Important Table&quot; Time Box on Home Page (Click for code) Code for table . &lt;html&gt; &lt;head&gt; &lt;style&gt; table { font-family: arial, sans-serif; border-collapse: collapse; width: 100%; } td, th { border: 1px solid #dddddd; text-align: left; padding: 8px; } tr:nth-child(even) { background-color: #dddddd; } tr:nth-child(odd) { background-color: #ffffff; } &lt;/style&gt; &lt;/head&gt; &lt;table&gt; &lt;tr&gt; &lt;th&gt;Week&lt;/th&gt; &lt;th&gt;Review Ticket&lt;/th&gt; &lt;th&gt;Points&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;0&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://aidenhuynh.github.io/CS_Swag/markdown/2022/09/03/Week_0_Hacks.html&quot;&gt;Week 0 - Review Ticket&lt;/a&gt;&lt;/td&gt; &lt;td&gt;Tools and Setup&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://aidenhuynh.github.io/CS_Swag/markdown/2022/09/04/Week_1_Hacks.html&quot;&gt;Week 1 - Review Ticket&lt;/a&gt;&lt;/td&gt; &lt;td&gt;Intro to Python, Bash, and Fastpages Frontend Development&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://aidenhuynh.github.io/CS_Swag/markdown/2022/09/05/Week_2_Review_Ticket.html&quot;&gt;Week 2 - Review Ticket&lt;/a&gt;&lt;/td&gt; &lt;td&gt;Dictionaries, Lists, Loops, and HTML Fragments&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;3&lt;/td&gt; &lt;td&gt;incomplete&lt;/td&gt; &lt;td&gt;AppLab Planning/Blogging, AppLab Creation, Plan for end of Tri project&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/html&gt; . | Remote theme change Before: Very unreadable because I think that&#39;s kind of funny. After: I actually really like these changes and will probably keep them as they make my blog actually readable. | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2022/09/05/Week_2_Review_Ticket.html",
            "relUrl": "/markdown/2022/09/05/Week_2_Review_Ticket.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Week 1 - Intro to Python, Bash, and Fastpages Frontend Development",
            "content": "Week 1 Review Ticket - Intro to Python, Bash, and Fastpages . Bash Hacks | My Python Quiz (using lists) | Fastpages Frontend Development _notebook file | _post with image (it&#39;s at the bottom) | _docx file | Edited &quot;About me&quot; section | | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2022/09/04/Week_1_Hacks.html",
            "relUrl": "/markdown/2022/09/04/Week_1_Hacks.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Week 1 - Bash Hacks",
            "content": "Week 1 - Bash Hacks . A conditional command can help to verify the versions of programs and tools | To verify Anaconda and its installed version, conda list can be used | git add will download the needed files from the repository, git commit will commit to the repository, and git push will push the changes to the repository. | Scripts can be run to automate various tasks such as the installation of programs (like a .exe file). | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2022/09/04/Week_1_Bash.html",
            "relUrl": "/markdown/2022/09/04/Week_1_Bash.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Basic Python Quiz",
            "content": "import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 6 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) rsp = question_with_response(&quot;Are you ready to take a test?&quot;) if rsp == &quot;yes&quot;: print(getpass.getuser() +&quot;: yes&quot;) print(&quot;Great!&quot;) elif rsp == &quot;no&quot;: print(getpass.getuser() +&quot;: no&quot;) print(&quot;Too bad!&quot;) else: print(&quot;I did not account for replies other than yes or no so L bozo 🦕&quot;) questionsList = [ [&quot;What command is used to include other functions that were previously developed?&quot;, &quot;import&quot;], [&quot;What command is used to evaluate correct or incorrect response in this example?&quot;, &quot;if&quot;], [&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;, &quot;expression&quot;], [&quot;What command is used to define functions?&quot;, &quot;def&quot;], [&quot;What are two or more lines of code called?&quot;, &quot;sequence&quot;], [&quot;What command is used to show text on your screen?&quot;, &quot;print&quot;] ] for QAPair in questionsList: question = QAPair[0] answer = QAPair[1] rsp = question_with_response(question) if rsp == answer: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) quotient=correct/questions percentage=round((quotient * 100), 2) print(getpass.getuser()+&quot;, you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) print(&quot;That&#39;s&quot;, percentage,&quot;%!&quot;) percentList = [ [100,&quot;Perfect!&quot;], [90,&quot;Great!&quot;], [80,&quot;Nice!&quot;], [70,&quot;Could be better&quot;], [60,&quot;Needs improvement&quot;], ] for numbersPair in percentList: numbers = numbersPair[0] note = numbersPair[1] if numbers + 10 &gt; percentage &gt;= numbers: print(note) if 60 &gt; percentage &gt; 0: print(&quot;Skill issue?&quot;) elif percentage ==0: print(&quot;Very cool!!&quot;) # I am so cool . Hello, Aiden running /Users/Aiden/opt/anaconda3/bin/python You will be asked 6 questions. Question: Are you ready to take a test? Aiden: no Too bad! Question: What command is used to include other functions that were previously developed? import is correct! Question: What command is used to evaluate correct or incorrect response in this example? if is correct! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? expression is correct! Question: What command is used to define functions? def is correct! Question: What are two or more lines of code called? sequence is correct! Question: What command is used to show text on your screen? print is correct! Aiden, you scored 6/6 That&#39;s 100.0 %! Perfect! .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/markdown/2022/09/04/Python_Quiz.html",
            "relUrl": "/jupyter/markdown/2022/09/04/Python_Quiz.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Psychology Ch 9 Corrections",
            "content": "Q # Question &amp; Analysis Why? . E . X . A . M . P . L . E . | Question: . What did Lev Vygotsky state about children’s learning? . Correct Answer (write it out, not just the letter!): . Social contact is essential to intellectual development . Why the correct answer is right (content based explanation): . Vygotsky’s theory about the zone of proximal development indicates that children learn from mentors or coaches. . Why your answer was wrong (re-word the q to make your wrong ans right): . Q: What did Albert Bandura suggest about the way children learn? . A: He said that children learn through observational learning, or imitation. . If your wrong answer cannot be made correct, just explain: . Children learn by imitating others was my incorrect choice, but Vygotsky is not the one who says this, this is more along the lines of what Albert Bandura’s theories suggest. . Textbook page you referenced for your explanation: Chapter 1 Sec 2 (pg. 15) . | Choose one: . Didn’t study . Read question wrong . Absent when taught . Never understood concept . Other (specify) . | . | Question: . Which of the following techniques used by professional therapists are highly likely to promote the construction of false memories? . Correct Answer (write it out, not just the letter!): . Hypnosis, imagination-enhancing techniques, and drug-induced recall. . Why the correct answer is right (content based explanation): . All of these techniques can implant false memories. Those with vivid imaginations were found to be more susceptible to “imagination inflation,” where repeatedly imagining nonexistent events creates false memories. Therefore, enhancing imagination would increase the amount of false memories. Drug-induced recall and hypnosis have been criticized heavily by psychologists, to the point of being agreed upon as unreliable by several large organizations. . Why your answer was wrong (re-word the q to make your wrong ans right): . What psychotherapy practice(?) used by professional therapists are highly likely to promote the construction of false memories? . If your wrong answer cannot be made correct, just explain: . Textbook page you referenced for your explanation: . 383, 388 . | Choose one: . Didn’t study . Read question wrong . Absent when taught . Never understood concept . Other . (Answer said “all of the above, but only two were above so I just chose one”) . | . | | | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/2022/09/04/Psychology-Ch-9-Corrections.html",
            "relUrl": "/2022/09/04/Psychology-Ch-9-Corrections.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "First Jupyter Post",
            "content": "import getpass swag = &quot;what&#39;s up gamers&quot; print(swag) def cool(sample): print(sample) ans = input() return ans rsp = cool(&quot;Blog: Say something cool&quot;) if rsp == &quot;something cool&quot;: print(getpass.getuser()+&quot;: &quot;+rsp) print(&quot;Blog: haha very clever 😐&quot;) else: print(getpass.getuser()+&quot;: &quot;+rsp) print(&quot;Blog: haha yeah that is pretty cool!&quot;) . what&#39;s up gamers Blog: Say something cool Aiden: poggers .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/2022/09/03/first.html",
            "relUrl": "/jupyter/2022/09/03/first.html",
            "date": " • Sep 3, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Week 0 - Tools and Setup Hacks",
            "content": "Week 0 Hacks - Tools and Setup . My GitHub | FastPages Blog | My First Markdown/HTML Post | My First Jupyter Post | Proof of IDE (VSCode) | My Insights | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2022/09/03/Week_0_Hacks.html",
            "relUrl": "/markdown/2022/09/03/Week_0_Hacks.html",
            "date": " • Sep 3, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "First Post?! (with markdown)",
            "content": "Swag! . This is my first post (wowzers!) . list of things that i know i have to do for next week currently but will probably drastically change as the week progresses but I don’t know how to make something more useful than a table so this is what we get for now . Class Monday Tuesday Whensday Thursday FriDay . BC | labor day | just check the calendar man | – | learning check probably | – | . US history! | labor day | this class doesnt do homework lol | – | leanring rhceck peboablty |   | . Am ;pt | labor day | Thesis and parachute! | – | – | lit circle read 20pg/day :() | . Psycholololology | labor day | notso npts | nots notes | uh oh testing time D: | idk | . CS P wit mort | labor day | i have | np odea | wjat o, doing | - | . (thanks to Dash for showing me how to make a table with markdown) .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2022/09/02/iamdash.html",
            "relUrl": "/markdown/2022/09/02/iamdash.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post10": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "😂😂😂 WHO DID THIS 😂😂😂",
          "content": "I am Aiden Huynh (pronounced “win”), creator of this website. Yep. I did this. .",
          "url": "https://aidenhuynh.github.io/CS_Swag/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://aidenhuynh.github.io/CS_Swag/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}