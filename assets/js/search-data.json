{
  
    
        "post0": {
            "title": "Week 32 Review Ticket",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Big Idea 4: Computers and Networks Diagram: | Example of Completed Hacks: | . | 2020 Practice Exam 1 MCQ Score: 65/66 | Corrections | Question: | Consider the following algorithms. Each algorithm operates on a list containing n elements, where n is a very large integer. | . Answers: | An algorithm that accesses each element in the list twice | An algorithm that accesses each element in the list n times | An algorithm that accesses only the first 10 elements in the list, regardless of the size of the list | Original Answer: III only | Correct Answer: I, II, and III | This is the answer because all of these run in what is considered a reasonable time to CollegeBoard (2n, n, n^2), and for some reason I chose the worst one. | . . . | Student Lesson Grades Lesson Score . SASS | 0.95/1 | . Simulations | 0.65/1 | . Data Structures | 0.87/1 | . Data related to user | 0.85/1 | . Frontend-backend | /1 | . TOTAL | 3.32 (plus ungraded)/5 | . SASS Lesson Grade 0.95/1 | . | Simulations Lesson Grade 0.65/1 (I got scammed!) | . | Data Stuff/Full stack/CRUD Lesson Grade /1 | . | Data Related to User Lesson Grade /1 | . | . | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2023/05/01/Week_32_Hacks.html",
            "relUrl": "/markdown/review_ticket/2023/05/01/Week_32_Hacks.html",
            "date": " • May 1, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "P3 4/27 Big Idea 3 Data Structures",
            "content": "Leaderboard Database . How do you set up a database model? . What is a database model . A database model shows the logical structure of a database | It fundamentally determines in which manner data can be stored, organized, and manipulated | Some popular database models are relational models, object oriented models, hierarchial models, flat file models, and network models | The one below is an Object-Relational Model which is a combination of a relational model and an object oriented model | . Creating SQLAlchemy App . from flask import Flask from flask_sqlalchemy import SQLAlchemy # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = &#39;sqlite:///sqlite.db&#39; app.config[&quot;SQLALCHEMY_TRACK_MODIFICATIONS&quot;] = False app.config[&quot;SECRET_KEY&quot;] = &quot;SECRET_KEY&quot; db = SQLAlchemy(app) # Images storage app.config[&quot;MAX_CONTENT_LENGTH&quot;] = 5 * 1024 * 1024 # maximum size of uploaded content app.config[&quot;UPLOAD_EXTENSIONS&quot;] = [&quot;.jpg&quot;, &quot;.png&quot;, &quot;.gif&quot;] # supported file types app.config[&quot;UPLOAD_FOLDER&quot;] = &quot;volumes/uploads/&quot; # location of user uploaded content . Creating Database Template . from sqlalchemy import Column, Integer, String, Text from sqlalchemy.exc import IntegrityError import json from werkzeug.security import generate_password_hash, check_password_hash # # Leaderboard DB class that maps leaderboard SQL table # class Leaderboard(db.Model): __tablename__ = &quot;leaderboard&quot; # # Leaderboard DB columns for easy, medium and hard points with user info # id = Column(Integer, primary_key=True) _username = Column(String(255), unique=True, nullable=False) _password = Column(String(255), nullable=False) _pointsEasy = Column(Integer, nullable=False) _pointsMedium = Column(Integer, nullable=False) _pointsHard = Column(Integer, nullable=False) # # Leaderboard DB class constructor # def __init__(self, username, password, pointsEasy, pointsMedium, pointsHard): self._username = username self.set_password(password) self._pointsEasy = pointsEasy self._pointsMedium = pointsMedium self._pointsHard = pointsHard # # Leaderboard DB class string representation of an object # def __repr__(self): return &quot;&lt;Leaderboard(id=&#39;%s&#39;, username=&#39;%s&#39;, pointsEasy=&#39;%s&#39;, pointsMedium=&#39;%s&#39;, pointsHard=&#39;%s&#39;)&gt;&quot; % ( self.id, self.username, self.pointsEasy, self.pointsMedium, self.pointsHard, ) # # Returns Leaderboard username # @property def username(self): return self._username # # Sets Leaderboard username # @username.setter def username(self, value): self._username = value # # checks Leaderboard username valid # def is_username(self, username): return self._username == username # # Returns Leaderboard easy points # @property def pointsEasy(self): return self._pointsEasy # # Sets Leaderboard easy points # @pointsEasy.setter def pointsEasy(self, value): self._pointsEasy = value # # Sets Leaderboard medium points # @property def pointsMedium(self): return self._pointsMedium # # Sets Leaderboard medium points # @pointsMedium.setter def pointsMedium(self, value): self._pointsMedium = value # # Returns Leaderboard hard points # @property def pointsHard(self): return self._pointsHard # # Sets Leaderboard hard points # @pointsHard.setter def pointsHard(self, value): self._pointsHard = value # # Returns Leaderboard password # @property def password(self): return self._password[0:10] + &quot;...&quot; # # Sets Leaderboard password # def set_password(self, password): self._password = generate_password_hash(password, method=&#39;sha512&#39;) # # Checks Leaderboard password validity # def is_password(self, password): result = check_password_hash(self._password, password) if result: return True else: return False # # Converts Leaderboard to dictionary # def to_dict(self): return {&quot;id&quot;: self.id, &quot;username&quot;: self.username, &quot;password&quot;: self.password, &quot;pointsEasy&quot;: self._pointsEasy, &quot;pointsMedium&quot;: self._pointsMedium, &quot;pointsHard&quot;: self._pointsHard} # # Converts Leaderboard to string values # def __str__(self): return json.dumps(self.read()) # # Creates Leaderboard database # def create(self): try: db.session.add(self) db.session.commit() return self except IntegrityError: db.session.remove() return None # # Returns Leaderboard name value pairs # def read(self): return { &quot;id&quot;: self.id, &quot;username&quot;: self.name, &quot;password&quot;: self.uid, &quot;pointsEasy&quot;: self.pointsEasy, &quot;pointsMedium&quot;: self.pointsMedium, &quot;pointsHard&quot;: self.pointsHard } # # Updates Leaderboard DB rows for points and user data # def update(self, username=&quot;&quot;, password=&quot;&quot;, pointsEasy=&quot;&quot;, pointsMedium=&quot;&quot;, pointsHard=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(username) &gt; 0: self.username = username if len(pointsEasy) &gt; 0: self.pointsEasy = pointsEasy if len(pointsMedium) &gt; 0: self.pointsMedium = pointsMedium if len(pointsHard) &gt; 0: self.pointsHard = pointsHard if len(password) &gt; 0: self.set_password(password) db.session.add(self) db.session.commit() return self # # Delets Leaderboard row from teh DB # def delete(self): db.session.delete(self) db.session.commit() return None . Initialization of Data . # Initializes Leaderboard DB with test data # def init_leaderboards(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; l1 = Leaderboard(username=&quot;bob&quot;, password=&quot;apple&quot;, pointsEasy=2, pointsMedium=5, pointsHard=3) l2 = Leaderboard(username=&quot;bobby&quot;, password=&quot;appley&quot;, pointsEasy=20, pointsMedium=50, pointsHard=30) l3 = Leaderboard(username=&quot;bobbert&quot;, password=&quot;appled&quot;, pointsEasy=200, pointsMedium=500, pointsHard=300) l4 = Leaderboard(username=&quot;bobruth&quot;, password=&quot;appler&quot;, pointsEasy=100, pointsMedium=300, pointsHard=500) leaderboards = [l1, l2, l3, l4] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for l in leaderboards: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = l.create() print(f&quot;Created new uid {object.username}&quot;) db.session.add(l) db.session.commit() except: &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {l.username}, or error.&quot;) init_leaderboards() . Created new uid bob Created new uid bobby Created new uid bobbert Created new uid bobruth . DO THESE FOR THIS SECTION . fill in the blanks | add a new leaderboard, and edit the bobbert leaderboard; add proof with a screenshot of the sqlite.db | add a new set of keys and values to the leaderboard; add proof with a screenshot of the sqlite.db | . Picture Database . | Used CRUD methods which have create, read, update, and delete rows in the table. There is a function called initEasyImages which populates the &#39;Images&#39; table with data. | The init method is used to create a new row in the table with a given imagePath, xCoord, yCoord, and difficulty. The repr method returns a string representation of the object when it is printed. | The table has five columns: id, _imagePath, _xCoord, _yCoord, and _difficulty. | | This part of the code defines getter and setter methods for the columns in the Images model. It sets and retrieves the metadata of the image. | | The initEasyImages function initializes the database with image metadata for easy difficulty images. | . from sqlalchemy import Column, Integer, String, Text, LargeBinary from sqlalchemy.exc import IntegrityError from pathlib import Path class Images(db.Model): __tablename__ = &#39;images&#39; id = Column(Integer, primary_key=True) _imagePath = Column(Text, unique=True, nullable=False) _xCoord = Column(Integer, nullable=False) _yCoord = Column(Integer, nullable=False) _difficulty = Column(Integer, nullable=False) def __init__(self, imagePath, xCoord, yCoord, difficulty): self._imagePath = imagePath self.xCoord = xCoord self.yCoord = yCoord self.difficulty = difficulty def __repr__(self): return &quot;&lt;image(id=&#39;%s&#39;, imagePath=&#39;%s&#39;, xCoord=&#39;%s&#39;, yCoord=&#39;%s&#39;, difficulty=&#39;%s&#39;)&gt;&quot; % ( self.id, self.imagePath, self.xCoord, self.yCoord, self.difficulty ) @property def imagePath(self): return self._imagePath @imagePath.setter def imagePath(self, value): self._imagePath = value @property def xCoord(self): return self._xCoord @xCoord.setter def xCoord(self, value): self._xCoord = value @property def yCoord(self): return self._yCoord @yCoord.setter def yCoord(self, value): self._yCoord = value @property def difficulty(self): return self._difficulty @difficulty.setter def difficulty(self, value): self._difficulty = value def to_dict(self): return {&quot;id&quot;: self.id, &quot;imagePath&quot;: self._imagePath, &quot;xCoord&quot;: self._xCoord, &quot;yCoord&quot;: self._yCoord, &quot;difficulty&quot;: self._difficulty} def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;path&quot;: self.imagePath, &quot;xCoord&quot;: self.xCoord, &quot;yCoord&quot;: self.yCoord, &quot;difficulty&quot;: self.difficulty } # CRUD update: updates user name, password, phone # returns self def update(self, path=&quot;&quot;, xCoord=&quot;&quot;, yCoord=&quot;&quot;, difficulty=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; xCoord = int(xCoord) yCoord = int(yCoord) if path: self.imagePath = path if xCoord &gt;= 0: self.xCoord = xCoord if yCoord &gt;= 0: self.yCoord = yCoord if difficulty in range(3): self.difficulty = difficulty db.session.commit() return self def delete(self): db.session.delete(self) db.session.commit() return None . def initEasyImages(): with app.app_context(): db.create_all() image_dir = Path.cwd()/&quot;images&quot; images_paths = [i.name for i in image_dir.iterdir()] images = [Images(&quot;images/easy/&quot; + image, 250, 250, 0) for image in images_paths] for image in images: try: image.create() print(&quot;Successfully added entry&quot;) except: db.session.remove() print(&quot;Error adding image: &quot;, image.imagePath) initEasyImages() . Successfully added entry Successfully added entry Successfully added entry Successfully added entry Successfully added entry Successfully added entry . Popcorn Hacks . The init method initializes a new Images object with the following parameters: imagePath, xCoord, yCoord, and difficulty. | In the Images class, the tablename attribute specifies the name of the table. | The update method updates the values of the object&#39;s attributes imagePath, xCoord, yCoord, and difficulty based on the input parameters, and then uses the db.session.commit method to commit the changes to the database. | The db module used in this code is part of a larger library called SQLAlchemy, which provides a set of tools for working with databases in Python. | . Picture Encoding . Essential Question: What are some methods that we could store and access images in the backend, and how can we send them to a frontend application? . The image encoding process for this project is done within the endpoints created on our backend application. The overarching process is split into three seperate sub-processes, each handling a different level of game-difficulty. For this lesson, we will look at the easy images sub-process as our example. . def get_random_easy_image(): images = Images.query.filter_by(_difficulty=0).all() image = random.choice(images) return image . This procedure is a void function that takes in no arguments directly, but does access the database via the Images object imported from the models that we created . The first line filters all database entries and searches for all image entries with the difficulty column set to 0, which we established as the identifying factor for easy images. The .all() method attached to the end of the query serves to return all matching image objects in a list called image. . The procedure finally returns a random image using the random.choice method. . class ImagesAPI: class _EasyImages(Resource): def get(self): image = get_random_easy_image() json_data = {} if image: image_path = project_path + &quot;/&quot; + image.imagePath with open(image_path, &quot;rb&quot;) as image_file: json_data[&quot;bytes&quot;] = str(base64.b64encode(image_file.read()))[2:][:-1] json_data[&quot;xCoord&quot;] = image.xCoord json_data[&quot;yCoord&quot;] = image.yCoord return jsonify(json_data) . If the first procedure locates and selects the image, the second procedure then encodes, formats, and returns the JSON data containing the image and its metadata. . The procedure first calls the get_random_easy_image() procedure created earlier to store our image object and also initializes an empty dictionary to store our json data. . If a valid image object is found, the procedure will attempt to create an absolute path to the image file on the computer running flask application. This is achieved by concatenating the absolute path of the working project directory to the relative image path stored in the database. The aboslute path of the directory is generated in our namespace package (__init__.py) in our _nighthawkguessr_api_ package. The line calculating the project path is shown below, and uses the Path object from the pathlib library. . project_path = Path.cwd().as_posix() . After creating the image path, the procedure attempts to open the image file, and procedes to use the base64.b64encode method to encode the image file bytes into base64 data. This is convinient for us as HTML on the frontend pages allows us to render images with base64 bytes (Not sure about normal image bytes). The base64 bytes are then encoded into a python literal string in order to be jsonified and displayed on the api endpoint. The [2:][:-1] appended to the end is a type of string slicing which removes the b&#39; generated at the start of the data and the &#39; generated at the end of the data. These extraneous characters are used to indicate a base64 string, and are not part of the original data. . The procedure finally appends the metadata (position of the right coordinates on the map) to the json_data dictionary, completing the process. . Finally, the procedure returns the JSONified data, which is accessible from our API. As you can see, the images we process are extremely large and possess high resolution (typically a few megabytes!) . Popcorn Hack: . Please write a few sentences answering the essential question, &quot;What are some methods that we could store and access images in the backend, and how can we send them to a frontend application?&quot; . PUT, PATCH, or POST to upload images to backend, and GET to bring to frontend. | . Endpoints . What are endpoints and how do we use them to transfer data from one part of the internet to another? . Backend: . The backend creates endpoints that are used to edit the properties of the database constructed by the model. | GET, PUT, POST, and DELETE methods are used in order to define HTTP endpoints in the API. These endpoints are based on requests that can be made to manipulate the database. | Variables defined in the model file are used to call data from the database in order to be manipulated. | . | . Methods in Backend Example . Modules are being imported with specified classes which are used later in the program. Blueprint: used to organize routes and functions | request: used to access data sent to the Flask app through the HTTP request | Api: creates a Flask instance that handles requests | Resource: this allows for the definition of custom HTTP requests | reqparse: used to parse (sort and search) and validate data that is requested | . | The blueprint and api are then defined as variables and are used to store any future data that is requested. | Some preliminary functions, such as find_by_username, are created to be used later in the API code, allowing for simpler code. In this case, these functions are used to search through the database to find specific usernames. | . | . from flask import Blueprint, request from flask_restful import Api, Resource, reqparse # setting variables used to store future data leaderboard_bp = Blueprint(&quot;leaderboards&quot;, __name__) leaderboard_api = Api(leaderboard_bp) # pre-made function created to search for usernames, allows for simplified program def find_by_username(username): users = Leaderboard.query.filter_by(_username=username).all() return users[0] . GET Method . This method is used to fetch specific data points from the database by searching through the usernames. | This will be different for each type of database being made, however the general format stays the same. Since this is a text database, to pull specific information from the database, the API will query through the data using the username, which is unique. | The function defined previously, find_by_username(), is used to search through the database and pull the specific data point that is being searched. | If the user exists, the data of that user will be returned, being sent to the frontend of the program. | If a user isn&#39;t found, an error will be returned that the user does not exist. | . | In general, the program will always be searching for a piece of information that is unique and that will be used to pull data to wherever it is being requested. | . def get(self): # requested username turned into variable for later use username = request.get_json().get(&quot;username&quot;) print(username, &quot;uid&quot;) # username used to search for data and the found data is made into a variable user = find_by_username(username) if user: # data is sent to the frontend return user.to_dict() # error checking return {&quot;message&quot;: user}, 404 . POST Method . This method is used to add a specific piece of information in the database based on searching by usernames. | This is again different for each database that is made, however the general structure stays the same. All required arguments are added to the parser, specifying what type of data it is. All required arguments are added to the parser, specifying what type of data it is. | The args variable is added in order to parse and store all incoming data. | . | The variable leaderboard is created to make a new object that will contain the values from the incoming data. | The function will attempt to add a new entry in the leaderboard database and return a status of a successful addition of the data. | If there is an error in the data being inputted, a status code of 500 will be returned. | . | . def post(self): # using parsers to gather and data that is to be posted and validate it&#39;s true parser = reqparse.RequestParser() parser.add_argument(&quot;username&quot;, required=True, type=str) parser.add_argument(&quot;password&quot;, required=True, type=str) parser.add_argument(&quot;pointsEasy&quot;, required=True, type=int) parser.add_argument(&quot;pointsMedium&quot;, required=True, type=int) parser.add_argument(&quot;pointsHard&quot;, required=True, type=int) # variable made to store data args = parser.parse_args() # variable created to format all data into one place and send to database for logging leaderboard = Leaderboard(args[&quot;username&quot;], args[&quot;password&quot;], args[&quot;pointsEasy&quot;], args[&quot;pointsMedium&quot;], args[&quot;pointsHard&quot;]) try: # data is sent to the database for storage db.session.add(leaderboard) db.session.commit() return leaderboard.to_dict(), 201 except Exception as e: # error checking db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 . PUT Method . This method is used to update a specific piece of information in the database based on searching by usernames. | For each data base that is made, there will be different specific but the overall structure stays the same. First, the username variable is defined, which retrieves the requested username and sets it as a variable that will be used later to edit a specific dataset. | The function find_by_username() is again used to search through the data to look for the username requested. This is set to a variable to be used later. | If the username is found in the database, the rest of the dataset is updated with the new values requested. This is updated into the database. | If there is an error found with the data requested of it the user isn&#39;t found, an error is returned. | . | . def put(self): # variable created to make requested username into something that can be used to search for data in future username = request.get_json().get(&quot;username&quot;) print(username, &quot;uid&quot;) try: # attempts to find the data in the database user = find_by_username(username) if user: # if the data is found, the data points are updates user.pointsEasy = int(request.get_json().get(&quot;pointsEasy&quot;)) user.pointsMedium = int(request.get_json().get(&quot;pointsMedium&quot;)) user.pointsHard = int(request.get_json().get(&quot;pointsHard&quot;)) db.session.commit() return user.to_dict(), 201 else: # if user not found, error is returned return {&quot;message&quot;: &quot;leaderboard not found&quot;}, 404 except Exception as e: # checks for errors in request db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 . DELETE Method . This method is used to delete a specific information from the database, again searching by username. | The overall structure stays the same between different databases, but the specific variables will need to be changed to personalize the database. A variable for the username is created in order to search for for the user name requested later in the code with the function find_by_username(). | If the user is found, the user is deleted, along with that user&#39;s data and the change is saved to the database. | If the user isn&#39;t found or if an error is found with the data requested, an error is returned. | . | . def delete(self): # username variable defined to store requested value username = request.get_json().get(&quot;username&quot;) print(username, &quot;uid&quot;) try: # finds the username and stores data in variable user = find_by_username(username) if user: # if the user is found, the user and their data is deleted db.session.delete(user) db.session.commit() return user.to_dict() else: # if user not found, error is returned return {&quot;message&quot;: &quot;leaderboard not found&quot;}, 404 except Exception as e: # error checking for request error db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 . Displaying the Full Database . Another class is created in order to display the entire database at once and also to delete the entire database if necessary. | This uses the same functions as before to GET and DELETE the data, however it is modified slightly to look through the entire database abd display or delete all data points. | An example of where this would be useful is to create a table of data in the frontend. | . class LeaderboardListAPI(Resource): # GET method def get(self): try: # attempts to find the entire database requested and is stored in variable leaderboards = db.session.query(Leaderboard).all() # sends back the entire database return [leaderboard.to_dict() for leaderboard in leaderboards] except Exception as e: # error checking for request errors db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 # DELETE method def delete(self): try: # deletes entire database db.session.query(Leaderboard).delete() db.session.commit() return [] except Exception as e: # checks for errors in request db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 . Popcorn Hacks . Please answer these questions to earn points for the popcorn hacks. . What are the four HTTP request methods that are used with Flask? GET, PUT, POST, DELETE | . | What is a parser and how would it be aid with data validation? Parsers sort and search through data, which could be used to help validate by sorting out invalid data, such as searching for numbers and blocking out strings. | . | What is the role endpoints in Flask? Endpoints allow for editing the properties of the backend database. | . | Frontend and How it Communicates to Backend . This first part of the frontend logic simply finds out of the site is running locally or not, off of which is figures out whether or not to pull data from the local backend link or the global backend link. In this example, a global backend link hasn&#39;t been sent, however it would go in the second set of quotations after the local address. This isn&#39;t something you need to know, but it is nice to use when developing full stack applications. . // checks if site is run locally const isLocalhost = Boolean( window.location.hostname === &quot;localhost&quot; || window.location.hostname === &quot;[::1]&quot; || window.location.hostname.match(/^127(?: .(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/) ) // defines database url const api = isLocalhost ? &quot;http://localhost:8200&quot; : &quot;&quot;; . evalmachine.&lt;anonymous&gt;:1 // checks if site is run locally ^ SyntaxError: Identifier &#39;isLocalhost&#39; has already been declared at evalmachine.&lt;anonymous&gt;:1:1 at Script.runInThisContext (vm.js:96:20) at Object.runInThisContext (vm.js:303:38) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at process.emit (events.js:182:13) at emit (internal/child_process.js:812:12) at process._tickCallback (internal/process/next_tick.js:63:19) . GET Method . This method is more complicated in terms of requesting, simply because in order to, for example, print all data points into a table, the function needs to iterate through the entire database. | In this example, the function getList() is used to asynchronously fetch the entire database and set it to a variable called list. The list is returned for later use outside of this function in order to print the data. | . | . Printing the Data . In order to print the data, the function getList() is run and once it is run, it iterates through the data to pull out each individual data point and enter it into the function used to make the table. For each class in the database, which is each row in the database, the variables corresponding to that specific class are pulled and inserted into the addTask() function as parameters to create the table of users. | . | The function addTask() is used to create the visual table that the user sees. A row is created and for each table cell in that row, the data is added by iterating through the array of variables that are parameters pulled directly from the database. | A new row is added into table for each new class of information pulled from the database. | . | . // fetches entire database const getList = async () =&gt; { // stores it in variable list const list = await fetch(api + &quot;/leaderboardList&quot;).then((r) =&gt; r.json()); return list }; // goes through entire database and pulls each individual class getList().then(list =&gt; { // for each class (row), data is pulled and added into addTask() function to be put in visual table list.forEach(cls =&gt; { addTask(cls.username, cls.pointsEasy, cls.pointsMedium, cls.pointsHard) }) }) // adds visual representation of data in table function addTask(username, pointsEasy, pointsMedium, pointsHard) { // array of variables defining data points var tableCells = [username, pointsEasy, pointsMedium, pointsHard] // creates new row in variable var row = document.createElement(&#39;tr&#39;) // goes through entire data set and places data into cells for (var i = 0; i &lt; tableCells.length; i++) { var tableCell = document.createElement(&#39;th&#39;) tableCell.textContent = tableCells[i] tableCell.className = &#39;cell&#39; row.appendChild(tableCell) } // creates new row as child of schedule element schedule.appendChild(row) } . Promise { &lt;pending&gt; } . POST Method . This method is used to push data to the backend using the HTTP POST method. The function addData is defined with the parameters that are going to be pushed into the backend. | An object is created to define the variables that are going to be pushed into the backend. This is basically the JSON string that will be sent to the backend to get decoded and inserted into the database. | The fetch() function is called with the api variable, which is a variable representing the url for the backend API, and the extension specific to where the data will be posted, in this case being /leaderboard. The method, headers, and body of the data are defined in order to complete a successful HTTP request to the backend. The object data which was created earlier, is converted to a JSON string here and sent to the backend. | . | If an error is detected, it is returned and the request will fail. | . | . // calls addData function function addData(username, password, pointsEasy, pointsMedium, pointsHard){ // creates object defining the variables that will be added to the backend, corresponding with the backend variables let data = { &quot;username&quot;: username, &quot;password&quot;: password, &quot;pointsEasy&quot;: pointsEasy, &quot;pointsMedium&quot;: pointsMedium, &quot;pointsHard&quot;: pointsHard } // POST method called fetch(api + &#39;/leaderboard&#39;, { method: &#39;POST&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39;, }, body: JSON.stringify(data), }) // error checking .then((response) =&gt; response.json()) .catch((error) =&gt; { console.error(&#39;Error:&#39;, error); }); } . (node:33303) UnhandledPromiseRejectionWarning: ReferenceError: fetch is not defined at getList (evalmachine.&lt;anonymous&gt;:4:16) at evalmachine.&lt;anonymous&gt;:9:1 at Script.runInThisContext (vm.js:96:20) at Object.runInThisContext (vm.js:303:38) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at process.emit (events.js:182:13) at emit (internal/child_process.js:812:12) at process._tickCallback (internal/process/next_tick.js:63:19) (node:33303) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 2) (node:33303) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code. . PUT and DELETE Methods . These two methods are almost identical to the POST method above in the way they work, the only difference being that the method requested is different. The name of the function defined is also changes, in this case being editData() and deleteData(). | . // editing function defined function editData(username, password, pointsEasy, pointsMedium, pointsHard){ // has object with variables that are required in backend let data = { &quot;username&quot;: username, &quot;password&quot;: password, &quot;pointsEasy&quot;: pointsEasy, &quot;pointsMedium&quot;: pointsMedium, &quot;pointsHard&quot;: pointsHard } // PUT method called fetch(api + &#39;/leaderboard&#39;, { method: &#39;PUT&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39;, }, body: JSON.stringify(data), }) // error checking .then((response) =&gt; response.json()) .catch((error) =&gt; { console.error(&#39;Error:&#39;, error); }); } . // deleting function defined function deleteData(username, password, pointsEasy, pointsMedium, pointsHard){ // object defined with variables that are same as backend let data = { &quot;username&quot;: username, &quot;password&quot;: password, &quot;pointsEasy&quot;: pointsEasy, &quot;pointsMedium&quot;: pointsMedium, &quot;pointsHard&quot;: pointsHard } // DELETE method called fetch(api + &#39;/leaderboard&#39;, { method: &#39;DELETE&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39;, }, body: JSON.stringify(data), }) // error checking .then((response) =&gt; response.json()) .catch((error) =&gt; { console.error(&#39;Error:&#39;, error); }); } . Calling Images (GET Method) . The process for calling images is basically the same as anything else, except you need to be able to reconstruct the images based on the Base64 that is requested from the backend. | In this case, the image in the api is being called to the frontend and is returned as the variable list. This is then inserted directly into the html by getting the element that needs to be edited and styling with CSS by using the built-in function data:image/png;base64, which translated from bytes to pixel. | . | . // GET method calling info from backend url const getList = async () =&gt; { const list = await fetch(api + &quot;/api/images/GetEasyImage&quot;).then((r) =&gt; r.json()); return list }; // inserting image into frontend getList().then(list =&gt; { document.getElementsByTagName(&quot;body&quot;)[0].style = &quot;background-image: url(&#39;data:image/png;base64, &quot; + list.bytes +&quot;&#39;);&quot; }) . Popcorn Hacks . Please answer these questions to earn points for the popcorn hacks. . How is data for images stored in a Flask API and how is it displayed on the frontend when requested? Images are stored in the backend as they regularly are, then returned as base64 to the frontend. | . | What is the fetch() function and how is it used in frontend logic? the fetch function is used to access the api using different methods. | . | How is data formatted and sent to the backend? (mention JSON in your answer) Data is formatted into JSON which gets appended/added to the backend. | . | Time and Space Complexity of Algorithms . The lesson for time and space complexity of algorithms will consist of demonstrations of sorting algorithms and the different time complexities that they come with on a small scale. This can be acomplished using things such as a deck of cards or even with actual people. An example of how this will work is laying out the cards in a random order on the table, and demonstrating different ways of sorting it. From methods such as bubble sort to methods such as bogo sort, it will be really easy to see exactly how much time it would take for these different sorting algoritms to complete. Then after that, it is easy to understand the concept of time complexity when given a real world example. . Space complexity can be demonstrated by using the same method, however, adding in the extra step of having the cards in a pile. This will show how much space is needed to complete the sorting algorithm. This will easily reveal the concept of space complexity because it allows people to witness a real world, physical example of the concept, turning a really hard to grasp concept into something that is easy to understand. . Additionally, we are also going to analyze certain algorithms within our project to show how such analysis is applicable to real world projects. . Essential Question: What is the quicksort algorithm, and how does it work? How does it&#39;s time and space complexities scale with input sizes? . QuickSort Algorithm . The main algorithm we&#39;ve employed is an recursive implementation of quickSort in the backend to sort the database entries to obtain the user with the highest overall score. Typically this algorithm is implemented to sort in ascending order, but to make it easier to extract the top 10 users, we sill be modifying the algorithm to sort in descending order (so the top players show up first in the list). . class LeaderboardTop10(Resource): def partition(self, arr, lo, hi): pivot = arr[hi][1] # Pivot value set to the 2nd index of the last element pivot_pos = lo - 1 # Set our base pivot position, ensure that lower picoit index == lo for idx in range(lo, hi): # Iterate over all elements in the partition array if arr[idx][1] &gt;= pivot: # Found an element creater than pivot pivot_pos+=1 # Increment correct position for pivot arr[pivot_pos], arr[idx] = arr[idx], arr[pivot_pos] # Swap the larger element with the element at the current pivot position arr[pivot_pos + 1], arr[hi] = arr[hi], arr[pivot_pos + 1] # Swap element at pivot position with the pivot element return pivot_pos+1 # Return index of pivot element def qSortUserList(self, arr, lo, hi): if lo &lt; hi: last_pivot = self.partition(arr, lo, hi) self.qSortUserList(arr, lo, last_pivot-1) self.qSortUserList(arr, last_pivot+1, hi) def get(self): users_list = get_user_list() top10 = {} self.qSortUserList(users_list, 0, len(users_list)-1) for user in users_list: top10[user[0]] = user[1] print(top10) if len(top10) &lt;= 10: return top10 return top10[:10] . To understand how the algorithm first, we must first familiarize ourselves with the process. . Our backend grabs all users from our leaderboard | Returns all users and their scores in a 2-D array, each element is a list of length two that contains the username and cumulative score of the player | The sorting algorithm will use the second element representing the user score to sort the array of users. ┌─────────────────────┐ ┌──────────────────┐ ┌─────────────────┐ │ │ │ │ │ │ │ │ │ Split │ │ display │ │ Database │ │ the ├──────────────► sorted list │ │ │ │ List into │ │ on endpoint │ │ │ │ top 10 users │ │ │ └──────────┬──────────┘ └─────────▲────────┘ └─────────────────┘ │ │ │ │ │ │ │ │ ┌──────────▼──────────┐ ┌─────────┴────────┐ │ │ │ │ │ 2-D User Array │ │ QuickSort │ │ ├───────────────► │ │ [(username, score)] │ │ Algorithm │ │ │ │ │ └─────────────────────┘ └──────────────────┘ . Our quickSort algorithm consists of 2 procedures, a partition() procedure that pivots and sorts individual elements, and a qSortUserList() that performs recursion which finishes the sorting. | The Logic . The partition procedure will serve to &quot;partition&quot; our list into 2 parts, a smaller portion and a larger portion around a certain pivot value (Note: These portions don&#39;t have to sorted yet!). . Partition procedure . First, partition selects a certain element in a list to be a pivot. This pivot value will be used to make comparisons to every other value in the array. For simplicity, we have selected our pivot element as the last element in the unsorted list. The procedure defines a pivot_pos variable to denote the correct position of the pivot index after each iteration. Although it may seem weird that the variable intially starts with a value of 0-1 = -1, this negative index is resolved by the return statement, which always returns an index that&#39;s one higher than pivot_pos. This serves to ensure that the lowest pivot index would be 0, which is the smallest element in any given partition. . pivot = arr[hi][1] pivot_pos = lo - 1 . The partition will then iterate over each element in the list from the starting and ending indexes indicated by the parameters. if a particular value is found to be larger than the pivot, the algorithm well then increment the recorded pivot position and swap the pivot with the found element. . for idx in range(lo, hi): if arr[idx][1] &gt;= pivot: pivot_pos+=1 arr[pivot_pos], arr[idx] = arr[idx], arr[pivot_pos] . Finally, the partition procedure swaps the element at the pivot_pos+1 index with our pivot element at the hi index to place the pivot at it&#39;s rightful place. We know that pivot_pos+1 must be smaller than hi because it did not trigger the conditional to increment the `pivot_pos+1`` index. At last, the pivot_pos is incremented and returned to serve as an indicator of where our two partitions split. . arr[pivot_pos + 1], arr[hi] = arr[hi], arr[pivot_pos + 1] return pivot_pos+1 . qSort procedure . If the parition procedure splits our list into smaller and larger regions, then our qSort procedure ensures that these regions are in order. It&#39;s hard to explain, but the procedure iterates over each paritition, repeating the paritition process, setting new pivot values, and correctly places the pivot values at their correct sorted order. . The procedure first checks if the lower index is smaller than the higher index, to ensure that our parition has a length greater than 1. If this check passes, the procedure then calls the partition procedure to both split our list into the two distinct regions and also the index of our correctly placed pivot value. The procedure then invokes itself again on the larger interval (replacing hi to be the partition index-1 since the previous pivot is already sorted), and also on the smaller interval (replacing lo to be partition index+1). . Eventually, the qSort procedure will iterate through all elements in the list while parition places each element at the correct position, giving us the final sorted list. . Complexity analysis . To analyze time complexity, we must analyze the partition and qSort procedures. . For the qSort procedure, because we divide the array into 2 halves during each function call, our number of function calls scales proportionally to log(n), where n is the length of the input array. However, within each function call, we also call the partition procedure, which contains an for-loop that iterates over each element in the partioned array, comparing it to a pivot value. We are well familiar with since loops, and can safely say that runtime scales proportionally to the length of the partition array. Due to this, we can conclude that our iteration time complexity scales linearly. Thus for each iterative process, our timerun scales proportionally to n. . Finally, we could multiply our two complexities together to get a representation of our overall complexity. Thus, the asymptotic notation for a time complexity could be represented as O(nlogn), where n is the length of the input array. Keep in mind, Big-Oh notation is not a function that returns the accurate runtime for any given input, but rather only gives us a model to see how runtime scales with increasing input sizes. . Space complexity for this program is much easier to analyze. Because the array is sorted in-place (meaning we don&#39;t create other placeholders or copies), we require no additional space to sort this array. However, recursive function calls may require extra storage on the call stack. Since we found the number of recursive calls to be asymptotic to O(logn), we can conclude that quickSort has an O(1) space complexity for an iterative method, and an O(logn) space complexity for a recursive method. . Popcorn Hack . Please answer our EQ for this section: What is the quicksort algorithm, and how does it work? How does it&#39;s time and space complexities scale with input sizes? . - . Hacks - Frontend and Backend . Please clone these two repositories: . Frontend | Backend | . Directions: . You will be creating a full stack of a text and image database which you will code in the Flask Backend and pull information to sort in the Frontend. . You need to have coded a fully working CRUD in the Flask, which you can show working with Postman, however you only need to show the Frontend reading and displaying data from the backend. . You may use the code we showed to you today in class in order to code the both the Frontend and Backend. . Follow the directions in the comments in the Flask Backend and the ReadMe in the frontend before starting. . Hacks - QuickSort . On this notebook, try recreating the original quicksort algorithm from our modified version. For an additional challenge, try abstracting the partitioning process through list comprehension! . After creating a successful algorithm, either create a diagram showing how the algorithm works, or a diagram that illustrates the time and/or space complexity of a recursive approach. . Hacks Helpers . If you need help with your hacks, you can check out our project repos to see how we did it. . Frontend Table | Frontend Image | Backend | . You can also message us on the coding Slack channel for additional help. . Points . Popcorn Hacks - 0.1 pts | Full Stack - 0.4+ 0.5 extra for styling html page | . | QuickSort Hacks - 0.3+ 0.5 extra for implementing quicksort | . | . HACKS ARE DUE SATURDAY (4/29) 11:59 PM . HACKS!!!! . Full stack screenshots: . img img img . Quick sort algorithm . import random def getRandList(maxNums): # Define unsorted list randomList = [] # Add random numbers to the list for i in range(0, maxNums): randomList.append(random.randint(0, 100)) return randomList def partition(list, start, end): # Assign pivot to last value pivot = list[end] tempPivotIndex = start - 1 for i in range(start, end): if list[i] &lt;= pivot: tempPivotIndex += 1 # Swapsies! list[i], list[tempPivotIndex] = list[tempPivotIndex], list[i] tempPivotIndex += 1 # Swapsies again1!! (I literally have no idea what I&#39;m doing bro) list[tempPivotIndex], list[end] = list[end], list[tempPivotIndex] return tempPivotIndex def qSort(list, start, end): if start &gt;= end or start &lt; 0: return pivotIndex = partition(list, start, end) qSort(list, start, pivotIndex - 1) qSort(list, pivotIndex + 1, end) # Number of elements in the list elements = 10 # Define random list of __ elements randomList = getRandList(elements) # wejfasdfls;kjfa print(&quot;Unsorted list: n&quot; + str(randomList) + &quot; n&quot;) # Sort qSort(randomList, 0, elements - 1) # POW print(&quot;Sorted list: n&quot; + str(randomList)) . Unsorted list: [52, 35, 28, 87, 24, 41, 96, 87, 88, 81] Sorted list: [24, 28, 35, 41, 52, 81, 87, 87, 88, 96] .",
            "url": "https://aidenhuynh.github.io/CS_Swag/student/2023/04/27/P3M-data_structures.html",
            "relUrl": "/student/2023/04/27/P3M-data_structures.html",
            "date": " • Apr 27, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Big Idea 2 - Data Related to User Guide",
            "content": "Introduction . When building an application that requires users to create accounts or sign in, handling data related to users is crucial. This data can include things like user profiles, preferences, and activity logs, which can be used to improve the user experience and _ the application&#39;s performance. . By learning how to handle data related to users effectively and efficiently, you&#39;ll be equipped with the skills and knowledge needed to build helpful applications that meet the needs of your users. . PLEASE DON&#39;T OPEN THE POPCORN HACKS, WE WILL OPEN THEM DURING THE PRESENTATION . Basics of Class and User Data . Establishing Class/User Data and making a new user . Because Python is an object-oriented programming (OOP) language, everything in it represents an _. Lists, dictionaries, functions, etc. are all examples of Python objects. Generally speaking, a Python object is an entity of _ items and methods describing the behavior of those items. . A Python class is a template used to create Python objects. We can think of it as a cooking recipe, where all the ingredients and their quantities are listed, and the whole process of cooking is described step-by-step. . In this case, we can compare a cake recipe to a class, and a cake cooked following that recipe to an object (i.e., an instance of that class). Using the same recipe (class), we can create many cakes (objects). This is the essence of creating a class in Python: to define data elements and the rules establishing how these elements can interact and change their state — and then use this framework to build various objects in a set way, instead of creating them from scratch every time. . Let&#39;s look at a few examples: . class Bikes: name = &quot;&quot; gear = 0 # create objects of class bike1 = Bikes() # objectName = ClassName() bike2 = Bikes() . Now that we have our class and object defined, we can now run code to modify certain attributes of our objects. . bike1.gear = 11 bike1.name = &quot;Mountain Bike&quot; bike2.gear = 13 bike2.name = &quot;Road Bike&quot; print(f&quot;Name: {bike1.name}, Gears: {bike1.gear} &quot;) . Name: Mountain Bike, Gears: 11 . Popcorn Hacks #1: Add another print command to display the attributes of Bike #2. What output will this code segment produce? print(&quot;Bike name: &quot; + bike2.name + &quot; nBike gears: &quot; + str(bike2.gear)) . Bike name: Road Bike Bike gears: 13 . Example: Defining a User Class . Now we will look into Classes for users of a program or website. . class User: def __init__(self, username, email): self.username = username self.email = email def display_info(self): print(f&quot;Username: {self.username}, Email: {self.email}&quot;) . For this cell, we define a User class with a _ method &quot;init&quot; that takes username and email as _. The display_info method is used to print the user information. . For backend functionality, this class can be used to create, manipulate, and manage user data. For example, when a new user signs up for an account, you could create a new User object with their username and email. This object can then be used to perform various operations, such as validating the user&#39;s input, storing the user&#39;s data in a database, or processing user-related requests. . Now let&#39;s make a new User: . new_user = User(&quot;jeffrey&quot;, &quot;leejeffreysc@gmail.com&quot;) new_user.display_info() . Here&#39;s a step-by-step breakdown of how the code relates to backend functionality: . new_user = User(&quot;jeffrey&quot;, &quot;leejeffreysc@gmail.com&quot;): This line creates a new User object, initializing it with the username &quot;jeffrey&quot; and the email &quot;leejeffreysc@gmail.com&quot;. This could represent a user who has just signed up for an account, and the input values would typically come from user input, such as a frontend signup form. . new_user.display_info(): This line calls the display_info method on the new_user object, which prints the user&#39;s information (username and email) to the console. In a real-world backend application, you might use this method or a similar one to display user information in logs, send a welcome email, or create an API response with the user&#39;s data. . User/Class @ Decorators: . A Python Class allows for the use of @ decorators, these allow access to attribute data without the use of functions. . @property decorator (aka getter). This enables developers to &quot;GET&quot; attribute data in a clean method (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to &quot;UPDATE&quot;/set attribute data in a clean method (object.name = &quot;Jeffrey&quot; versus object.set_name(&quot;Jeffrey&quot;)) | . The getter and setter methods provide a clean and controlled way to _ and _ the attributes of an object. This can be particularly useful when interacting with databases, APIs, or other parts of a web application that require the management and manipulation of object attributes. . class Student: def __init__(self, student, name): self._student = student self._name = name @property def name(self): return self._name @name.setter def name(self, new_name): self._name = new_name . In this example, the Student class has a name attribute, which is accessed and modified through the name property getter and setter methods. The _name attribute uses an underscore prefix, which is a convention to indicate it should not be accessed directly. . Usage of the getter and setter methods are below: . student = Student(1001, &quot;Derek Sol&quot;) print(student.name) # Get the name using the getter method student.name = &quot;Jagger Klein&quot; # Set the name using the setter method print(student.name) . Popcorn Hacks #2: The following code segment for computers does not have getter and setter methods called. Using the missing attributes &quot;model&quot; and &quot;year&quot;, add example getter and setters methods for this class. Show us an example output that this code segment might produce. class Computer: def __init__(self, model, year): self._model = model self._year = year @property def model(self): return self._model @model.setter def model(self, new_model): self._model = new_model @property def year(self): return self._year . computer = Computer(&quot;mac&quot;, 2020) print(&quot;computer: &quot; + computer.model + &quot;, &quot; + str(computer.year)) . computer: mac, 2020 . Databases and SQLite . A database is a structured collection of data that is organized and stored in a way that allows for efficient retrieval, manipulation, and management of that data. In other words, a database is a software application that allows you to store and manage large amounts of data in an organized manner. . Some Examples of Databases: . Storing and managing customer data, such as contact information, order history, and customer preferences. | Keeping track of inventory levels and stock movements in a warehouse or retail store. | Managing financial transactions, such as payments, invoices, and receipts. | . SQLite is a software _ that provides a user-friendly database management system. Unlike other databases, such as MySQL or PostgreSQL, SQLite is programmed within an application, which means it does not require a separate server process to operate. This makes SQLite great for web applications or for use in situations where you don&#39;t need a full database server. . In this lesson, we will be demonstrating how to set up a SQLite database in Flask, a Python web framework. Flask allows programmers to easily interact with SQLite databases, and we&#39;ll walk through the process of setting up a new database, creating tables, and adding data. We&#39;ll also cover some basic SQL commands that you can use to interact with your database, including CREATE TABLE, INSERT, SELECT, UPDATE, and DELETE. . Setting up a SQLite database in Flask . from flask import Flask import sqlite3 # Create a Flask application app = Flask(__name__) # Connect to the SQLite database using SQLite3 conn = sqlite3.connect(&#39;database.db&#39;) # Create a cursor object to execute SQL commands cursor = conn.cursor() # Create a table in the database using SQL commands cursor.execute(&#39;&#39;&#39;CREATE TABLE students (id INTEGER PRIMARY KEY, name TEXT, grade INTEGER)&#39;&#39;&#39;) # Commit the changes to the database conn.commit() # Close the connection conn.close() . Note: This will create a new file &#39;database.db&#39; in the _notebooks folder if one doesn&#39;t exist. . Breaking down this code segment: . We imported the necessary libraries and tools | We created a Flask application | We connected to the SQLite database using SQLite3 | We created a cursor object to execute SQL commands | We created tables in the database using SQL commands | . Flask provides several extensions and tools for working with SQLite databases, including Flask-SQLAlchemy, Flask-SQLite3, and Flask-Admin. These tools provide a high-level interface for interacting with the database, making it easy to perform common operations such as adding, updating, and deleting records. . CRUD Commands with SQLite . CRUD stands for Create, Read, Update, and Delete, which are the basic operations you can perform on data. SQL is useful library because it allows programmers to create new tables to organize data, add new data to a table, update data that&#39;s already there, or delete data that&#39;s no longer needed. . C: To create a new record in a database, you must first define the table structure that will store the data. This can be accomplished using SQL commands such as CREATE. Once the table is created, data can be added to it using the INSERT INTO command. . | R: To retrieve data from the database, you can use the READ command. You can specify which fields you want to retrieve and the conditions you want to apply using the WHERE clause. There are also several functions available to aggregate and manipulate data. . | U: To modify existing data in the database, you can use the UPDATE command. You will need to specify which table and fields you want to update, and the conditions you want to apply using the WHERE clause. . | D: To remove data from the database, you can use the DELETE command. . | . Example of CRUD within an SQLite Database . from flask import Flask import sqlite3 # Create a Flask application app = Flask(__name__) # Connect to the SQLite database using SQLite3 conn = sqlite3.connect(&#39;database.db&#39;) # Create a cursor object to execute SQL commands cursor = conn.cursor() # Create a table in the database using SQL commands cursor.execute(&#39;&#39;&#39;CREATE TABLE basketball (_player TEXT PRIMARY KEY, _team TEXT, _position TEXT, _opinion TEXT)&#39;&#39;&#39;) # Commit the changes to the database conn.commit() # Close the connection conn.close() . Hypothetically, our programmer wanted to create an application about basketball players, and created a new table in SQL to store and interact with user-submitted data. Using the same method as the previous table, a new table &#39;basketball&#39; is created by the cursor and added to the &#39;database.db&#39; file. . Create Function: . def create(): database = &#39;database.db&#39; player = input(&quot;Enter the player name&quot;) team = input(&quot;Enter team name&quot;) position = input(&quot;Enter player position&quot;) opinion = input(&quot;Enter your opinion &quot;) # Connecting to the database, create cursor to execute the SQL command connection = sqlite3.connect(database) cursor = connection.cursor() try: # Execute SQL to insert record in to db cursor.execute(&quot;INSERT INTO basketball (_player, _team, _position, _opinion) VALUES (?, ?, ?, ?)&quot;, (player, team, position, opinion)) # Commit the changes connection.commit() print(f&quot;New basketball with {player} is added.&quot;) except sqlite3.Error as error: print(&quot;Error while inserting record&quot;, error) # Closing cursor and connection cursor.close() connection.close() create() . New basketball with bruh is added. . The create() feature allows users to input information about a basketball player and store it in a SQLite table &#39;basketball&#39; inside the database file we already created &#39;database.db&#39;. The code prompts the user for the player&#39;s name, team name, position, and their opinion about the player, then establishes a connection to the SQLite database and creates a cursor object for executing SQL commands. . The cursor.execute() method is called with an SQL INSERT command to insert a new entry into the &#39;basketball&#39; table. The connection.commit() method saves the changes to the database, and if the record is inserted successfully, a confirmation message is printed. In case of errors, the except block catches the sqlite3.Error exception and prints an error message. Finally, the cursor and the connection to the database are closed, and the create() function is called to execute the code. . Read Function: . def read(): database = &#39;database.db&#39; # Connecting to the database, create cursor to execute the SQL command connection = sqlite3.connect(database) cursor = connection.cursor() # Fetch all the records from basketball table results = cursor.execute(&#39;SELECT * FROM basketball&#39;).fetchall() if len(results) != 0: for row in results: print(row) else: print(&quot;No player found.&quot;) # Closing cursor and connection cursor.close() connection.close() read() . (&#39;bruh&#39;, &#39;moment&#39;, &#39;everywhere&#39;, &#39;swag&#39;) . The read() feature retrieves and prints all entries from the &#39;basketball&#39; table in the specified SQLite database. The script establishes a connection to the SQLite database, creates a cursor object for executing SQL commands, and calls the cursor.execute() method with an SQL SELECT command to fetch all the entires from the &#39;basketball&#39; table. The fetchall() method retrieves all the rows returned by the SELECT command and stores them in the results variable. . The code then checks if there are any records in the table and, if so, iterates through each row in the results using a &#39;for loop&#39; and prints the row. If there are no records, the program prints &quot;No player found&quot;. Finally, the cursor and the connection to the database are closed, and the read() function is called to execute the code. . Update Function: . import sqlite3 def update(): database = &#39;database.db&#39; player = input(&quot;Enter a basketball player to update the opinion for:&quot;) opinion = input(&quot;Enter new opinion:&quot;) # Connecting to the database, create cursor to execute the SQL command connection = sqlite3.connect(database) cursor = connection.cursor() try: # Updating review for the basketball cursor.execute(&quot;UPDATE basketball SET _opinion = ? WHERE _player = ?&quot;, (opinion, player)) if cursor.rowcount != 0: print(f&quot;Review for the basketball is updated to {opinion}&quot;) connection.commit() else: print(f&quot;Player not found.&quot;) except sqlite3.Error as error: print(&quot;Error occurred&quot;, error) # Closing cursor and connection cursor.close() connection.close() update() . Review for the basketball is updated to most swag . This update feature updates the opinion for a specific basketball player in an SQLite database. The code defines an update() function, which prompts the user to input the basketball player they want to update and the new opinion for that player. The script connects to the SQLite database, creates a cursor object, and handles any potential errors while executing the SQL command. The cursor.execute() method updates the review in the database for the specified basketball item. . If at least one value is changed, a success message is printed and the changes are committed to the database. Otherwise, a &quot;Player not found.&quot; message is displayed. In the except block, if an error occurs, an error message along with specific error details is printed. Finally, the cursor and connection to the database are closed, and the update() function is called to execute the review update process. . Delete Function . import sqlite3 def delete(): database = &#39;database.db&#39; player = input(&quot;Enter basketball player to delete&quot;) # Connecting to the database, create cursor to execute the SQL command connection = sqlite3.connect(database) cursor = connection.cursor() try: cursor.execute(&quot;DELETE FROM basketball WHERE _player = ?&quot;, (player,)) if cursor.rowcount == 0: print(f&quot;{player} does not exist&quot;) else: print(f&quot;Successfully deleted basketball player {player}&quot;) connection.commit() except sqlite3.Error as error: print(&quot;Error occurred: &quot;, error) # Closing cursor and connection cursor.close() connection.close() delete() . Successfully deleted basketball player bruh . The delete feature deletes a specific basketball player from the specified SQLite database. The code defines a delete() function that prompts the user to input the basketball player they want to delete. After connecting to the SQLite database and creating a cursor object, the code handles potential errors while executing the SQL command. The cursor.execute() method is used to delete the basketball item with the specified ID. . If no rows are affected, a message is printed indicating that the basketball player does not exist. Otherwise, a success message is displayed, confirming the basketball player&#39;s deletion. The changes are then committed to the database. In the except block, any error that occurs triggers an error message along with specific error details. Finally, the cursor and connection to the database are closed, and the delete() function is called to execute the basketball item deletion process. This code showcases a practical way to remove information from an SQLite database based on user input. . Menu Functions: . Alongside the four CRUD functions, a menu function is designed to manage Create, Read, Update, Delete operations and display the schema. The menu function is responsible for taking in user inputs and making the program call various functions. When running a menu function, users enter their desired operation, whether it be Create, Read, Update, or Delete, and the input is checked by various conditions to determine which function should be called. Many menu functions are called recursively, so the cell will repeat the menu process until the user decides to exit. . Popcorn Hacks #3: The menu function below is missing some of the CRUD functions for the specified basketball players table. Fix the following code by adding the intended CRUD functions, then perform a READ function on the database. def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete&quot;) operation.lower() if operation == &#39;c&#39;: create() elif operation == &#39;r&#39;: read() elif operation == &#39;u&#39;: update() elif operation == &#39;d&#39;: delete() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . (&#39;bruh&#39;, &#39;swag guys&#39;, &#39;swag man&#39;, &#39;swag&#39;) . Image Uploading with SQLite . Using various Python Libraries, we are able to upload and customize images using python code, as well as using images to interact with databases. . One way to store images in a database is to INSERT the image data as a binary blob. . To store an image as a blob in SQLite, you can first read the image file and convert it to a binary format using a programming language like Python. Here&#39;s an example of how to do this: . Making the Table to store our Image Data: . from flask import Flask import sqlite3 # Create a Flask application app = Flask(__name__) # Connect to the SQLite database using SQLite3 conn = sqlite3.connect(&#39;database.db&#39;) # Create a cursor object to execute SQL commands cursor = conn.cursor() # Create a table in the database using SQL commands cursor.execute(&#39;&#39;&#39;CREATE TABLE images (name TEXT PRIMARY KEY, data BLOB)&#39;&#39;&#39;) # Commit the changes to the database conn.commit() # Close the connection conn.close() . We use a new data type &quot;BLOB&quot; to store specific data from our .jpg image. . Adding Image Data to our Table: . You can use this example sunset jpg for our code. Download and place it in the same repository as this notebook. Rename image to &#39;image.jpg&#39; . https://t4.ftcdn.net/jpg/01/04/78/75/360_F_104787586_63vz1PkylLEfSfZ08dqTnqJqlqdq0eXx.jpg . import sqlite3 # Open a connection to the SQLite database conn = sqlite3.connect(&#39;database.db&#39;) # Read the image file as binary data with open(&#39;images/HeadsOn.jpeg&#39;, &#39;rb&#39;) as jpeg: image_data = jpeg.read() # Insert the image data into the database conn.execute(&quot;INSERT INTO images (name, data) VALUES (?, ?)&quot;, (&#39;image&#39;, image_data)) # Commit the transaction conn.commit() # Close the connection conn.close() . In this example, the image data is read from the &quot;image.jpg&quot; file and inserted into the &quot;images&quot; table in the &quot;database.db&quot; SQLite database. The image data is then stored as a binary blob in the &quot;data&quot; column of the table. . Converting BLOB to Image -&gt; Displaying Image . import sqlite3 from PIL import Image import io # Open a connection to the SQLite database conn = sqlite3.connect(&#39;database.db&#39;) # Retrieve the image data from the database result = conn.execute(&quot;SELECT data FROM images WHERE name=?&quot;, (&#39;image&#39;,)).fetchone() # Convert the binary data to an image object image_data = io.BytesIO(result[0]) image = Image.open(image_data) # Display the image image.show() # Close the connection conn.close() . The image data is then retrieved from the &quot;images&quot; table using a SELECT statement with a WHERE clause that correctly matches the image name. The binary image data is then converted to an image object using the PIL library and displayed on the screen. . Popcorn Hacks #4: Using the same table, find a new .jpg image and add its image data to the database. Display the image using the PIL Library and show us the output image. conn = sqlite3.connect(&#39;database.db&#39;) result = conn.execute(&quot;SELECT data FROM images WHERE name=?&quot;, (&#39;image&#39;,)).fetchone() image_data = io.BytesIO(result[0]) image = Image.open(image_data) image.show() result = conn.execute(&quot;SELECT data FROM images WHERE name=?&quot;, (&#39;image2&#39;,)).fetchone() image_data = io.BytesIO(result[0]) image = Image.open(image_data) image.show() conn.close() # i have never heard of a loop in my life keep crying lmao waah waah thats you ltiearlly bro omg i see you tearing up thats so embarassing for you lmaooo bro stop crying man jesus its getting weird like can you not . HACKS (Due Sunday 11:59 PM) . Make sure to fill in all blank notes and popcorn hacks, and run each of the interactive coding exercises. (0.45) . Extra Credit: Winning team for Popcorn Hacks (+0.05) | . Create your own SQL database and create an algorithm that can insert, update, and delete data related to your topic of choice. Functionality for adding image data MUST be included. Points will be awarded based on effort and success. (0.45) . Extra Credit: Connect your backend database to a visible frontend! Screenshots of displayed data is fine. (+0.05) | . from flask import Flask from flask_sqlalchemy import SQLAlchemy from sqlalchemy.exc import IntegrityError from datetime import datetime import json app = Flask(__name__) database = &#39;sqlite:///inventory.db&#39; app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() db.init_app(app) class Item(db.Model): id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=True, nullable=False) _date = db.Column(db.String(255), unique=False, nullable=False) _action = db.Column(db.String(255), unique=False, nullable=False) _quantity = db.Column(db.Integer, unique=False, nullable=False) def __init__(self, name, date, action, quantity): self._name = name self._date = date self._action = action self._quantity = quantity @property def name(self): return self._name @name.setter def name(self, name): self._name = name @property def date(self): return self._date @date.setter def date(self, date): self._date = date @property def action(self): return self._action @action.setter def action(self, action): self._action = action @property def quantity(self): return self._quantity @quantity.setter def quantity(self, quantity): self._quantity = quantity def create(self): try: db.session.add(self) db.session.commit() return self except IntegrityError: db.session.remove() return None def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;date&quot;: self.date, &quot;action&quot;:self.action, &quot;quantity&quot;: self.quantity } def update(self, name, date, action, quantity): self.name = name self.date = date self.action = action self.quantity = quantity db.session.add(self) db.session.commit() return self def delete(self): db.session.delete(self) db.session.commit() return None def initUsers(): with app.app_context(): db.create_all() i1 = Item(name=&quot;Pencils&quot;, date=&quot;03-15-2023&quot;, action=&quot;Shipped&quot;, quantity=50) i2 = Item(name=&quot;Pens&quot;, date=&quot;12-01-2019&quot;, action=&quot;Delivered&quot;, quantity=3) i3 = Item(name=&quot;Markers&quot;, date=&quot;02-05-2020&quot;, action=&quot;In Transit&quot;, quantity=80) i4 = Item(name=&quot;Highlighters&quot;, date=&quot;01-15-2022&quot;, action=&quot;Shipped&quot;, quantity=7) i5 = Item(name=&quot;Crayons&quot;, date=&quot;03-15-2021&quot;, action=&quot;Processing&quot;, quantity=20) items = [i1, i2, i3, i4, i5] for item in items: try: object = item.create() print(f&quot;Created new item {object.name}&quot;) except: print(f&quot;Records exist item {item.name}, or error.&quot;) def dateCheck(date): try: datetime.strptime(date, &quot;%m-%d-%Y&quot;) return True except ValueError: return False def create(): nameChecked = False dateChecked = False actionChecked = False quantityChecked = False name = input(&quot;Enter the name of the new item&quot;) while nameChecked == False: if name == &quot;&quot;: print(&quot;You must enter a name.&quot;) name = input(&quot;Enter the name of the new item&quot;) else: nameChecked = True date = input(&quot;Enter the date of the action&quot;) while dateChecked == False: if dateCheck(date): dateChecked = True else: print(&quot;Invalid format for the date, please use MM-DD-YYYY (example for may 12, 2022: 05-12-2022)&quot;) date = input(&quot;Enter the date of the action&quot;) action = input(&quot;Enter the action&quot;) while actionChecked == False: if action == &quot;&quot;: print(&quot;You must enter an action.&quot;) action = input(&quot;Enter the action&quot;) else: actionChecked = True quantity = input(&quot;Enter the quantity of the item&quot;) while quantityChecked == False: try: quantity = int(quantity) quantityChecked = True except ValueError: print(&quot;You must enter a number for quantity.&quot;) quantity = input(&quot;Enter the quantity of the item&quot;) item = Item(name=name, date=date, action=action, quantity=quantity) with app.app_context(): try: object = item.create() print(&quot;Created n&quot;, object.read()) except: print(f&quot;Unknown error name {name}&quot;) def read(): jsonData = [] with app.app_context(): data = Item.query.all() for item in data: jsonData.append(item.read()) output = json.dumps(jsonData, indent=2) print(output) def update(): itemCheck = False name = input(&quot;Enter the name of the item you would like to update:&quot;) while itemCheck == False: emptyList = [] with app.app_context(): data = Item.query.all() for item in data: if item.name == name: selected = item else: emptyList.append(item) if len(emptyList) == len(data): input(&quot;Item not found, please enter a valid item name&quot;) else: itemCheck = True nameChecked = False dateChecked = False actionChecked = False quantityChecked = False name = input(&quot;Enter the new name of the item&quot;) while nameChecked == False: if name == &quot;&quot;: print(&quot;You must enter a name.&quot;) name = input(&quot;Enter the new name of the item&quot;) else: nameChecked = True date = input(&quot;Enter the new date of the action&quot;) while dateChecked == False: if dateCheck(date): dateChecked = True else: print(&quot;Invalid format for the date, please use MM-DD-YYYY (example for may 12, 2022: 05-12-2022)&quot;) date = input(&quot;Enter the new date of the action&quot;) action = input(&quot;Enter the new action&quot;) while actionChecked == False: if action == &quot;&quot;: print(&quot;You must enter an action.&quot;) action = input(&quot;Enter the new action&quot;) else: actionChecked = True quantity = input(&quot;Enter the new quantity of the item&quot;) while quantityChecked == False: try: quantity = int(quantity) quantityChecked = True except ValueError: print(&quot;You must enter a number for quantity.&quot;) quantity = input(&quot;Enter the new quantity of the item&quot;) with app.app_context(): try: selected.update(name, date, action, quantity) print(&quot;Updated n&quot;, selected.read()) except: print(f&quot;Unknown error name {name}&quot;) def delete(): itemCheck = False name = input(&quot;Enter the name of the item you would like to update:&quot;) while itemCheck == False: emptyList = [] with app.app_context(): data = Item.query.all() for item in data: if item.name == name: selected = item else: emptyList.append(item) if len(emptyList) == len(data): input(&quot;Item not found, please enter a valid item name&quot;) else: itemCheck = True with app.app_context(): selected.delete() print(&quot;Deleted: n&quot;, selected.read()) def CRUD(x=&quot;0&quot;): if x == &quot;bad&quot;: return operation = (input(&#39;&quot;&#39; + x + &#39;&quot; is not a valid operation. n Please only enter: C (Create), R (Read), U (Update), D (Delete)&#39;)).lower() if x != &quot;0&quot; else (input(&quot;Enter: C (Create), R (Read), U (Update), D (Delete)&quot;)).lower() if operation == &quot;c&quot; or operation == &quot;create&quot;: create() elif operation == &quot;r&quot; or operation == &quot;read&quot;: read() elif operation == &quot;u&quot; or operation == &quot;update&quot;: update() elif operation == &quot;d&quot; or operation == &quot;delete&quot;: delete() elif len(operation) == 0: return else: CRUD(operation) return CRUD() CRUD() . [ { &#34;id&#34;: 1, &#34;name&#34;: &#34;Pencils&#34;, &#34;date&#34;: &#34;03-08-2019&#34;, &#34;action&#34;: &#34;Snapped&#34;, &#34;quantity&#34;: 3 }, { &#34;id&#34;: 2, &#34;name&#34;: &#34;Pens&#34;, &#34;date&#34;: &#34;12-01-2019&#34;, &#34;action&#34;: &#34;Delivered&#34;, &#34;quantity&#34;: 3 }, { &#34;id&#34;: 3, &#34;name&#34;: &#34;Markers&#34;, &#34;date&#34;: &#34;02-05-2020&#34;, &#34;action&#34;: &#34;In Transit&#34;, &#34;quantity&#34;: 80 }, { &#34;id&#34;: 4, &#34;name&#34;: &#34;Highlighters&#34;, &#34;date&#34;: &#34;01-15-2022&#34;, &#34;action&#34;: &#34;Shipped&#34;, &#34;quantity&#34;: 7 }, { &#34;id&#34;: 5, &#34;name&#34;: &#34;Crayons&#34;, &#34;date&#34;: &#34;03-15-2021&#34;, &#34;action&#34;: &#34;Processing&#34;, &#34;quantity&#34;: 20 }, { &#34;id&#34;: 6, &#34;name&#34;: &#34;Sharpies&#34;, &#34;date&#34;: &#34;03-16-2023&#34;, &#34;action&#34;: &#34;Eaten&#34;, &#34;quantity&#34;: &#34;&#34; }, { &#34;id&#34;: 10, &#34;name&#34;: &#34;Rulers&#34;, &#34;date&#34;: &#34;03-17-2023&#34;, &#34;action&#34;: &#34;Measured&#34;, &#34;quantity&#34;: 3 }, { &#34;id&#34;: 12, &#34;name&#34;: &#34;aiden&#34;, &#34;date&#34;: &#34;12-12-1212&#34;, &#34;action&#34;: &#34;aiden&#34;, &#34;quantity&#34;: 3 }, { &#34;id&#34;: 13, &#34;name&#34;: &#34;fasdfaf&#34;, &#34;date&#34;: &#34;03-20-2020&#34;, &#34;action&#34;: &#34;123&#34;, &#34;quantity&#34;: 123 } ] Deleted: {&#39;id&#39;: 2, &#39;name&#39;: &#39;Pens&#39;, &#39;date&#39;: &#39;12-01-2019&#39;, &#39;action&#39;: &#39;Delivered&#39;, &#39;quantity&#39;: 3} Deleted: {&#39;id&#39;: 5, &#39;name&#39;: &#39;Crayons&#39;, &#39;date&#39;: &#39;03-15-2021&#39;, &#39;action&#39;: &#39;Processing&#39;, &#39;quantity&#39;: 20} [ { &#34;id&#34;: 1, &#34;name&#34;: &#34;Pencils&#34;, &#34;date&#34;: &#34;03-08-2019&#34;, &#34;action&#34;: &#34;Snapped&#34;, &#34;quantity&#34;: 3 }, { &#34;id&#34;: 3, &#34;name&#34;: &#34;Markers&#34;, &#34;date&#34;: &#34;02-05-2020&#34;, &#34;action&#34;: &#34;In Transit&#34;, &#34;quantity&#34;: 80 }, { &#34;id&#34;: 4, &#34;name&#34;: &#34;Highlighters&#34;, &#34;date&#34;: &#34;01-15-2022&#34;, &#34;action&#34;: &#34;Shipped&#34;, &#34;quantity&#34;: 7 }, { &#34;id&#34;: 6, &#34;name&#34;: &#34;Sharpies&#34;, &#34;date&#34;: &#34;03-16-2023&#34;, &#34;action&#34;: &#34;Eaten&#34;, &#34;quantity&#34;: &#34;&#34; }, { &#34;id&#34;: 10, &#34;name&#34;: &#34;Rulers&#34;, &#34;date&#34;: &#34;03-17-2023&#34;, &#34;action&#34;: &#34;Measured&#34;, &#34;quantity&#34;: 3 }, { &#34;id&#34;: 12, &#34;name&#34;: &#34;aiden&#34;, &#34;date&#34;: &#34;12-12-1212&#34;, &#34;action&#34;: &#34;aiden&#34;, &#34;quantity&#34;: 3 }, { &#34;id&#34;: 13, &#34;name&#34;: &#34;fasdfaf&#34;, &#34;date&#34;: &#34;03-20-2020&#34;, &#34;action&#34;: &#34;123&#34;, &#34;quantity&#34;: 123 } ] .",
            "url": "https://aidenhuynh.github.io/CS_Swag/2023/04/27/P3M-Team-SnapShot-Student.html",
            "relUrl": "/2023/04/27/P3M-Team-SnapShot-Student.html",
            "date": " • Apr 27, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "API Table",
            "content": "API Table - Pokémon . . Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . ID Pokémon Picture .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2023/04/27/API_Table.html",
            "relUrl": "/markdown/2023/04/27/API_Table.html",
            "date": " • Apr 27, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "P3-M 4/26 Frontend-Backend Dev w/Big Idea 1",
            "content": "Frontend and Backend Development with Big Idea 1 Review . Please make a copy of our repository. In your terminal type:git clone https://github.com/jiya-sav/ourshiny.git Locate &#39;Final Lesson&#39; in our notebooks folder and make a copy, make sure your name is in the new name. . Link to our fastpages: fastpages . Link to our repository: repository . Hacks and Point Division . Popcorn questions answered within lesson (.2) | Screenshot showing proof that conda is installed (.1) | Create 3 quiz questions to demonstrate the main steps in creating a repository on Github (.1) | Fetch from a third party API, and display json data. Then use the json data in any simple JavaScript function (hint: parse, this makes json data into a JavaScript object) (.4) In your code, comment on how you implemented a 3rd party API. Reflect on how using the 3rd party API helped. | . | Pull request successful completion: (.1) | . Extra: Use fetch() and display data from an API, self-made or third party (.1) . Conda installed proof evidence downloaded conda it is on my computer proof screenshot . .",
            "url": "https://aidenhuynh.github.io/CS_Swag/student/2023/04/26/P3M-frontend-backend-connection.html",
            "relUrl": "/student/2023/04/26/P3M-frontend-backend-connection.html",
            "date": " • Apr 26, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Frontend and Backend Development with Big Idea 1 Review",
            "content": "Installing Scripts Lesson . For Windows . After you&#39;ve installed VSCode using WSL, install Anaconda on WSL. . Anaconda is like a big tool box for your computer, it has tools and libraries that you might need for data analysis, programming, and computing. Anaconda Python packages include pandas, numpy, sqlite, jupyter, bash, and other kernels. Conda is a tool that helps you manage these tools inside Anaconda. It lets you install, update, delete, and organize packages and materials. Conda script tells Conda what tools and materials you need and how to install them in your Anaconda toolbox. . Type these commands in powershell or terminal . PS C: Users UserName&gt; wsl # Windows prompt to WSL command $ cd /tmp # used to store temporary files $ wget https://repo.anaconda.com/archive/Anaconda3-2023.03-Linux-x86_64.sh # downloadable file $ chmod +x Anaconda3-2022.05-Linux-x86_64.sh # chmod (change mode command) changes permissions for a file or directory # Answer yes to all the prompts $ ./Anaconda3-2022.05-Linux-x86_64.sh . Start a new WSL Command or Powershell. Now the WSL prompt should be prefixed with (base) from Anaconda install. If not, go back to Anaconda install. The base prefix indicates that you are running inside the conda/anaconda environment. The command &quot;conda deactivate&quot; should bring you back. . PS C: Users ShayM&gt; wsl # Windows prompt (base) shay@MSI:/mnt/c/Users/ShayM$ cd ~ # WSL prompt (base) shay@MSI:~$ # WSL home, best place to install files # you can check your conda versions (base) id:~$ conda --version . For MacOS . Python2 install on MacOS . Install Python2&gt; VSCode install on MacOS. | Install VSCode&gt; Anaconda install on MacOS. | Download for MacOS:Anaconda- Run Install: Answer yes to questions Homebrew install on MacOS | Homebrew is a tool that helps you easily install and manage software on your Mac. Think of it like a virtual store for your computer where you can browse, download and install a variety of useful programs and tools. | Copy and Paste to Install from Terminal Homebrew - Copy bash ... curl ... command using copy box on website Launch terminal from search bar | Paste bash ... curl ... command into Terminal ... | Make sure command starts, this should provide feedback/output in terminal and could take a long time, like 10-min, there could be a prompt in the middle, at about 5-minutes. Follow any on screen instructions provided in terminal output to finish. | . | Homebrew installs a tool called &quot;brew&quot; which helps add and manage developer packages on MacOS. | . Start a new WSL terminal. Now the terminal prompt should be prefixed with (base) from Anaconda install. If not, go back to Anaconda install. . Having Homebrew and Anaconda allows you to easily install Key Packages needed on MacOS like the commands below are all neccessary:bash$ brew list # list packages $ brew update # update package list $ brew upgrade # upgrade packages $ brew install git # install latest git $ brew install python # install python3 for development $ python --version # version of python3 installed $ brew install java # openjdk install . Hacks: Screen shot that you have conda installed | . Setting up GitHub Pages with FastPages Features . All of you have created your own repository before at the beginning of the year, but some things have changed in the process. . Duplicate APCSP, and use it as template for your own repo . | Name your repo and include all branches before clicking the green create button. . | If you have an automatically generated pull request, then go ahead and follow the instructions on there. If there is no pull request, as shown below, then move on to step 4. . | Navigate to this link. Select: RSA and 4096 and leave Passphrase blank. Click the blue button Generate-SSH-Keys. You have just created an ssh key-pair . | Navigate to this link. Replace the section of the link &quot;yourrepositoryname&quot; with your repository name. In the picture, I have inputted “ourshiny,” because it is my repository name. Replace the section of the link &quot;yourgithubname&quot; with your repository name that you just made. https://github.com/yourgithubname/yourrepositoryname/settings/secrets/actions . | Click New repository secret. Copy and paste the Private Key (generated in step 4) into the Value field. This includes the &quot;BEGIN RSA PRIVATE KEY&quot; and &quot;--END RSA PRIVATE KEY&quot; portions. In the Name field, name the secret SSH_DEPLOY_KEY. Once done, click the green Add Secret button. . | Navigate to this link, then replace the portions below with your github and repository names. My github name in the image below is jiya-sav, and my repository name is ourshiny. https://github.com/yourgithubname/yourrepositoryname/settings/keys . | Click the Add deploy key button. Paste your Public Key (generated in step 4) into the Key box. In the Title, name the key anything you want, for example fastpages-key. Finally, make sure you click the checkbox next to Allow write access (pictured below), and click the green Add key button to save the key. . | GitHub Actions will build your site, which will take 2-3 minutes to complete. This will happen anytime you push changes to the master branch of your repository. You can monitor the logs of this if you like on the Actions tab of your repo. Your GH-Pages Status badge on your README will eventually appear and be green, indicating your first successful build. You can monitor the status of your site in the GitHub Pages section of your repository settings. . | Now that you have made your repository secure, you can clone it into vscode and CODE, CODE, CODE!!! . How to Make a Pull Request . After you&#39;ve cloned a repository and made changes to it, go to pull requests in your Github repository . | Once you click &#39;create new pull request,&#39; you should see this with your new changes: . | Change the title and send the pull request . | Hacks: You will be turning in all your hacks as a pull request. Title the pull request as shown in the third step but with your own name. Any other titles will not be accepted. | . Fetching . The Basics . Fetching means getting data from somewhere else, like a website or database. | . JavaScript is a programming language that can be used to fetch data from a website or database. . When you fetch data with JavaScript, you first need to tell it where to get the data from. This is called the URL. | Once you know the URL, you can use JavaScript to go and get the data from that URL. | When the data comes back, it&#39;s usually in a format like text or JSON. This means that you might need to do some additional work to turn the data into something that your website or application can use. | Once you have the data, you can use JavaScript to display it on your website or application. You can put it in a table, show it on a map, or do anything else you can think of. | . About Fetching . Method . The fetching methods are in line with the CRUD (Create, Read, Update, Delete), and list as follows: . &quot;GET&quot;: Probably the most common method you would use, which is in line with &quot;read&quot;. It essentially &quot;gets&quot; the information from the API and brings it to the frontend where you are able to display it and read it. | &quot;POST&quot;: Lines up with &quot;create&quot; and adds a resource to the API. You will probably mostly be using this with your own API or if a website adds your input to an API. | &quot;PUT&quot; and &quot;PATCH&quot;: Essentially the &quot;update&quot; for API. Use &quot;PUT&quot; if you want to change the whole resource, or &quot;PATCH&quot; if you want to change just one part of a resource. | &quot;DELETE&quot;: Exactly how it sounds, deletes a resource from the API | . Popcorn Hacks: . What method should I use if I want to display some of the data stored in the backend? GET!!!!!!!!!!!!! | . | What method would I use if something in the data is misspelled and I want to fix it real quick? PATCH!!!!!!!!! | . | What method should I use if I want to add a new entry to the data? POST!!!!!!!!!!!! | . | . Filtering Data . If we want to display API data, we are going to have to filter what we want to display for multiple reasons These include making sure that the user only sees information they need to see, and not anything else | Also we need to present the information in a readable format instead of just seeing the raw data | . | . The below code segment, is from a previous project. It shows the use of a url being fetched, and the JavaScript fetch() command being implemented. . // prepare fetch urls // const url = &quot;https://ssjn.nighthawkcodescrums.gq/api/song&quot;; const url = &quot;https://ssjncpt.duckdns.org/api/song&quot;; const sad_url = url + &quot;/sad/&quot;; // sad category const happy_url = url + &quot;/happy/&quot;; // happy category const rage_url = url + &quot;/rage/&quot;; // rage category const indian_url = url + &quot;/indian/&quot;; // indian category // prepare fetch GET options const options = { method: &#39;GET&#39;, // *GET, POST, PUT, DELETE, etc. mode: &#39;cors&#39;, // cors, *cors, same-origin cache: &#39;default&#39;, // *default, no-cache, reload, force-cache, only-if-cached credentials: &#39;omit&#39;, // include, *same-origin, omit headers: { &#39;Content-Type&#39;: &#39;application/json&#39; // &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;, }, }; // prepare fetch PUT options, clones with JS Spread Operator (...) const put_options = {...options, method: &#39;PUT&#39;}; // clones and replaces method // fetch the API fetch(url, options) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { error(&#39;GET API response failure: &#39; + response.status); return; } // valid response will have JSON data . Third Party APIs . APIs provided by other developers for public use. . | Programmers can use the content of these APIs to create new functionalities for their programs, or they can also simply take advantage of the data of the API for different uses. . Ex: A developed can use Google Account login to allow users to log in with their google account . | Ex: Using the content of a weather API to make a weather app . | . | The functionalities of these APIs are usually accessed via JavaScript (usually) as you’ve seen before in your past projects. . | 3rd party APIs are located on third party servers. To access them from JavaScript you first need to connect to the API functionality and make it available on your page. . | . &lt;script src=&quot;https://api.mqcdn.com/sdk/mapquest-js/v1.3.2/mapquest.js&quot; defer&gt;&lt;/script&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://api.mqcdn.com/sdk/mapquest-js/v1.3.2/mapquest.css&quot; /&gt; . Here is an example of accessing the objects available in the library above. | . const map = L.mapquest.map(&#39;map&#39;, { center: [53.480759, -2.242631], layers: L.mapquest.tileLayer(&#39;map&#39;), zoom: 12 }); . The process of accessing and using third-party APIs can vary depending on the specific API and the requirements set by the API provider. 3rd party APIs use developer keys to allow developers access to the API functionality, which protects the owner of the API. | . L.mapquest.key = &#39;YOUR-API-KEY-HERE&#39;; . Developers must apply to get the key of a certain API, and then include it in their code to be allowed access to the API&#39;s functionality. Some API keys are accessed slightly differently, but the method is similar for the most part. | . Put the link of a 3rd party API you have or will use below? . API API API API API API API API API (pokemon api) . Pandas . While 3rd party APIs give you access to a plethora of data you may have not been able to include using a completely new self-made database, pandas can help you organize and utlize this data. . Pandas is an open-source library that allows for the manipulation and analysis of numerical data, which is vital in real-life applications. . We have used this in the song recommendation program we are currently developing. The use of pandas allows us to take the csv file we obtained from a third party and display it in a format we can manipulate and analyze. . import os import pandas as pd from flask import render_template @app.route(&#39;/songdata&#39;) def songdata(): # Path to the CSV file csv_path = os.path.join(app.static_folder, &#39;songdata.csv&#39;) # Read the CSV file into a pandas dataframe df = pd.read_csv(csv_path) # Render the dataframe as an HTML table using Jinja2 return render_template(&#39;songdata.html&#39;, table=df.to_html(index=False)) . This is how the dataframe will appear on our flask: . Python (Request) Fetch . Example with Weather API . What method is being used in these cells? GET!!!!!!!!!!!!!!!!!!!!! | . | . import requests url = &quot;https://yahoo-weather5.p.rapidapi.com/weather&quot; querystring = {&quot;location&quot;:&quot;San Diego&quot;,&quot;format&quot;:&quot;json&quot;,&quot;u&quot;:&quot;f&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;4abcb54450msh7468dfd72294e89p18fbaajsn6d4200063b39&quot;, &quot;X-RapidAPI-Host&quot;: &quot;yahoo-weather5.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.json()) . {&#39;location&#39;: {&#39;city&#39;: &#39;San Diego&#39;, &#39;woeid&#39;: 2487889, &#39;country&#39;: &#39;United States&#39;, &#39;lat&#39;: 32.831699, &#39;long&#39;: -117.122002, &#39;timezone_id&#39;: &#39;America/Los_Angeles&#39;}, &#39;current_observation&#39;: {&#39;pubDate&#39;: 1682463385, &#39;wind&#39;: {&#39;chill&#39;: 64, &#39;direction&#39;: &#39;WSW&#39;, &#39;speed&#39;: 9}, &#39;atmosphere&#39;: {&#39;humidity&#39;: 65, &#39;visibility&#39;: 10, &#39;pressure&#39;: 1012.5}, &#39;astronomy&#39;: {&#39;sunrise&#39;: &#39;6:08 AM&#39;, &#39;sunset&#39;: &#39;7:26 PM&#39;}, &#39;condition&#39;: {&#39;temperature&#39;: 65, &#39;text&#39;: &#39;Mostly Cloudy&#39;, &#39;code&#39;: 28}}, &#39;forecasts&#39;: [{&#39;day&#39;: &#39;Tue&#39;, &#39;date&#39;: 1682438400, &#39;high&#39;: 67, &#39;low&#39;: 55, &#39;text&#39;: &#39;Mostly Clear&#39;, &#39;code&#39;: 33}, {&#39;day&#39;: &#39;Wed&#39;, &#39;date&#39;: 1682524800, &#39;high&#39;: 73, &#39;low&#39;: 56, &#39;text&#39;: &#39;Partly Cloudy&#39;, &#39;code&#39;: 30}, {&#39;day&#39;: &#39;Thu&#39;, &#39;date&#39;: 1682611200, &#39;high&#39;: 76, &#39;low&#39;: 57, &#39;text&#39;: &#39;Mostly Sunny&#39;, &#39;code&#39;: 34}, {&#39;day&#39;: &#39;Fri&#39;, &#39;date&#39;: 1682697600, &#39;high&#39;: 76, &#39;low&#39;: 58, &#39;text&#39;: &#39;Mostly Sunny&#39;, &#39;code&#39;: 34}, {&#39;day&#39;: &#39;Sat&#39;, &#39;date&#39;: 1682784000, &#39;high&#39;: 77, &#39;low&#39;: 59, &#39;text&#39;: &#39;Partly Cloudy&#39;, &#39;code&#39;: 30}, {&#39;day&#39;: &#39;Sun&#39;, &#39;date&#39;: 1682870400, &#39;high&#39;: 75, &#39;low&#39;: 59, &#39;text&#39;: &#39;Partly Cloudy&#39;, &#39;code&#39;: 30}, {&#39;day&#39;: &#39;Mon&#39;, &#39;date&#39;: 1682956800, &#39;high&#39;: 64, &#39;low&#39;: 54, &#39;text&#39;: &#39;Cloudy&#39;, &#39;code&#39;: 26}, {&#39;day&#39;: &#39;Tue&#39;, &#39;date&#39;: 1683043200, &#39;high&#39;: 62, &#39;low&#39;: 52, &#39;text&#39;: &#39;Mostly Cloudy&#39;, &#39;code&#39;: 28}, {&#39;day&#39;: &#39;Wed&#39;, &#39;date&#39;: 1683129600, &#39;high&#39;: 60, &#39;low&#39;: 53, &#39;text&#39;: &#39;Partly Cloudy&#39;, &#39;code&#39;: 30}, {&#39;day&#39;: &#39;Thu&#39;, &#39;date&#39;: 1683216000, &#39;high&#39;: 62, &#39;low&#39;: 51, &#39;text&#39;: &#39;Partly Cloudy&#39;, &#39;code&#39;: 30}, {&#39;day&#39;: &#39;Fri&#39;, &#39;date&#39;: 1683302400, &#39;high&#39;: 63, &#39;low&#39;: 53, &#39;text&#39;: &#39;Mostly Cloudy&#39;, &#39;code&#39;: 28}]} . The fetch worked and we can see all the data, but this is presented in a way that is not very readable. It also has a lot of information we didn&#39;t see. Let&#39;s say I just want to see the projected weather forecasts. . import requests url = &quot;https://yahoo-weather5.p.rapidapi.com/weather&quot; querystring = {&quot;location&quot;:&quot;San Diego&quot;,&quot;format&quot;:&quot;json&quot;,&quot;u&quot;:&quot;f&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;4abcb54450msh7468dfd72294e89p18fbaajsn6d4200063b39&quot;, &quot;X-RapidAPI-Host&quot;: &quot;yahoo-weather5.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(&quot;San Diego Weather Forecast:&quot; + &quot; n&quot;) forecast = response.json().get(&quot;forecasts&quot;) i = 0 while i &lt; len(forecast): for key, value in forecast[i].items(): print(&quot; t&quot; + key, value) i += 1 print(&quot; n&quot;) . San Diego Weather Forecast: day Tue date 1682438400 high 67 low 55 text Mostly Clear code 33 day Wed date 1682524800 high 73 low 56 text Partly Cloudy code 30 day Thu date 1682611200 high 76 low 57 text Mostly Sunny code 34 day Fri date 1682697600 high 76 low 58 text Mostly Sunny code 34 day Sat date 1682784000 high 77 low 59 text Partly Cloudy code 30 day Sun date 1682870400 high 75 low 59 text Partly Cloudy code 30 day Mon date 1682956800 high 64 low 54 text Cloudy code 26 day Tue date 1683043200 high 62 low 52 text Mostly Cloudy code 28 day Wed date 1683129600 high 60 low 53 text Partly Cloudy code 30 day Thu date 1683216000 high 62 low 51 text Partly Cloudy code 30 day Fri date 1683302400 high 63 low 53 text Mostly Cloudy code 28 . As we can see, we now can see the data in a much more organized and readable format, and we only see the forecasts, which is what we wanted to see . Hacks and Point Division . Popcorn questions answered within lesson (.2) | Screenshot showing proof that conda is installed (.1) | Create 3 quiz questions to demonstrate the main steps in creating a repository on Github (.1) | Fetch from a third party API, and display json data. Then use the json data in any simple JavaScript function (hint: parse, this makes json data into a JavaScript object) (.4) In your code, comment on how you implemented a 3rd party API. Reflect on how using the 3rd party API helped. | . | Pull request successful completion: (.1) | . Extra: Use fetch() and display data from an API, self-made or third party (.1) . HACKS! . Conda Proof . Conda installed proof evidence downloaded conda it is on my computer proof screenshot | . . Quiz . What is it called when you make a copy of an existing repository? Answer Cloning | . | What type of key do you need for Github Actions to deploy your site? Answer Public | . | Where do you create a repository? Answer Github | . | API (all the pokemons) . Jupyter kernel was busted so I did it on a markdown file Uses a pokemon api and displays all of the pokemon on a table (takes 10 years to load fully, may crash your browser 🥺🥺🥺) | . | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/frontback",
            "relUrl": "/jupyter/frontback",
            "date": " • Apr 26, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "P3-M 4/25 Simulations using Pandas",
            "content": "Objectives . Understand how computers can be used to represent real-world phenomena or outcomes | Compare simulations with real-world contexts. | Implement code to mimic real world situations, problems, or phenomena. | Incorporate databases and python libraries into a simulation | What are simulations by College Board definition? . Simulations are abstractions that mimic more complex objects or phenomena from the real world Purposes include drawing inferences without the contraints of the real world | . | Simulations use varying sets of values to reflect the changing state of a real phenomenon | Often, when developing a simulation, it is necessary to remove specific details or simplify aspects Simulations can often contain bias based on which details or real-world elements were included/excluded | . | Simulations allow the formulation of hypotheses under consideration | Variability and randomness of the world is considered using random number generators | Examples: rolling dice, spinners, molecular models, analyze chemicals/reactions... | . Analyzing an Example: Air-Traffic Simulator . Say we want to find out what the optimal number of aircrafts that can be in the air in one area is. . | A simulation allows us to explore this question without real world contraints of money, time, safety . | Unfortunately we can&#39;t just fly 67 planes all at once and see what happens | Since the simulation won&#39;t be able to take all variables into control, it may have a bias towards one answer | Will not always have the same result | . Functions we often need . import random # a module that defines a series of functions for generating or manipulating random integers random.choice() #returns a randomly selected element from the specified sequence random.choice(mylist) # returns random value from list random.randint(0,10) #randomly selects an integer from given range; range in this case is from 0 to 10 random.random() #will generate a random float between 0.0 to 1. . TypeError Traceback (most recent call last) /Users/Aiden/CS_Swag/_notebooks/2023-04-25-P3M-Simulations.ipynb Cell 6 in &lt;cell line: 2&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/Aiden/CS_Swag/_notebooks/2023-04-25-P3M-Simulations.ipynb#W5sZmlsZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; import random # a module that defines a series of functions for generating or manipulating random integers -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/Aiden/CS_Swag/_notebooks/2023-04-25-P3M-Simulations.ipynb#W5sZmlsZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; random.choice() #returns a randomly selected element from the specified sequence &lt;a href=&#39;vscode-notebook-cell:/Users/Aiden/CS_Swag/_notebooks/2023-04-25-P3M-Simulations.ipynb#W5sZmlsZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; random.choice(mylist) # returns random value from list &lt;a href=&#39;vscode-notebook-cell:/Users/Aiden/CS_Swag/_notebooks/2023-04-25-P3M-Simulations.ipynb#W5sZmlsZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; random.randint(0,10) #randomly selects an integer from given range; range in this case is from 0 to 10 TypeError: choice() missing 1 required positional argument: &#39;seq&#39; . College Board Question 1 . Question: The following code simulates the feeding of 4 fish in an aquarium while the owner is on a 5-day trip: . numFish ← 4 foodPerDay ← 20 foodLeft ← 160 daysStarving ← 0 # Simulate 5 days REPEAT 5 TIMES { # Calculate how much food the fish would eat by multiplying the amount of fish per how much food they eat per day foodConsumed ← numFish * foodPerDay # Calculate remaining food by subtracting total amount by consumed foodLeft ← foodLeft - foodConsumed # If there is no food left, add one day to starving variable IF (foodLeft &lt; 0) { daysStarving ← daysStarving + 1 } } . This simulation simplifies a real-world scenario into something that can be modeled in code and executed on a computer. | Explain what each part of the code does | . Simulates how many days the fish will starve given through calculations using initial food, amount of food consumed by the fish each day, and the number of fish. . College Board Question 2 (robot) . need to add . Card Flip . import random cards = [&quot;Ace&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;10&quot;, &quot;Jack&quot;, &quot;Queen&quot;, &quot;King&quot;] suits = [&quot;Diamonds&quot;, &quot;Hearts&quot;, &quot;Spades&quot;, &quot;Clubs&quot;] def draw(n): while n &gt; 0: print(random.choice(cards) + &quot; of &quot; + random.choice(suits)) n -= 1 draw(10) . Ace of Diamonds 5 of Spades Queen of Clubs 8 of Diamonds 5 of Diamonds Jack of Hearts 4 of Clubs 7 of Spades 6 of Diamonds 5 of Hearts . Coin Flip . import random def coinflip(n): #def function tails = 0 heads = 0 while n &gt; 0: randomflip = random.randint(1, 10) if randomflip &lt;= 4: # 40% likely to choose heads print(&quot;Heads&quot;) heads += 1 else: print(&quot;Tails&quot;) tails += 1 n -= 1 print(&quot; nHeads: &quot; + str(heads) + &quot; nTails: &quot; + str(tails)) #Tossing the coin n times: coinflip(10) . Heads Tails Tails Heads Tails Tails Tails Heads Tails Heads Heads: 4 Tails: 6 . Your turn: Change the code to make it simulate the flipping of a weighted coin. . Fun note the results are exactly as experimental that&#39;s crazy bro . Adding images (in Python) . Add a heads and tails images into your images directory with the correct names and run the code below | . import random # importing Image class from PIL package from PIL import Image def flip(n): while n &gt; 0: # creating a object im = Image.open(r&quot;images/HeadsOn.jpeg&quot;) image = Image.open(r&quot;images/TailsOn.jpeg&quot;) i=random.randint(0,1) if i == 1: print(&quot;heads&quot;) display(im) else: print(&quot;tails&quot;) display(image) n -= 1 flip(2) . tails . heads . Spin the Wheel . import random from PIL import Image print(&quot;Spin the wheel!&quot;) print(&quot;-&quot;) def wheel(n): blueImg = Image.open(r&quot;images/blueWheel.png&quot;) redImg = Image.open(r&quot;images/redWheel.png&quot;) blue = 0 red = 0 for i in range(n): spin = random.randint(1,2) if spin == 1: # head blue = blue + 1 print(&quot;Blue!&quot;) display(blueImg) else: # tail red = red + 1 print(&quot;Red!&quot;) display(redImg) print() print(&#39;Number of blue:&#39;, blue) print(&#39;Number of red:&#39;, red) wheel(2) . Spin the wheel! - Blue! . Red! . Number of blue: 1 Number of red: 1 . Your turn: Add a visual to the simulation . Example on how you can incorporate a database into a simulation . import random beak = [&quot;small-beak&quot;, &quot;long-beak&quot;, &quot;medium-beak&quot;], wing = [&quot;small-wings&quot;, &quot;large-wings&quot;, &quot;medium-wings&quot;], height = [&quot;short&quot;, &quot;tall&quot;,&quot;medium&quot;] naturaldisaster = [&quot;flood&quot;, &quot;drought&quot;, &quot;fire&quot;, &quot;hurricane&quot;, &quot;dustbowl&quot;] print(&quot;When a&quot; , random.choice(naturaldisaster) , &quot;hit&quot;, random.choice(height), &quot;birds died&quot;) . When a drought hit short birds died . Population Growth and Plots . import random totalPopulation = 50 growthFactor = 1.00005 dayCount = 0 #Every 2 months the population is reported while totalPopulation &lt; 1000000: totalPopulation *= growthFactor #Every 56th day, population is reported dayCount += 1 if dayCount == 56: dayCount = 0 print(totalPopulation) . 50.14019267336515 50.28077842644361 50.421758361373264 50.5631335833823 50.704905200797775 50.847074325054315 50.98964207070282 51.13260955541927 51.27597790001347 51.41974822843774 51.563921667795874 51.70849934835185 51.85348240353876 51.99887196996765 52.14466918743647 52.290875198939005 52.43749115067384 52.5845181920533 52.731957475712534 52.87981015751845 53.028077396578915 53.17676035525173 53.325860199153716 53.47537809717 53.62531522146305 53.775672747481956 53.92645185397153 54.0776537229816 54.22927953987637 54.38133049334356 54.533807775403844 54.68671258142016 54.840046110106975 54.993809563539834 55.14800414716474 55.302631069807575 55.45769154368362 55.613186784406984 55.769118011000224 55.92548644590379 56.082293314985726 56.239539847551235 56.39722727635229 56.55535683759732 56.71392977096098 56.87294731959368 57.032410730131446 57.19232125270578 57.35268014095325 57.51348865202554 57.67474804659919 57.83645958888546 57.998624546640265 58.161244191174156 58.324319797362236 58.48785264365415 58.651844012084126 58.81629518828111 58.98120746147867 59.14658212452524 59.312420473894186 59.47872380969402 59.645493435678574 59.81273065925718 59.98043679150499 60.14861314717315 60.31726104469929 60.486381806217665 60.65597675756963 60.82604722831395 60.99659455173736 61.16762006486491 61.33912510847044 61.51111102708713 61.68357916901805 61.85653088634677 62.029967534947765 62.2038904744973 62.3783010684839 62.5532006842192 62.72859069284855 62.9044724693617 63.08084739260377 63.25771684528589 63.43508221399618 63.61294488921051 63.791306265303454 63.9701677405592 64.14953071718247 64.32939660130967 64.50976680301973 64.69064273634523 64.87202581928359 65.05391747380793 65.23631912587847 65.41923220545367 65.6026581465012 65.78659838700955 65.97105436899903 66.1560275385331 66.34151934572994 66.52753124477363 66.71406469392542 66.90112115553534 67.08870209605372 67.27680898604255 67.46544330018713 67.65460651730747 67.84430012037001 68.0345255964992 68.22528443698917 68.41657813731555 68.60840819714687 68.80077612035657 68.99368341503474 69.1871315935 69.38112217231115 69.57565667227935 69.77073661847982 69.96636354026379 70.16253897127073 70.35926444944013 70.55654151702359 70.75437172059699 70.95275661107263 71.15169774371125 71.35119667813444 71.55125497833659 71.75187421269743 71.95305595399414 72.15480177941373 72.35711327056549 72.55999201349321 72.76343959868774 72.96745762109934 73.17204768015053 73.37721137974819 73.58295032829629 73.7892661387086 73.99616042842136 74.20363481940569 74.41169093818056 74.62033041582539 74.82955488799308 75.03936599492248 75.24976538145154 75.46075469703 75.67233559573249 75.88450973627147 76.0972787820101 76.31064440097533 76.52460826587115 76.73917205409133 76.95433744773317 77.17010613360995 77.3864798032648 77.60346015298347 77.82104888380806 78.03924770155005 78.25805831680371 78.47748244495963 78.69752180621806 78.91817812560257 79.13945313297332 79.36134856304064 79.58386615537891 79.80700765444 80.0307748095669 80.2551693750076 80.4801931099287 80.70584777842916 80.93213514955427 81.15905699730956 81.38661510067445 81.6148112436165 81.84364721510522 82.07312480912596 82.30324582469439 82.53401206587023 82.76542534177153 82.99748746658884 83.23020025959946 83.46356554518161 83.69758515282888 83.93226091716447 84.16759467795565 84.40358828012793 84.64024357377998 84.87756241419767 85.11554666186892 85.35419818249822 85.59351884702103 85.83351053161893 86.07417511773376 86.31551449208287 86.55753054667352 86.80022517881795 87.0436002911482 87.28765779163105 87.53239959358282 87.77782761568463 88.02394378199715 88.27075002197599 88.51824827048654 88.7664404678193 89.01532855970511 89.26491449733037 89.51520023735218 89.76618774191397 90.01787897866066 90.27027592075423 90.523380546889 90.77719484130736 91.0317207938151 91.28696039979738 91.54291566023389 91.79958858171481 92.05698117645656 92.31509546231764 92.57393346281405 92.83349720713561 93.0937887301617 93.3548100724771 93.61656328038823 93.8790504059389 94.1422735069267 94.40623464691882 94.67093589526853 94.93637932713133 95.20256702348084 95.46950107112576 95.73718356272572 96.00561659680784 96.2748022777833 96.54474271596374 96.81544002757771 97.08689633478744 97.35911376570533 97.63209445441078 97.90584054096682 98.18035417143682 98.45563749790136 98.73169267847535 99.00852187732455 99.28612726468283 99.56451101686899 99.84367531630399 100.12362235152784 100.4043543172171 100.6858734142017 100.9681818494825 101.25128183624842 101.53517559389384 101.81986534803593 102.1053533305323 102.39164177949827 102.6787329393245 102.96662906069467 103.2553324006029 103.54484522237183 103.83516979566991 104.12630839652952 104.41826330736457 104.7110368169886 105.00463122063279 105.29904881996362 105.59429192310112 105.89036284463707 106.18726390565291 106.48499743373814 106.78356576300845 107.082971234124 107.38321619430786 107.68430299736441 107.9862340036976 108.28901158032987 108.59263810092013 108.89711594578293 109.20244750190679 109.50863516297301 109.81568132937433 110.12358840823391 110.43235881342416 110.74199496558553 111.05249929214574 111.36387422733867 111.67612221222326 111.98924569470296 112.30324712954469 112.61812897839816 112.93389370981537 113.25054379926964 113.56808172917515 113.8865099889064 114.20583107481775 114.52604749026302 114.84716174561511 115.16917635828544 115.49209385274403 115.81591676053907 116.14064762031693 116.46628897784198 116.79284338601637 117.12031340490034 117.4487016017323 117.77801055094855 118.1082428342038 118.43940104039156 118.77148776566392 119.10450561345237 119.43845719448807 119.77334512682211 120.10917203584634 120.44594055431388 120.78365332235961 121.12231298752103 121.46192220475878 121.80248363647786 122.14399995254809 122.48647383032527 122.82990795467218 123.17430501797935 123.51966772018655 123.86599876880385 124.2133008789327 124.56157677328723 124.9108291822157 125.26106084372192 125.61227450348659 125.96447291488887 126.31765883902827 126.67183504474562 127.02700430864537 127.38316941511724 127.74033315635786 128.09849833239275 128.45766775109823 128.81784422822375 129.17903058741356 129.54122966022885 129.9044442861703 130.26867731270008 130.63393159526427 131.00020999731495 131.36751539033335 131.73585065385146 132.1052186754753 132.4756223509073 132.84706458396897 133.21954828662376 133.5930763789997 133.9676517894126 134.3432774543887 134.71995631868808 135.0976913353271 135.47648546560228 135.85634167911294 136.2372629537851 136.61925227589387 137.0023126400879 137.38644704941228 137.77165851533223 138.1579500577565 138.5453247050614 138.93378549411435 139.32333547029742 139.71397768753192 140.10571520830172 140.49855110367753 140.89248845334066 141.2875303456074 141.68367987745353 142.08094015453818 142.47931429122812 142.87880541062242 143.27941664457708 143.6811511337291 144.08401202752148 144.4880024842277 144.89312567097676 145.29938476377774 145.7067829475447 146.11532341612175 146.52500937230818 146.93584402788318 147.34783060363168 147.76097232936925 148.17527244396697 148.59073419537748 149.00736084066034 149.425155646007 149.84412188676714 150.26426284747424 150.6855818218708 151.10808211293462 151.53176703290453 151.9566399033063 152.3827040549788 152.80996282810023 153.23841957221413 153.66807764625565 154.0989404185779 154.5310112669781 154.96429357872486 155.39879075058366 155.83450618884436 156.27144330934723 156.70960553751047 157.14899630835643 157.58961906653877 158.0314772663694 158.47457437184565 158.9189138566775 159.3644992043146 159.81133390797362 160.2594214706658 160.70876540522437 161.1593692343318 161.61123649054784 162.06437071633695 162.51877546409628 162.974454296183 163.43141078494295 163.8896485127385 164.34917107197592 164.8099820651345 165.27208510479406 165.7354838136635 166.20018182460961 166.66618278068484 167.13349033515655 167.60210815153516 168.07203990360307 168.54328927544339 169.01585996146883 169.48975566645098 169.96498010554862 170.44153700433756 170.91943009883965 171.39866313555166 171.87923987147536 172.36116407414633 172.84443952166393 173.3290700027207 173.81505931663224 174.30241127336657 174.7911296935745 175.2812184086196 175.77268126060764 176.26552210241738 176.75974479773012 177.2553532210609 177.75235125778775 178.25074280418306 178.75053176744373 179.2517220657221 179.75431762815606 180.25832239490038 180.7637403171574 181.2705753572083 181.7788314884435 182.2885126953946 182.79962297376505 183.31216633046162 183.8261467836261 184.34156836266627 184.85843510828798 185.3767510725265 185.89652031877856 186.41774692183384 186.94043496790735 187.4645885546712 187.99021179128667 188.51730879843657 189.04588370835765 189.57594066487266 190.107483823423 190.64051735110152 191.1750454266848 191.7110722406662 192.24860199528842 192.78763890457714 193.32818719437287 193.87025110236505 194.41383487812527 194.95894278313986 195.50557909084395 196.05374808665488 196.60345406800522 197.15470134437754 197.707494237337 198.26183708056612 198.8177342198983 199.37519001335195 199.93420883116485 200.49479505582852 201.05695308212188 201.62068731714655 202.18600218036067 202.75290210361413 203.32139153118305 203.8914749198046 204.463156738712 205.03644146966957 205.6113336070078 206.1878376576584 206.76595814119057 207.34569958984486 207.92706654857014 208.51006357505847 209.0946952397809 209.68096612602358 210.26888082992338 210.85844396050425 211.44966013971296 212.0425340024556 212.63707019663403 213.233273383182 213.83114823610165 214.43069944250087 215.03193170262884 215.63484972991407 216.23945825100063 216.84576200578545 217.45376574745524 218.0634742425242 218.6748922708712 219.28802462577698 219.90287611396192 220.5194515556238 221.1377557844757 221.75779364778353 222.37957000640415 223.0030897348239 223.62835772119607 224.25537886737985 224.88415808897844 225.5147003153777 226.14701048978466 226.78109356926657 227.41695452478945 228.0545983412572 228.69403001755072 229.33525456656687 229.97827701525802 230.62310240467164 231.26973578998908 231.91818224056598 232.56844683997173 233.22053468602925 233.87445089085486 234.53020058089874 235.18778889698473 235.84722099435083 236.5085020426895 237.1716372261884 237.83663174357085 238.50349080813663 239.17221964780276 239.84282350514476 240.51530763743727 241.18967731669585 241.8659378297178 242.54409447812415 243.2241525784004 243.90611746193915 244.58999447508114 245.27578897915754 245.96350635053204 246.65315198064286 247.34473127604497 248.0382496584523 248.73371256478077 249.4311254471907 250.13049377312905 250.831823025373 251.53511870207248 252.2403863167937 252.94763139856178 253.6568594919047 254.36807615689625 255.0812869691998 255.79649752011247 256.51371341660814 257.2329402813819 257.95418375289455 258.6774494854154 259.4027431490684 260.1300704298747 260.8594370297992 261.59084866679365 262.32431107484285 263.05983000400795 263.79741122047267 264.53706050658855 265.27878366091994 266.02258649828946 266.76847484982346 267.51645456299826 268.2665315016851 269.01871154619727 269.7730005933353 270.5294045564336 271.2879293654064 272.048580966795 272.81136532381356 273.5762884163963 274.34335624124435 275.112574811873 275.8839501586579 276.65748832888363 277.43319538679 278.2110774136202 278.9911405076685 279.77339078432755 280.55783437613707 281.34447743283164 282.1333261213881 282.92438662607515 283.7176651485011 284.5131679076628 285.310901139994 286.11087109941457 286.91308405737965 287.71754630292827 288.52426414273344 289.3332439011511 290.1444919202694 290.9580145599587 291.7738181979222 292.59190922974483 293.4122940689435 294.234979147018 295.0599709135012 295.8872758360093 296.7169004002931 297.5488511102877 298.3831344881652 299.2197570743844 300.05872542774284 300.9000461254279 301.7437257630681 302.589770954786 303.43818833324764 304.2889845497177 305.14216627410957 305.9977401950374 306.85571301987005 307.71609147478233 308.57888230480876 309.44409227389536 310.3117281649539 311.1817967799137 312.0543049397762 312.9292594846684 313.8066672738949 314.68653518599365 315.5688701187883 316.4536789894435 317.3409687345188 318.23074631002237 319.12301869146626 320.0177928739205 320.9150758720686 321.81487472026214 322.7171964725761 323.62204820286394 324.52943700481296 325.4393699920007 326.3518542979497 327.26689707618374 328.1845055002843 329.1046867639462 330.02744808103495 330.95279668564194 331.88073983214247 332.81128479525165 333.74443887008215 334.6802093722009 335.6186036376864 336.55962902318737 337.5032929059783 338.4496026840188 339.39856577601165 340.3501896214602 341.3044816807274 342.261449435094 343.22110038681643 344.18344205918754 345.1484819965934 346.11622776457364 347.08668694988114 348.05986716054014 349.035776025907 350.01442119673004 350.99581034520844 351.97995116505376 352.9668513715488 353.95651870160964 354.9489609138453 355.94418578861934 356.9422011281091 357.9430147563688 358.94663451939033 359.9530682851643 360.96232394374175 361.97440940729695 362.9893326101884 364.0071015090213 365.0277240827101 366.0512083325411 367.07756228223457 368.1067939780088 369.13891148864167 370.1739229055354 371.21183634277907 372.2526599372127 373.29640184849023 374.34307025914455 375.39267337465117 376.4452194234927 377.50071665722265 378.55917335053124 379.6205978013096 380.6849983307144 381.75238328323405 382.82276102675394 383.8961399526212 384.97252847571133 386.0519350344942 387.1343680910996 388.21983613138366 389.30834766499646 390.39991122544694 391.494535370171 392.59222868059885 393.69299976222095 394.796857244657 395.9038097817225 397.01386605149725 398.1270347563929 399.2433246232216 400.36274440326383 401.4853028723379 402.6110088308677 403.7398711039524 404.87189854143577 406.0071000179748 407.1454844331095 408.287060711334 409.43183780216435 410.5798246802101 411.73103034524416 412.88546382227366 414.0431341616106 415.2040504389423 416.3682217554037 417.5356572376472 418.7063660379155 419.8803573341126 421.0576403298762 422.23822425464937 423.4221183637535 424.60933193846023 425.799874286065 426.9937547399591 428.1909826597033 429.39156743110146 430.5955184662737 431.80284520373044 433.01355710844604 434.22766367193367 435.4451744123189 436.6660988744152 437.89044662979774 439.11822727687934 440.34945044098566 441.5841257744296 442.8222629565879 444.0638716939778 445.308961720331 446.5575427966714 447.8096247113921 449.06521728033084 450.3243303468473 451.58697378190135 452.8531574841283 454.1228913799193 455.3961854234965 456.6730495969924 457.95349391052855 459.2375284022931 460.5251631386193 461.8164082140656 463.11127375149374 464.40976990214904 465.7119068457384 467.01769479051194 468.3271439733419 469.64026465980334 470.95706714425455 472.2775617499174 473.60175882895885 474.92966876257213 476.26130196105726 477.5966688639028 478.93577993986906 480.2786456870687 481.62527663304957 482.9756833348777 484.329876379219 485.6878663824232 487.0496639906063 488.41527987973484 489.78472475570936 491.1580093544477 492.5351444419697 493.9161408144817 495.30100929846105 496.689760750741 498.0824060585959 499.47895613982575 500.8794219428431 502.28381444675813 503.69214466146485 505.1044236277269 506.52066241726544 507.9408721328446 509.36506390835916 510.7932489089215 512.2254383309495 513.6616434022543 515.1018753821286 516.5461455614329 517.9944652626872 519.4468458401576 520.9032986799461 522.363835200079 523.8284668505978 525.2972051136486 526.770061503571 528.2470475669891 529.7281748829021 531.2134550627753 532.7028997506313 534.1965206231389 535.6943293897091 537.1963377925831 538.7025576069253 540.2130006409161 541.7276787358455 543.2466037662027 544.7697876397733 546.2972422977293 547.828979714724 549.3650118989859 550.9053508924134 552.4500087706683 553.9989976432714 555.5523296536958 557.1100169794631 558.67207183224 560.2385064579324 561.8093331367805 563.3845641834594 564.9642119471699 566.54828881174 568.1368071957193 569.7297795524775 571.3272183703012 572.929136172493 574.5355455174692 576.1464589988572 577.7618892455956 579.3818489220322 581.0063507280242 582.6354073990381 584.2690317062466 585.9072364566338 587.5500344930905 589.1974386945177 590.8494619759274 592.5061172885423 594.1674176199 595.8333759939517 597.5040054711668 599.1793191486345 600.8593301601647 602.5440516763953 604.2334969048909 605.927679090248 607.6266115142 609.3303074957197 611.0387803911243 612.7520435941806 614.4701105362091 616.1929946861893 617.9207095508675 619.6532686748599 621.3906856407593 623.132974069243 624.8801476191777 626.6322199877284 628.3892049104649 630.1511161614686 631.9179675534425 633.6897729378182 635.4665462048637 637.248301283795 639.035052142882 640.8268127895609 642.6235972705416 644.425419671919 646.2322941192846 648.0442347778338 649.8612558524812 651.683371587969 653.510596268979 655.3429442202466 657.1804298066711 659.0230674334283 660.8708715460835 662.7238566307075 664.5820372139859 666.4454278633357 668.3140431870181 670.1878978342551 672.067006495342 673.9513839017637 675.8410448263103 677.7360040831921 679.6362765281566 681.5418770586045 683.4528206137071 685.3691221745227 687.2907967641139 689.2178594476659 691.150325332605 693.0882095687164 695.0315273482627 696.9802939061026 698.9345245198126 700.8942345098052 702.8594392394482 704.8301541151864 706.8063945866619 708.7881761468354 710.7755143321076 712.7684247224413 714.7669229414836 716.7710246566857 718.7807455794315 720.7961014651545 722.8171081134661 724.843781368276 726.8761371179183 728.9141912952758 730.9579598779051 733.0074588881613 735.0627043933235 737.1237125057212 739.1904993828613 741.2630812275531 743.3414742880366 745.4256948581091 747.5157592772539 749.6116839307671 751.7134852498872 753.8211797119232 755.9347838403846 758.0543142051102 760.1797874223978 762.3112201551356 764.4486291129311 766.5920310522441 768.7414427765165 770.8968811363039 773.0583630294111 775.2259054010183 777.3995252438195 779.5792395981537 781.765065552138 783.9570202418024 786.1551208512234 788.3593846126597 790.5698288066865 792.7864707623309 795.0093278572086 797.2384175176593 799.4737572188831 801.7153644850787 803.9632568895797 806.2174520549937 808.4779676533383 810.7448214061807 813.0180310847782 815.2976145102144 817.5835895535421 819.8759741359219 822.1747862287616 824.480043853858 826.7917650835394 829.109968040806 831.4346708994727 833.7658918843098 836.1036492711884 838.447961387222 840.7988466109101 843.1563233722843 845.5204101530497 847.8911254867327 850.268487958824 852.6525162069256 855.043228920897 857.4406448430004 859.8447827680498 862.2556615435561 864.6733000698766 867.0977173003621 869.5289322415053 871.9669639530903 874.4118315483431 876.8635541940805 879.322151110859 881.7876415731274 884.2600449093766 886.7393805022928 889.2256677889077 891.7189262607517 894.2191754640077 896.7264349996603 899.2407245236565 901.7620637470516 904.2904724361706 906.8259704127589 909.3685775541408 911.9183137933724 914.4751991193983 917.0392535772118 919.6104972680068 922.18895034934 924.7746330352851 927.3675655965947 929.9677683608575 932.5752617126558 935.1900660937296 937.8122020031334 940.4416899973988 943.0785506906938 945.7228047549867 948.3744729202062 951.0335759744047 953.7001347639222 956.3741701935471 959.0557032266831 961.7447548855114 964.4413462511574 967.1454984638538 969.8572327231082 972.5765702878673 975.3035324766865 978.038140667894 980.78041629976 983.5303808706647 986.2880559392662 989.0534631246705 991.8266241066004 994.6075606255647 997.3962944830304 1000.1928475415913 1002.997241725142 1005.8094990190481 1008.6296414703187 1011.4576911877793 1014.2936703422463 1017.1376011666987 1019.9895059564535 1022.8494070693422 1025.7173269258824 1028.593288009456 1031.4773128664845 1034.3694241066091 1037.2696444028618 1040.1779964918474 1043.0945031739234 1046.0191873133717 1048.9520718385857 1051.8931797422445 1054.8425340814974 1057.8001579781408 1060.766074618801 1063.7403072551176 1066.7228792039236 1069.7138138474302 1072.713134633408 1075.7208650753705 1078.7370287527624 1081.7616493111384 1084.7947504623544 1087.8363559847496 1090.8864897233352 1093.9451755899797 1097.012437563597 1100.0882996903342 1103.1727860837598 1106.265920925055 1109.3677284632 1112.4782330151652 1115.5974589661037 1118.72543076954 1121.8621729475624 1125.007710091017 1128.162066859697 1131.3252679825403 1134.4973382578196 1137.67830255334 1140.8681858066293 1144.0670130251392 1147.274809286437 1150.4915997384037 1153.7174095994335 1156.9522641586254 1160.19618877599 1163.4492088826412 1166.711349980997 1169.9826376449819 1173.2630975202271 1176.5527553242666 1179.851636846747 1183.159767949622 1186.477174567361 1189.803882707147 1193.1399184490854 1196.4853079464058 1199.8400774256686 1203.204253186967 1206.5778616041396 1209.9609291249694 1213.3534822713975 1216.7555476397283 1220.1671519008369 1223.5883218003826 1227.0190841590133 1230.4594658725784 1233.9094939123402 1237.3691953251844 1240.8385972338292 1244.3177268370462 1247.806611409865 1251.3052783037892 1254.8137549470152 1258.332068844643 1261.860247578891 1265.3983188093162 1268.9463102730283 1272.5042497849086 1276.0721652378256 1279.6500846028562 1283.2380359295046 1286.8360473459204 1290.4441470591216 1294.062363355214 1297.6907245996133 1301.3292592372682 1304.9779957928836 1308.6369628711413 1312.3061891569278 1315.985703415559 1319.675534493001 1323.3757113161043 1327.0862628928226 1330.8072183124439 1334.5386067458198 1338.2804574455934 1342.0327997464256 1345.795663065229 1349.5690769013959 1353.3530708370308 1357.1476745371817 1360.9529177500744 1364.7688303073437 1368.5954421242673 1372.4327832000029 1376.2808836178187 1380.1397735453336 1384.009483234751 1387.8900430230988 1391.7814833324644 1395.6838346702334 1399.597127629332 1403.5213928884618 1407.4566612123456 1411.402963451964 1415.3603305448 1419.3287935150804 1423.30838347402 1427.2991316200666 1431.3010692391372 1435.314227704878 1439.3386384788973 1443.3743331110186 1447.421343239528 1451.4797005914186 1455.5494369826426 1459.630584318357 1463.7231745931795 1467.827239891434 1471.9428123874047 1476.0699243455883 1480.2086081209457 1484.358896159157 1488.5208209968748 1492.6944152619792 1496.8797116738351 1501.0767430435467 1505.2855422742173 1509.5061423612026 1513.7385763923764 1517.9828775483838 1522.239079102904 1526.5072144229102 1530.7873169689335 1535.0794202953196 1539.3835580505 1543.6997639772487 1548.0280719129503 1552.3685157898653 1556.721129635394 1561.0859475723455 1565.4630038192042 1569.852332690397 1574.2539685965653 1578.6679460448295 1583.0942996390663 1587.5330640801772 1591.9842741663558 1596.4479647933679 1600.9241709548232 1605.4129277424438 1609.914270346347 1614.4282340553175 1618.954854257085 1623.4941664386008 1628.046206186315 1632.6110091864593 1637.1886112253233 1641.7790481895356 1646.3823560663461 1650.998570943908 1655.627729011561 1660.269866560112 1664.9250199821258 1669.5932257722009 1674.2745205272677 1678.9689409468642 1683.6765238334306 1688.397306092596 1693.1313247334679 1697.87861686892 1702.6392197158866 1707.4131705956536 1712.2005069341462 1717.0012662622305 1721.8154862160025 1726.6432045370846 1731.4844590729206 1736.3392877770732 1741.2077287095196 1746.0898200369559 1750.9856000330892 1755.8951070789394 1760.8183796631415 1765.7554563822503 1770.7063759410364 1775.6711771527937 1780.6498989396432 1785.6425803328375 1790.649260473067 1795.669978610768 1800.7047741064275 1805.7536864308945 1810.8167551656884 1815.8940200033098 1820.98552074755 1826.091297313806 1831.2113897293902 1836.3458381338476 1841.494682779266 1846.6579640305958 1851.8357223659652 1857.027998376996 1862.234832769123 1867.4562663619147 1872.6923400893893 1877.9430950003407 1883.2085722586542 1888.488813143636 1893.7838590503316 1899.0937514898524 1904.4185320897002 1909.7582425940957 1915.1129248643033 1920.48262087896 1925.8673727344062 1931.2672226450122 1936.6822129435136 1942.1123860813389 1947.557784628944 1953.018451276148 1958.4944288324652 1963.9857602274396 1969.4924885109876 1975.0146568537257 1980.5523085473183 1986.1054870048138 1991.6742357609814 1997.2585984726568 2002.8586189190848 2008.474341002258 2014.1058087472647 2019.7530663026355 2025.4161579406841 2031.0951280578568 2036.790021175084 2042.5008819381235 2048.2277551179145 2053.9706856109283 2059.7297184395165 2065.5048987522687 2071.2962718243652 2077.10388305793 2082.927777982389 2088.768002254826 2094.62460166034 2100.497622112403 2106.387109653224 2112.2931104541053 2118.2156708158113 2124.1548371689237 2130.110656074209 2136.08317422298 2142.072438437472 2148.0784956711996 2154.101393009326 2160.141177669036 2166.197896999907 2172.2715984842735 2178.3623297376075 2184.4701385088824 2190.595072680959 2196.7371802709526 2202.8965094306072 2209.0731084466843 2215.267025741327 2221.478309872454 2227.707009534127 2233.9531735569444 2240.216850908413 2246.498090693343 2252.7969421542234 2259.113454671611 2265.4476777645227 2271.799661090817 2278.1694544475836 2284.5571077715394 2290.9626711394167 2297.386194768352 2303.8277290162882 2310.2873243823597 2316.765031507295 2323.260901173812 2329.7749843070155 2336.307331974802 2342.8579953882436 2349.4270259020104 2356.0144750147606 2362.620394369546 2369.2448357542207 2375.8878511018397 2382.5494924910736 2389.229812146615 2395.928862439586 2402.6466958879478 2409.3833651569153 2416.138923059372 2422.913422556278 2429.7069167570858 2436.519458920164 2443.3511024532077 2450.2019009136575 2457.071908009127 2463.9611775978096 2470.8697636889137 2477.7977204430854 2484.745102172822 2491.7119633429115 2498.6983585708495 2505.7043426272726 2512.729970436385 2519.7752970763886 2526.840377779921 2533.9252679344804 2541.0300230828643 2548.154698923603 2555.2993513114034 2562.464036257574 2569.6488099304725 2576.8537286559476 2584.0788489177717 2591.3242273580936 2598.5899207778775 2605.875986137348 2613.18248055644 2620.509461315242 2627.856985854449 2635.225111775813 2642.613896842587 2650.023398979991 2657.4536762756543 2664.9047869800756 2672.3767895070823 2679.869742434282 2687.3837045035248 2694.9187346213707 2702.4748918595383 2710.052235455376 2717.6508248123273 2725.270719500395 2732.911979256605 2740.5746639854788 2748.2588337594957 2755.9645488195774 2763.691869575548 2771.440856606614 2779.2115706618342 2787.004072660602 2794.818423693118 2802.6546850208742 2810.5129180771223 2818.3931844673725 2826.295545969864 2834.220064536054 2842.1668022911017 2850.135821534359 2858.1271847398516 2866.1409545567767 2874.177193809989 2882.235965500495 2890.3173328059465 2898.421359081141 2906.5481078585035 2914.6976428486055 2922.870027940646 2931.065327202962 2939.2836048835306 2947.5249254104688 2955.7893533925417 2964.0769536196685 2972.387791063426 2980.721930877568 2989.0794383985253 2997.4603791459226 3005.864818823096 3014.292823317596 3022.7444587017208 3031.219791233022 3039.7188873548275 3048.2418136967613 3056.788637075271 3065.359424494145 3073.954243145041 3082.5731604080124 3091.2162438520363 3099.883561235543 3108.5751805069476 3117.291169805183 3126.031597460233 3134.7965319936707 3143.58604211919 3152.4001967431504 3161.239064965114 3170.1027160783874 3178.9912195705706 3187.904645124089 3196.8430626167533 3205.806542122294 3214.7951539109254 3223.808968449886 3232.848056403997 3241.912488636209 3251.0023362081643 3260.117670380751 3269.258562614663 3278.4250845709594 3287.6173081116276 3296.8353053001415 3306.079148402034 3315.348909885458 3324.64466242176 3333.9664788860414 3343.314432357736 3352.6885961211856 3362.089043666206 3371.5158486886708 3380.969085091084 3390.44882698316 3399.9551486824093 3409.4881247147155 3419.0478298149255 3428.6343389274266 3438.2477272067417 3447.8880700181153 3457.555442938107 3467.24992175518 3476.971582470297 3486.72050129752 3496.496754664598 3506.3004192135777 3516.1315718013943 3525.9902895004807 3535.876649599374 3545.7907296033077 3555.732607234836 3565.702360434434 3575.700067361107 3585.72580639301 3595.779656128063 3605.8616953845535 3615.9720032017713 3626.1106588406183 3636.2777417842303 3646.473331738607 3656.6975086332295 3666.950352621687 3677.2319440823126 3687.542363618804 3697.881692060861 3708.2500104648216 3718.647400114288 3729.073942520775 3739.5297194243394 3750.0148127942307 3760.5293048295225 3771.0732779597624 3781.646814845622 3792.2499983795406 3802.882911686374 3813.545638124051 3824.2382612842225 3834.960864992917 3845.7135333111987 3856.496350535827 3867.309401199917 3878.152770073603 3889.026542164703 3899.930802719383 3910.8656372228284 3921.8311313999093 3932.827371215862 3943.854442876949 3954.9124328311464 3966.001427768817 3977.121514623394 3988.2727805720547 3999.4553130364106 4010.66919968319 4021.9145284249266 4033.1913874206466 4044.4998650765597 4055.8400500467615 4067.2120312339102 4078.615897789941 4090.0517391167546 4101.519644866924 4113.019704944393 4124.552009505185 4136.1166489581055 4147.713713965455 4159.343295443735 4171.0054845643635 4182.700372754399 4194.428051697235 4206.1886133333355 4217.98214986096 4229.808753736866 4241.668517677058 4253.561534657497 4265.487897914835 4277.447700947141 4289.44103751465 4301.468001640473 4313.528687611365 4325.623189978435 4337.751603557903 4349.914023431835 4362.110544948903 4374.341263725114 4386.606275644572 4398.9056768602295 4411.239563794634 4423.608033140682 4436.011181862393 4448.449107195653 4460.921906648981 4473.429678004307 4485.972519317711 4498.550528920226 4511.163805418573 4523.812447695967 4536.496554912866 4549.216226507765 4561.971562197969 4574.762661980377 4587.5896261322605 4600.452555212054 4613.35155006015 4626.286711799668 4639.258141837285 4652.2659418639905 4665.310213855898 4678.3910600750605 4691.508583070249 4704.662885677772 4717.854071022268 4731.082242517532 4744.347503867308 4757.649959066115 4770.989712400055 4784.366868447634 4797.781532080579 4811.233808464663 4824.723803060533 4838.2516216245185 4851.817370209497 4865.421155165681 4879.063083141484 4892.743261084339 4906.461796241551 4920.218796161127 4934.014368692631 4947.848621988012 4961.721664502462 4975.633604995265 4989.584552530659 5003.574616478672 5017.603906515994 5031.672532626831 5045.780605103768 5059.928234548637 5074.115531873383 5088.342608300921 5102.6095753660275 5116.916544916215 5131.263629112576 5145.650940430707 5160.078591661562 5174.546695912347 5189.055366607397 5203.604717489087 5218.194862618691 5232.8259163773055 5247.497993466735 5262.21120891038 5276.96567805416 5291.761516567408 5306.598840443774 5321.477766002141 5336.398409887517 5351.360889071992 5366.365320855602 5381.411822867294 5396.500513065824 5411.631509740684 5426.804931513036 5442.020897336635 5457.279526498765 5472.580938621181 5487.92525366103 5503.312591911805 5518.743074004288 5534.216820907487 5549.733953929595 5565.294594718928 5580.898865264893 5596.546887898931 5612.238785295491 5627.974680472969 5643.754696794706 5659.5789579699185 5675.447588054695 5691.360711452955 5707.318452917434 5723.320937550645 5739.368290805884 5755.460638488189 5771.598106755335 5787.780822118838 5804.008911444924 5820.282501955534 5836.6017212293245 5852.96669720266 5869.377558170623 5885.8344327880095 5902.3374500703485 5918.88673939492 5935.482430501744 5952.1246534946185 5968.813538842137 5985.549217378703 6002.331820305559 6019.161479191824 6036.038325975507 6052.962492964565 6069.93411283792 6086.9533186465005 6104.020243814296 6121.1350221394005 6138.297787795051 6155.508675330697 6172.767819673035 6190.075356127078 6207.431420377218 6224.836148488286 6242.289676906619 6259.792142461123 6277.343682364355 6294.944434213602 6312.5945359919515 6330.294126069369 6348.043343203796 6365.842326542226 6383.691215621802 6401.590150370915 6419.539271110285 6437.538718554073 6455.588633810987 6473.689158385381 6491.840434178356 6510.0426034889015 6528.295809014979 6546.6001938546615 6564.9559015072455 6583.363075874375 6601.8218612611745 6620.33240237739 6638.894844338494 6657.509332666849 6676.176013292847 6694.895032556041 6713.6665372063 6732.490674404961 6751.367591725978 6770.2974371570745 6789.280359100919 6808.316506376276 6827.406028219176 6846.549074284085 6865.745794645072 6884.996339797004 6904.30086065671 6923.659508564162 6943.072435283672 6962.5397930050785 6982.061734344933 7001.6384123476955 7021.2699804869535 7040.956592666612 7060.69840322209 7080.495566921541 7100.3482389670735 7120.256574995957 7140.220731081844 7160.240863735994 7180.317129908501 7200.449686989531 7220.638692810538 7240.884305645517 7261.186684212238 7281.545987673499 7301.962375638361 7322.436008163409 7342.967045754 7363.555649365525 7384.201980404679 7404.9062007306975 7425.668472656669 7446.48895895077 7467.367822837556 7488.305227999243 7509.30133857699 7530.3563191721805 7551.470334847718 7572.643551129314 7593.876134006792 7615.168249935395 7636.520065837067 7657.931749101792 7679.403467588876 7700.935389628291 7722.527684021976 7744.180520045161 7765.894067447705 7787.668496455423 7809.503977771416 7831.400682577403 7853.358782535088 7875.378449787473 7897.45985696023 7919.603177163052 7941.8085839910045 7964.076251525881 7986.406354337586 8008.799067485481 8031.2545665197795 8053.773027482905 8076.35462691088 8098.999541834712 8121.7079497817695 8144.480028777185 8167.315957345251 8190.215914510809 8213.180079800673 8236.208633245005 8259.301755378752 8282.459627243066 8305.682430386705 8328.97034686746 8352.32355925358 8375.742250625224 8399.226604575875 8422.776805213774 8446.39303716339 8470.075485566833 8493.824336085363 8517.639774900756 8541.521988716842 8565.471164760947 8589.487490785343 8613.571155068736 8637.722346417731 8661.941254168336 8686.228068187407 8710.582978874178 8735.006177161724 8759.497854518471 8784.058202949695 8808.687414999027 8833.385683749955 8858.153202827356 8882.990166399006 8907.89676917708 8932.873206419712 8957.919673932507 8983.036368070083 9008.223485737602 9033.48122439233 9058.809782045157 9084.209357262174 9109.68014916624 9135.222357438493 9160.83618231998 9186.521824613172 9212.279485683572 9238.109367461268 9264.011672442542 9289.98660369146 9316.034364841416 9342.155160096785 9368.3491942345 9394.616672605656 9420.957801137121 9447.37278633315 9473.861835277012 9500.4251556326 9527.062955646074 9553.775444147474 9580.562830552373 9607.425324863525 9634.36313767249 9661.376480161309 9688.465564104126 9715.630601868876 9742.871806418956 9770.18939131487 9797.58357071591 9825.054559381846 9852.602572674603 9880.227826559947 9907.930537609192 9935.710923000863 9963.56920052244 9991.505588572038 10019.520306160137 10047.61357291127 10075.785609065802 10104.036635481578 10132.366873635718 10160.77654562635 10189.265874174285 10217.835082624859 10246.484394949606 10275.214035748051 10304.02423024947 10332.915204314626 10361.887184437588 10390.940397747478 10420.075072010231 10449.29143563044 10478.589717653093 10507.97014776538 10537.43295629851 10566.97837422949 10596.606633182986 10626.317965433082 10656.112603905123 10685.990782177549 10715.952734483722 10745.998695713759 10776.128901416365 10806.3435878007 10836.642991738217 10867.027350764529 10897.496903081234 10928.051887557856 10958.692543733647 10989.419111819494 11020.23183269981 11051.130947934409 11082.116699760392 11113.189331094074 11144.34908553285 11175.59620735715 11206.93094153232 11238.353533710557 11269.86423023283 11301.463278130794 11333.150925128773 11364.927419645666 11396.793010796877 11428.747948396333 11460.792482958372 11492.926865699748 11525.151348541596 11557.46618411139 11589.87162574494 11622.367927488373 11654.955344100124 11687.634131052937 11720.404544535857 11753.266841456236 11786.221279441796 11819.268116842544 11852.40761273293 11885.640026913768 11918.96561991434 11952.384652994398 11985.897388146232 12019.504088096717 12053.205016309383 12087.000436986476 12120.890615071014 12154.875816248874 12188.956306950895 12223.132354354939 12257.404226387998 12291.772191728285 12326.236519807353 12360.797480812207 12395.455345687413 12430.210386137214 12465.062874627687 12500.013084388856 12535.06128941685 12570.207764476028 12605.452785101168 12640.796627599599 12676.239569053365 12711.781887321411 12747.423861041776 12783.165769633737 12819.007893300022 12854.950513029034 12890.993910596992 12927.1383685702 12963.384170307221 12999.731599961113 13036.180942481667 13072.732483617634 13109.386509918946 13146.143308738998 13183.003168236863 13219.966377379586 13257.033225944426 13294.204004521134 13331.47900451424 13368.858518145322 13406.342838455306 13443.932259306757 13481.627075386199 13519.427582206408 13557.334076108727 13595.346854265405 13633.466214681926 13671.692456199313 13710.025878496523 13748.466782092759 13787.015468349828 13825.672239474517 13864.43739852095 13903.31124939299 13942.294096846595 13981.38624649219 14020.58800479711 14059.899679087981 14099.32157755312 14138.854009244955 14178.497284082458 14218.251712853578 14258.117607217644 14298.095279707852 14338.185043733687 14378.387213583392 14418.702104426424 14459.130032315934 14499.671314191228 14540.326267880266 14581.095212102171 14621.978466469702 14662.976351491736 14704.089188575843 14745.31730003076 14786.661009068928 14828.120639809036 14869.69651727855 14911.388967416255 14953.198317074834 14995.124894023433 15037.169026950174 15079.331045464807 15121.61128010124 15164.010062320154 15206.527724511605 15249.16459999761 15291.921023034782 15334.797328816943 15377.793853477724 15420.910934093265 15464.148908684783 15507.50811622128 15550.98889662217 15594.59159075995 15638.316540462863 15682.164088517615 15726.134578672025 15770.228355637704 15814.445765092809 15858.787153684734 15903.252869032805 15947.84325973103 15992.558675350827 16037.399466443749 16082.36598454425 16127.458582172447 16172.677612836847 16218.023431037162 16263.496392267074 16309.096853017 16354.8251707769 16400.681704039107 16446.666812301115 16492.780856068344 16539.024196857114 16585.397197197275 16631.90022063524 16678.533631736693 16725.297796089555 16772.1930803068 16819.219852029277 16866.378479928706 16913.669333710503 16961.092784116623 17008.64920292861 17056.338962970367 17104.162438111183 17152.12000326859 17200.21203441135 17248.43890856237 17296.801003801695 17345.298699269442 17393.93237516878 17442.70241276891 17491.609194408087 17540.653103496534 17589.834524519538 17639.15384304039 17688.611445703493 17738.2077202373 17787.943055457417 17837.817841269636 17887.832468672987 17937.987329762804 17988.28281773379 18038.71932688313 18089.297252613527 18140.01699143633 18190.87894097468 18241.883499966614 18293.031068268134 18344.322046856374 18395.75683783277 18447.335844426172 18499.059470996053 18550.928123035646 18602.942207175103 18655.102131184736 18707.40830397814 18759.86113561549 18812.461037306708 18865.208421414656 18918.10370145843 18971.14729211657 19024.339609230276 19077.681069806746 19131.17209202242 19184.813095226207 19238.604499942798 19292.546727876022 19346.64020191207 19400.885346122865 19455.282585769335 19509.832347304797 19564.535058378282 19619.3911478379 19674.401045734136 19729.565183323324 19784.883993070966 19840.357908655118 19895.98736496984 19951.7727981285 20007.71464546736 20063.813345548846 20120.069338165074 20176.48306434126 20233.05496633917 20289.785487660654 20346.675073051065 20403.724168502722 20460.93322125846 20518.30267981514 20575.832993927113 20633.52461460977 20691.37799414313 20749.393586075294 20807.571845226033 20865.91322769042 20924.418190842327 20983.087193338 21041.92069511976 21100.919157419474 21160.083042762275 21219.41281497014 21278.90893916553 21338.571881775024 21398.40211053303 21458.400094485387 21518.566303993073 21578.90121073591 21639.4052877162 21700.07900926254 21760.922851033403 21821.937290020993 21883.122804554878 21944.479874305835 22006.00898028956 22067.710604870445 22129.58523176535 22191.63334604741 22253.85543414983 22316.25198386972 22378.82348437189 22441.570426192702 22504.49330124391 22567.592602816487 22630.86882558457 22694.322465609268 22757.95402034256 22821.76398863121 22885.7528707207 22949.921168259094 23014.269384301042 23078.798023311654 23143.5075911705 23208.398595175524 23273.47154404715 23338.726947932104 23404.16531840751 23469.78716848485 23535.59301261406 23601.583366687497 23667.758748044023 23734.11967547302 23800.666669218463 23867.40025098306 23934.320943932275 24001.429272698453 24068.725763384937 24136.210943570157 24203.885342311834 24271.749490151058 24339.80391911651 24408.0491627286 24476.485756003618 24545.114235457975 24613.935139112404 24682.949006496165 24752.15637865128 24821.557798136786 24891.15380903293 24960.944956945557 25030.931789010236 25101.114853896677 25171.494701812946 25242.071884509805 25312.8469552851 25383.820468987986 25454.992982023334 25526.36505235615 25597.937239515843 25669.71010460067 25741.6842102821 25813.86012080931 25886.238402013518 25958.819621312425 26031.604347714732 26104.593151824527 26177.78660584579 26251.185283586892 26324.789760465083 26398.600613510982 26472.618421373103 26546.843764322453 26621.277224256988 26695.919384706245 26770.770830835885 26845.832149452275 26921.103929007153 26996.586759602116 27072.281232993377 27148.1879425963 27224.307483490138 27300.64045242265 27377.187447814747 27453.94906976529 27530.925920055706 27608.118602154707 27685.527721223065 27763.153884118317 27840.99769939956 27919.059777332175 27997.340729892676 28075.84117077343 28154.56171538754 28233.50298087361 28312.665586100633 28392.0501516728 28471.657299934395 28551.487654974666 28631.54184263272 28711.820490502414 28792.324227937286 28873.053686055493 28954.009497744766 29035.192297667323 29116.602722264943 29198.241409763847 29280.109000179757 29362.206135322907 29444.53345880309 29527.09161603466 29609.88125424164 29692.903022462768 29776.15757155657 29859.645554206538 29943.367624926133 30027.324440064 30111.516657809098 30195.944938195822 30280.609943109266 30365.51233629029 30450.65278334083 30536.03195172904 30621.650510794578 30707.509131753803 30793.6084877051 30879.949253634113 30966.532106419036 31053.357724835954 31140.42678956413 31227.73998319134 31315.29799021924 31403.101497068747 31491.15119208535 31579.44776554463 31667.991909657576 31756.784318575985 31845.825688398 31935.116717173525 32024.65810490969 32114.450553576324 32204.494767111486 32294.791451426972 32385.34131441387 32476.14506594807 32567.20341789585 32658.517084119474 32750.086780482747 32841.913224856646 32933.99713712501 33026.33923919005 33118.940254978166 33211.80091044549 33304.92193358361 33398.30405442534 33491.94800505036 33585.85451959108 33680.02433423814 33774.458187246535 33869.156818941105 33964.120971722485 34059.351390072945 34154.848820562096 34250.61401185283 34346.64771470722 34442.95068199233 34539.52366868615 34636.367431883606 34733.48273080225 34830.870326788514 34928.53098332341 35026.4654660288 35124.674542673085 35223.15898317745 35321.91955962177 35420.95704625078 35520.27221948007 35619.86585790221 35719.73874229275 35819.89165561646 35920.32538303349 36021.040711905356 36122.038431801295 36223.31933450437 36324.88421401764 36426.73386657051 36528.869090624816 36631.290686881206 36733.99945828543 36836.996210034464 36940.281749582944 37043.85688664964 37147.72243322354 37251.87920357034 37356.32801423879 37461.069684067195 37566.10503418976 37671.434888042924 37777.06007137204 37882.98141223767 37989.19974102213 38095.71589043604 38202.53069552484 38309.64499367523 38417.05962462189 38524.775430453985 38632.79325562173 38741.113946943085 38849.73835361041 38958.667327197014 39067.901721663875 39177.44239336639 39287.29020106109 39397.44600591226 39507.91067149881 39618.68506382099 39729.77005130717 39841.16650482067 39952.87529766659 40064.89730559867 40177.233406826104 40289.88448202046 40402.85141432258 40516.13508934957 40629.73639520154 40743.6562224688 40857.89546423877 40972.45501610288 41087.335776163716 41202.53864504192 41318.0645258835 41433.914324366604 41550.088948708915 41666.589309674484 41783.41632058108 41900.570897307254 42018.05395829962 42135.86642457995 42254.00921975231 42372.483270010554 42491.28950414538 42610.428853551755 42729.90225223603 42849.71063682347 42969.85494656547 43090.33612334691 43211.15511169357 43332.312858779645 43453.810314434966 43575.64843115258 43697.82816409623 43820.35047110771 43943.216312714554 44066.426652137416 44189.982455297664 44313.88469082499 44438.134330065004 44562.73234708684 44687.67971869069 44812.977424415665 44938.62644654729 45064.627770125255 45190.982382951224 45317.691275596495 45444.75544140974 45572.17587652487 45699.95357986879 45828.08955316927 45956.58480096279 46085.44033060237 46214.65715226551 46344.23627896206 46474.17872654232 46604.485513704785 46735.157662004254 46866.19619585981 46997.60214256288 47129.376532285234 47261.520398087094 47394.03477592526 47526.92070466121 47660.17922606921 47793.81138484449 47927.81822861151 48062.20080793206 48196.96017631356 48332.097390217365 48467.613509066956 48603.50959525622 48739.786714157985 48876.445934132076 49013.488326533945 49150.914965722906 49288.72692907066 49426.92529696967 49565.5111528417 49704.485583146205 49843.84967738901 49983.604528130665 50123.75123099515 50264.29088467839 50405.22459095692 50546.55345469647 50688.27858386062 50830.401089519575 50972.9220858588 51115.84269018777 51259.16402294875 51402.887207725544 51547.01337125228 51691.543643422374 51836.47915729722 51981.82104911514 52127.5704583004 52273.72852747194 52420.29640245249 52567.27523227755 52714.66616920421 52862.470368720424 53010.68898955391 53159.32319368136 53308.374146337446 53457.84301602392 53607.73097451892 53758.03919688605 53908.768861483644 54059.92114997397 54211.497247332445 54363.49834185706 54515.92562517759 54668.780292264935 54822.0635414406 54975.77657438594 55129.92059615169 55284.49681516734 55439.50644325063 55594.95069561709 55750.83079088956 55907.14795110762 56063.90340173735 56221.09837168084 56378.73409328582 56536.811802355405 56695.33273815768 56854.29814343542 57013.70926441596 57173.567350820755 57333.87365587542 57494.62943631935 57655.835952415626 57817.49446796105 57979.606250295816 58142.172570313545 58305.194702471344 58468.67392479962 58632.61151891224 58797.008770016546 58961.8669669234 59127.187402057236 59292.97137146637 59459.22017483293 59625.93511548326 59793.11750039797 59960.768640222326 60128.88984927636 60297.4824455653 60466.54775078992 60636.08709035676 60806.10179338875 60976.5931927353 61147.56262498307 61319.011430466206 61490.940953277095 61663.35254127665 61836.24754610499 62009.62732319214 62183.49323176843 62357.84663487531 62532.68889937601 62708.02139596631 62883.84549918509 63060.16258742529 63236.97404294473 63414.281251876775 63592.08560424134 63770.388493955776 63949.19131884581 64128.49548065637 64308.30238506271 64488.61344168142 64669.43006408142 64850.75366979509 65032.58568032931 65214.92752117673 65397.78062182687 65581.14641577729 65765.02634054486 65949.42183767704 66134.3343527632 66319.76533544596 66505.71623943246 66692.18852250582 66879.18364653668 67066.70307749443 67254.74828545879 67443.32074463158 67632.42193334784 67822.05333408773 68012.21643348811 68202.91272235407 68394.14369567076 68585.91085261504 68778.21569656726 68971.05973512295 69164.44448010481 69358.37144757445 69552.8421578442 69747.85813548922 69943.42090935932 70139.53201259107 70336.19298261956 70533.40536119077 70731.17069437337 70929.49053257116 71128.36643053495 71327.7999473748 71527.7926465723 71728.3460959929 71929.461867898 72131.14153895751 72333.38669026208 72536.19890733525 72739.57978014654 72943.53090312329 73148.05387516333 73353.15029964762 73558.82178445293 73765.06994196394 73971.89638908656 74179.30274726005 74387.29064247 74595.86170526122 74805.01757074994 75014.75987863734 75225.0902732219 75436.01040341258 75647.5219227417 75859.6264893776 76072.3257661381 76285.62142050327 76499.51512462845 76714.00855535766 76929.10339423628 77144.80132752476 77361.10404621135 77578.01324602569 77795.53062745203 78013.65789574246 78232.3967609304 78451.74893784393 78671.7161461193 78892.30011021426 79113.50255942171 79335.32522788335 79557.76985460313 79780.83818346084 80004.53196322588 80228.8529475709 80453.80289508562 80679.38356929069 80905.59673865128 81132.44417659112 81359.9276615064 81588.04897677964 81816.80991079361 82046.21225694561 82276.25781366132 82506.94838440885 82738.28577771306 82970.27180716967 83202.90829145923 83436.19705436191 83670.1399247713 83904.73873670911 84139.99532933916 84375.91154698217 84612.48923913 84849.73026046024 85087.63647085073 85326.20973539412 85565.4519244125 85805.36491347212 86045.95058339792 86287.21082028851 86529.14751553092 86771.76256581512 87015.05787314929 87259.03534487441 87503.69689367966 87749.04443761679 87995.07990011566 88241.80520999919 88489.22230149829 88737.3331142673 88986.13959339891 89235.64368943973 89485.84735840534 89736.75256179574 89988.3612666106 90240.6754453648 90493.69707610404 90747.42814241986 91001.87063346578 91257.02654397246 91512.89787426352 91769.48663027119 92026.79482355205 92284.82447130287 92543.57759637611 92803.05622729627 93063.26239827539 93324.19814922924 93585.86552579324 93848.26657933826 94111.4033669871 94375.27795163034 94639.89240194269 94905.248792399 95171.34920329074 95438.19572074222 95705.79043672698 95974.13544908396 96243.23286153424 96513.08478369749 96783.69333110838 97055.06062523316 97327.18879348654 97600.07996924798 97873.73629187877 98148.1599067386 98423.35296520244 98699.31762467753 98976.05604861987 99253.57040655176 99531.86287407833 99810.9356329049 100090.79087085396 100371.43078188227 100652.85756609819 100935.07342977884 101218.08058538743 101501.8812515905 101786.4776532755 102071.8720215682 102358.06659384993 102645.0636137755 102932.86533129042 103221.47400264896 103510.89189043136 103801.12126356194 104092.16439732663 104384.02357339115 104676.70107981839 104970.19921108687 105264.52026810833 105559.66655824604 105855.64039533272 106152.4440996887 106450.07999814027 106748.55042403772 107047.85771727365 107348.00422430155 107648.99229815385 107950.82429846068 108253.50259146804 108557.02955005674 108861.4075537607 109166.63898878575 109472.72624802818 109779.67173109378 110087.47784431635 110396.14700077675 110705.68162032175 111016.08412958296 111327.35696199606 111639.50255781961 111952.52336415427 112266.42183496214 112581.20043108574 112896.86162026762 113213.40787716916 113530.84168339071 113849.16552749046 114168.38190500425 114488.4933184649 114809.50227742217 115131.411298462 115454.22290522663 115777.93962843418 116102.56400589852 116428.09858254925 116754.54591045139 117081.90854882578 117410.18906406884 117739.39002977281 118069.5140267459 118400.56364303252 118732.54147393364 119065.450122027 119399.29219718762 119734.0703166082 120069.78710481965 120406.44519371184 120744.04722255381 121082.59583801497 121422.09369418539 121762.54345259696 122103.94778224411 122446.30935960475 122789.6308686611 123133.91500092109 123479.16445543893 123825.38193883697 124172.57016532627 124520.73185672823 124869.8697424958 125219.98655973494 125571.08505322602 125923.16797544544 126276.23808658714 126630.29815458413 126985.35095513039 127341.39927170258 127698.44589558171 128056.49362587517 128415.54526953863 128775.6036413982 129136.67156417214 129498.75186849327 129861.84739293114 130225.96098401415 130591.09549625199 130957.25379215802 131324.43874227165 131692.6532251808 132061.90012754453 132432.18234411578 132803.50277776376 133175.86433949714 133549.26994848647 133923.72253208718 134299.2250258628 134675.78037360765 135053.39152736985 135432.06144747484 135811.79310254828 136192.58946953947 136574.45353374459 136957.38828883017 137341.39673685643 137726.48188830126 138112.6467620833 138499.89438558565 138888.22779467967 139277.65003374932 139668.16415571424 140059.77322205406 140452.4803028323 140846.28847672066 141241.2008310229 141637.220461699 142034.35047338967 142432.5939794407 142831.95410192688 143232.43397167712 143634.0367282988 144036.76552020223 144440.6235046251 144845.61384765792 145251.7397242682 145659.00431832593 146067.41082262772 146476.96243892272 146887.66237793706 147299.5138593994 147712.520112066 148126.68437374625 148542.00989132762 148958.49992080152 149376.15772728866 149794.98658506467 150214.98977758578 150636.17059751446 151058.5323467455 151482.07833643167 151906.81188700948 152332.73632822573 152759.85499916328 153188.17124826726 153617.68843337154 154048.40992172444 154480.33909001583 154913.47932440342 155347.8340205391 155783.40658359556 156220.20042829323 156658.21897892674 157097.4656693923 157537.94394321393 157979.65725357085 158422.60906332458 158866.80284504592 159312.2420810424 159758.9302633852 160206.87089393684 160656.06748437858 161106.52355623784 161558.24264091617 162011.22827971628 162465.48402387032 162921.0134345676 163377.82008298254 163835.90755030265 164295.27942775632 164755.93931664122 165217.89082835295 165681.13758441253 166145.6832164952 166611.5313664591 167078.6856863735 167547.1498385476 168016.9274955592 168488.02234028306 168960.4380659208 169434.17837602898 169909.24698454814 170385.64761583257 170863.38400467875 171342.45989635537 171822.879046632 172304.6452218088 172787.7621987463 173272.23376489474 173758.06371832374 174245.25586775213 174733.81403257782 175223.74204290812 175715.043739589 176207.7229742354 176701.7836092622 177197.2295179136 177694.06458429378 178192.29270339772 178691.9177811408 179192.9437343904 179695.37449099624 180199.213989821 180704.4661807716 181211.13502482968 181719.2244940829 182228.73857175623 182739.68125224288 183252.05654113583 183765.8684552591 184281.12102269928 184797.8182828373 185315.96428637957 185835.56309539053 186356.61878332365 186879.13543505414 187403.11714691023 187928.5680267059 188455.49219377284 188983.89377899247 189513.776924829 190045.14578536127 190578.00452631555 191112.35732509833 191648.2083708287 192185.56186437162 192724.42201837056 193264.79305728065 193806.6792174018 194350.08474691192 194895.0139059002 195441.47096640032 195989.46021242422 196538.98593999568 197090.05245718377 197642.66408413678 198196.82515311602 198752.54000853 199309.81300696815 199868.64851723515 200429.05092038526 200991.02460975663 201554.57399100545 202119.70348214087 202686.41751355943 203254.7205280799 203824.6169809782 204396.11134002195 204969.2080855058 205543.91171028663 206120.2267198184 206698.1576321879 207277.70897814995 207858.88530116293 208441.6911574243 209026.13111590644 209612.20975839268 210199.9316795128 210789.30148677924 211380.32380062324 211973.00325443124 212567.34449458082 213163.3521804772 213761.03098459032 214360.38559249064 214961.4207028865 215564.14102766057 216168.55129190718 216774.65623396882 217382.46060547378 217991.9691713733 218603.1867099785 219216.11801299866 219830.76788557807 220447.14114633386 221065.24262739392 221685.07717443485 222306.64964671966 222929.96491713615 223555.02787223482 224181.8434122674 224810.4164512252 225440.75191687772 226072.8547508111 226706.72990846727 227342.3823591819 227979.81708622444 228619.03908683662 229260.05337227156 229902.86496783333 230547.47891291627 231193.90026104412 231842.1340799103 232492.185451417 233144.05947171568 233797.76125124647 234453.29591477846 235110.6686014495 235769.8844648076 236430.9486728498 237093.8664080638 237758.64286746824 238425.2832626534 239093.79281982206 239764.17677983042 240436.44039822946 241110.58894530602 241786.6277061237 242464.5619805649 243144.39708337217 243826.13834418962 244509.79110760492 245195.36073319145 245882.85259554983 246572.27208435003 247263.62460437455 247956.91557555928 248652.15043303746 249349.33462718135 250048.47362364532 250749.57290340879 251452.6379628186 252157.67431363315 252864.68748306442 253573.6830138223 254284.66646415726 254997.6434079046 255712.61943452794 256429.6001491624 257148.5911726597 257869.59814163114 258592.62670849235 259317.68254150785 260044.77132483467 260773.89875856772 261505.07055878403 262238.29245758755 262973.5702031542 263710.90955977706 264450.31630791194 265191.7962442208 265935.3551816207 266680.99894932494 267428.7333928928 268178.5643742728 268930.49777184986 269684.53948049084 270440.695411591 271198.9714931208 271959.3736696707 272721.9079024999 273486.58016958175 274253.39646565093 275022.3628022506 275793.48520777933 276566.76972753875 277342.22242378024 278119.84937575244 278899.6566797499 279681.6504491608 280465.8368145136 281252.2219235256 282040.81194115244 282831.6130496344 283624.63144854666 284419.87335484603 285217.3450029218 286017.052644643 286819.00254940847 287623.2010041947 288429.6543136069 289238.36879992706 290049.3508031638 290862.60668110196 291678.1428093534 292495.96558140573 293316.08140867326 294138.4967205465 294963.2179644435 295790.2516058597 296619.60412841913 297451.2820339244 298285.29184240894 299121.6400921868 299960.33333990467 300801.37816059287 301644.781147718 302490.548913233 303338.6880876294 304189.20531999075 305042.1072780432 305897.4006482082 306755.09213565453 307615.1884643518 308477.69637712254 309342.6226356951 310209.9740207566 311079.7573320067 311951.9793882099 312826.64702724956 313703.7671061816 314583.3465012881 315465.3921081314 316349.9108416076 317236.9096360016 318126.39544504083 319018.3752419499 319912.8560195053 320809.84479009005 321709.34858574974 322611.37445824547 323515.9294791115 324423.0207397094 325332.6553512832 326244.8404450166 327159.5831720879 328076.89070372627 328996.7702312677 329919.22896621213 330844.2741402787 331771.9130054642 332702.15283409815 333635.000918901 334570.4645730412 335508.5511301912 336449.2679445872 337392.62239108514 338338.62186521903 339287.27378325816 340238.58558226697 341192.5647201622 342149.21867577074 343108.55494888977 344070.5810603444 345035.30455204734 346002.73298705736 346972.8739496391 347945.73504532274 348921.3239009627 349899.6481647983 350880.71550651325 351864.5336172959 352851.11020989943 353840.4530187029 354832.5697997713 355827.4683309162 356825.1564117572 357825.641863783 358828.93253041257 359835.0362770565 360843.96099117893 361855.71458235924 362870.30498235417 363887.7401451602 364908.028047075 365931.17668676144 366957.1940853088 367986.08828629623 369017.8673558568 370052.53938273917 371090.1124783717 372130.594776926 373173.9944353806 374220.3196335856 375269.5785743253 376321.77948338387 377376.9306096098 378435.0402249796 379496.1166246631 380560.16812708904 381627.20307400957 382697.22983056575 383770.256785353 384846.2923504882 385925.3449616738 387007.42307826446 388092.5351833344 389180.6897837423 390271.8954101994 391366.1606173361 392463.4939837681 393563.90411216434 394667.3996293143 395773.9891861965 396883.68145804456 397996.4851444165 399112.40896926314 400231.46168099507 401353.65205255285 402478.98888147506 403607.4809899667 404739.1372249699 405873.9664582314 407011.97758637316 408153.17953096237 409297.581238581 410445.1916808955 411596.01985472743 412750.0747821251 413907.36551043246 415067.9011123611 416231.6906860608 417398.743355192 418569.0682689963 419742.6746023681 420919.57155592676 422099.7683560894 423283.27425514214 424470.0985313138 425660.2504888473 426853.7394580733 428050.574795484 429250.7658838054 430454.32213207113 431661.2529756965 432871.56787655264 434085.2763230401 435302.38783016347 436522.9119396063 437746.8582198054 438974.2362660257 440205.05570043664 441439.3261721863 442677.0573574781 443918.25895964535 445162.94070922834 446411.11236405047 447662.7837092945 448917.9645575802 450176.66474903957 451438.8941513949 452704.6626600366 453973.9801980999 455246.85671654367 456523.3021942269 457803.3266379887 459086.94008272537 460374.15259146964 461664.97425547 462959.4151942681 464257.4855557811 465559.1955163779 466864.55528096115 468173.57508304634 469486.2651848425 470802.63587733207 472122.69748035184 473446.4603426745 474773.93484208855 476105.1313854804 477440.0604089161 478778.7323777228 480121.1577865712 481467.3471595565 482817.31105028285 484171.060041945 485528.6047474113 486889.955809307 488255.1239000979 489624.11972217355 490996.9540079316 492373.63751986175 493754.1810506305 495138.59542316466 496526.89149073744 497919.08013705263 499315.172276331 500715.178853395 502119.110843754 503526.97925369226 504938.7951203533 506354.5695118274 507774.3135272377 509198.03829682834 510625.75498205057 512057.4747756508 513493.208901759 514932.96861597453 516376.76520545676 517824.60998901265 519276.5143171847 520732.4895723418 522192.54716876644 523656.6985527453 525124.9552026588 526597.3286290712 528073.8303748205 529554.4720151087 531039.265157594 532528.2214424803 534021.3525426084 535518.6701635486 537020.1860436915 538525.9119543416 540035.8596998068 541550.041117494 543068.4680779992 544591.1524852018 546118.1062763601 547649.3414221999 549184.8699270121 550724.703828747 552268.8551991066 553817.3361436398 555370.1588018385 556927.3353472316 558488.8779874803 560054.7989644753 561625.1105544317 563199.8250679838 564778.9548502852 566362.5122811014 567950.5097749111 569542.959781 571139.8747835597 572741.2673017862 574347.1498899776 575957.535137632 577572.4356695471 579191.864145917 580815.8332624357 582444.3557503928 584077.4443767741 585715.1119443632 587357.3712918399 589004.2352938824 590655.7168612671 592311.8289409705 593972.5845162711 595637.9966068498 597308.0782688933 598982.8425951955 600662.3027152611 602346.4717954074 604035.3630388685 605728.9896858986 607427.3650138755 609130.502337404 610838.4150084222 612551.1164163055 614268.6199879696 615990.9391879779 617718.0875186472 619450.0785201514 621186.9257706312 622928.6428862963 624675.2435215357 626426.7413690217 628183.15015982 629944.4836634963 631710.7556882246 633481.9800808931 635258.1707272166 637039.3415518424 638825.5065184609 640616.679629914 642412.8749283063 644214.1064951138 646020.388451295 647831.7349574021 649648.1602136914 651469.6784602331 653296.3039770268 655128.0510841088 656964.9341416678 658806.9675501571 660654.1657504056 662506.543223733 664364.1144920613 666226.8941180313 668094.8967051144 669968.1368977288 671846.629381352 673730.3888826382 675619.4301695337 677513.7680513917 679413.4173790881 681318.3930451383 683228.7099838151 685144.3831712638 687065.4276256213 688991.8584071331 690923.6906182709 692860.9394038524 694803.6199511583 696751.7474900527 698705.3372931019 700664.404675694 702628.9649961592 704599.0336558905 706574.6260994646 708555.757814761 710542.4443330867 712534.7012292956 714532.5441219109 716535.9886732476 718545.0505895364 720559.7456210451 722580.0895622036 724606.0982517261 726637.7875727377 728675.1734528969 730718.27186452 732767.098824709 734821.6703954737 736882.0026838613 738948.1118420796 741020.0140676248 743097.7256034091 745181.2627378877 747270.6418051843 749365.8791852234 751466.9913038552 753573.9946329863 755686.9056907073 757805.7410414234 759930.5172959843 762061.251111814 764197.9591930406 766340.6582906297 768489.3652025129 770644.0967737212 772804.8698965168 774971.7015105245 777144.6086028662 779323.6082082925 781508.7174093177 783699.9533363532 785897.3331678403 788100.8741303864 790310.5934989012 792526.5085967288 794748.6367957869 796976.9955167011 799211.6022289414 801452.4744509596 803699.6297503272 805953.0857438726 808212.8600978188 810478.9705279225 812751.4347996128 815030.2707281307 817315.4961786682 819607.1290665091 821905.1873571683 824209.6890665338 826520.6522610073 828838.0950576467 831162.0356243073 833492.4921797828 835829.4829939516 838173.0263879179 840523.1407341555 842879.844456651 845243.1560310503 847613.0939848019 849989.6768973024 852372.9234000427 854762.8521767524 857159.4819635496 859562.8315490843 861972.9197746876 864389.7655345186 866813.3877757139 869243.8054985331 871681.0377565115 874125.103656607 876576.0223593509 879033.8130789979 881498.4950836754 883970.0876955378 886448.6102909151 888934.0823004647 891426.5232093263 893925.9525572724 896432.389938862 898945.8550035943 901466.3674560634 903993.9470561118 906528.613618986 909070.3870154906 911619.2871721458 914175.334071343 916738.5477515013 919308.9483072248 921886.5558894586 924471.390705649 927063.4730199015 929662.8231531383 932269.4614832586 934883.408445299 937504.6845315925 940133.3102919292 942769.306333718 945412.6933221479 948063.4919803509 950721.7230895628 953387.4074892879 956060.5660774591 958741.2198106066 961429.3897040186 964125.096831907 966828.3623275728 969539.2073835713 972257.6532518797 974983.721244062 977717.4327314354 980458.8091452414 983207.8719768105 985964.6427777322 988729.1431600227 991501.3947962954 994281.4194199304 997069.2388252458 999864.8748676664 . Here we initialize the total population to be 50, then set the growth factor as 1.00005 (.005 percent change). It will print the population every 56th day until it reaches one million. It multiplies the current population by the growth factor in each iteration, and increments the day count. When the day count reaches 56, it prints the current population and resets the day count to 0. . Note! This simulation assumes that the growth factor remains constant as time progresses, which may not be a realistic assumption in real-world scenarios. . Hacks . Answer all questions and prompts in the notes (0.2) | Make your own simulation incorporating a database (can be your own or from Kaggle/any db library) (0.5) Comment and describe function of each parts | How does your simulation help solve/mimic a real world problem? | Is there any bias in your simulation? Meaning, are there any discrepancies between your program and the real event? | . | Answer these simulation questions (0.1) | Bonus: take a real world event and make a pseudocode representation or pseudocode on a flowchart of how you would make a simulation for it (up to +0.1 bonus) | . Completed Hacks . MCQs . - AB - A - A - D - BD - C . Coding! . - League of Legends 1v1 simulation * This is the only database I already had downloaded for the last assignment . import pandas #read video game stats of characters and their stats to see the best ones, sorted by winrate dataFrame = pandas.read_csv(&#39;files/lolstats.csv&#39;).sort_values(by=[&#39;Win %&#39;], ascending=False) def fight(): # input one characters champ1 = input(&quot;Name a champion from league of legends (yuck!)&quot;) # if escape was pressed, exit function if champ1 == &quot;&quot;: return # capitalize first letter champ1 = champ1.lower() champ1 = champ1[0].upper() + champ1[1:] # repeat the same for another character champ2 = input(&quot;again&quot;) if champ2 == &quot;&quot;: return champ2 = champ2.lower() champ2 = champ2[0].upper() + champ2[1:] # try to get characters by input try: # Get the win rates of the two champions as floats without the % sign win1 = float(dataFrame[dataFrame.Name == champ1][&quot;Win %&quot;].to_string(index=False).partition(&#39; n&#39;)[0][:-1]) win2 = float(dataFrame[dataFrame.Name == champ2][&quot;Win %&quot;].to_string(index=False).partition(&#39; n&#39;)[0][:-1]) # if it doesn&#39;t work, repeat function and try again except: print(&quot;Please enter a valid character from league of legend video game&quot;) fight() # Show character names and their winrates print(champ1 + &quot; VS &quot; + champ2 + &quot; n n&quot; + champ1 + &quot;: &quot; + str(win1) + &quot;% n&quot; + champ2 + &quot;: &quot; + str(win2) + &quot;% n&quot;) # If the first character has a higher win rate, they win, and vice versa if win1 &gt; win2: print(champ1 + &quot; WINS!&quot;) elif win2 &gt; win1: print(champ2 + &quot; WINS!&quot;) # Only if the winrates are the exact same it will result in a tie, which won&#39;t happen unless it&#39;s the same character else: print(&quot;IT&#39;S A DRAW!&quot;) fight() . Nunu VS Teemo Nunu: 50.02% Teemo: 49.51% Nunu WINS! . This simulation replicates if two players were to use certain characters to fight, to decide who is more likely to win. This could be useful for betting or to choose a better character to use against your opponent. . This simulation is extremely biased because it does not account for several factors of the actual game. This simply uses the average win rate of a character to assume that it is better than the other character, which is already flawed reasoning, but on top of that, it disregards differences in the skill level of the people playing the characters. .",
            "url": "https://aidenhuynh.github.io/CS_Swag/lessons/2023/04/25/P3M-Simulations.html",
            "relUrl": "/lessons/2023/04/25/P3M-Simulations.html",
            "date": " • Apr 25, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "P3-M 4/28 Introduction to SASS",
            "content": "What is SASS? . Sass is a preprocessor language that&#39;s interpreted into CSS. A preprocessor language takes input data and converts it to an output that&#39;s used as input by another program. This means when you run Sass code, you&#39;re actually converting your code to CSS. That CSS code output is then used directly by a browser. Fun fact CSS stands for Cascading Style Sheets and SASS stands for Syntactically Awesome Style Sheets. . SCSS vs. CSS . Understanding the differences between SCSS and CSS . What is CSS . CSS is the default technology that most programmers use when styling webpage. It is one of the 3 fundamental web technologies along with HTML and JavaScript. HTML manages the structure, JavaScript makes pages interactive, and CSS changes the style by taking a markup language like HTML and describes how it should be presented to the user. . | However, CSS is not very easy to work with lacking a lot features often making using CSS very confusing and difficult or hard to work with on lengthy projects. This is why there are tools like Bootstrap, Sass, and Tailwind that make styling a lot easier and more efficient. We will be using Sass in this course. . | . CSS Example . This is an example of CSS that can be used to change body text of an HTML document | Hack Question:Can you guess what its changing style of the text to? * blue bro it says it in the next code cell | . body{ color: #0000FF; font-family: Ariel, sans-serif; font-size: 16px; } . What is SCSS . SCSS is short for Sassy Cascading Style Sheets. | SCSS very similar to CSS but the difference comes with the fact that SCSS extends the functionality of CSS while also making it simpler. What this allows us to do is it enables us to things like nested styling, functions, mixins, variables, inheritance (more on these later) and so on. | . Sass Code Example . $blue: #0000FF; body{ color: $blue; font-family: Ariel, sans-serif; font-size: 16px; } . This example is doing the same thing as the other code segment above but the difference being that here we defined the color as $blue which makes it much easier for us to recall later on. In fact, we have done this before, if you have been using the dark mode/midnight theme then go ahead and navigate your your _sass folder and check out the dark-mode.scss and you&#39;ll see something similar to the example above | . So which one is better to use? . CSS tends to be better for really simple styling where not many complex or nested styles are required and small projects that doesn&#39;t require a lot of customization. | SCSS on the other hand is very good for more complex styling and working with a project with more than one page where maybe lots of customization is needed. Such as the projects we made last and first trimester. | . Modular SCSS . Understanding how to use modular SCSS . Modular SCSS allows you to break multiple different files and then be able to compile them into a single CSS file | How do you do this? Well all you need to do is have _filenames.scss so that is compiled into its own file | Now after adding the to the file name you can import it into you file without the and all the styles will be carried over. | The benefits of a partial is that it allows you to big websites and allows you to break up the code in multiple components and easily make changes instead of having to go through a huge file. | All styles in the partial will be added and can be used into the main file as if they were defined in the main file. | . File 1 _variable.scss . $primary-button-color: #009494; $hover-color: black; $menu-color: #f2f2f2; . File 2 style.scss . We can see the importing of the .scss file&#39;s content into the other main .scss file style.scss | . {@import &#39;variables&#39;; @import &quot;{{ site.theme }}&quot;;} /* &quot;row style&quot; is flexible size and aligns pictures in center */ .row { align-items: center; display: flex; } /* &quot;column style&quot; is one-third of the width with padding */ .column { flex: 33.33%; padding: 5px; } .menu a { // float: left; display: block; color: $menu-color; text-align: center; // padding: 14px 16px; text-decoration: none; } .menu a:hover { background: $primary-button-color; color: $hover-color; } . Nesting . What is nesting? Where did the birds come from? . Nesting is a way to organize your code and make it easier to read. It also helps keep your code DRY (Don&#39;t Repeat Yourself). | Nesting is when you put one selector inside another selector. This is a great way to keep your code organized and make it easier to read. | When we make HTML we often nest different elements within each other and have a clear structure when we look at it. | The problem is that in regular CSS we don&#39;t have that so we need to use SASS to help us organize our code. | . Warning:Don&#39;t nest too much as when the CSS is processed it can make overqualified selectors which can be hard to read and maintain. Which means that it would only target that specific element type and not any other elements that have the same class name. ## Sass Nesting | Through nesting the ul, li, and a selectors within the nav selector makes your CSS better and increases its readability overall. | . nav { ul { margin: 0; padding: 0; list-style: none; } li { display: inline-block; } a { display: block; padding: 6px 12px; text-decoration: none; } } . CSS - Lack of Nesting . We can see that through the lack of nesting the CSS is not as organized and needs extra information to be able to make it more clear exactly what is being targeted. | . nav ul { margin: 0; padding: 0; list-style: none; } nav li { display: inline-block; } nav a { display: block; padding: 6px 12px; text-decoration: none; } . Variables . What is a variable? . A variable is a container that stores information so for instance when you multiple places that refer to one value you can just use the variable name instead of the value. | This is valuable in SASS because it allows you to reuse that value in multiple places throughout you stylesheet. | Variables in CSS preprocessors such as Sass allow you to store information that you can reuse in your stylesheet, such as font stacks, colors, or any other CSS value you anticipate needing. The $ symbol is used in Sass to designate a variable. | . Pro Tip:The reason SASS variables are better than variables in regular CSS is that they are more consider and easier to read with a much simpler syntax. Fun Fact: Variables in SASS came before CSS and often SASS has features long before they are actually added to CSS as a whole. . Variable Example Syntax . $variable-name: value; | Once the sass is processed the variable name is replaced with the value throughout the program. | . $main-font: Calibri, sans-serif; $main-color: #000; $main-color-hover: #000; . Operators . Operators are used to perform operations on variables and other aspects of the language like in python we can use operators to see if values are equal, add, divide, subtract, multiply, etc. | SASS has a lot of operators that can be used to perform operations on variables and other aspects of the language as well. They can include == to check if two values are equal and != to check if two values are not equal | + to add two values together | - to subtract two values | * to multiply two values | / to divide two values | % to find the remainder of two values | &lt; to check if one value is less than another | &gt; to check if one value is greater than another | &lt;= to check if one value is less than or equal to another | &gt;= to check if one value is greater than or equal to another | Also there is and, or, &amp; not to be able to use boolean operations | . | . Operator Example Syntax . Operators are used in this example to perform string concatenation | . // Html &lt;p id=&quot;testing&quot;&gt;original text and&lt;/p&gt; // SASS #testing:after{ content: &quot; some&quot; + &quot; more&quot; + &quot; text&quot;; } // Output original text and some more text . Conditional Statements . There are conditional statements in SASS just like in Python and JavaScript they work the same way as well. | Conditional statements are used to perform different actions based on different conditions. Such as if a certain condition is true then do this, if it is false then do that and so on. | SASS has @if which allows for different styles based on if a boolean expression was true or false. | SASS has @else which allows for different set of styles if the if condition was not met or false. | SASS has @else if which allows for an alternative conditions to be run if the first is not met. | . $color: red; button { @if $color == red { background-color: $color; } } // @else: allows you to provide an alternative set of styles to apply if the condition in the @if statement isn&#39;t met $color: blue; button { @if $color == red { background-color: red; } @else { background-color: $color; } } // @else if: allows you to provide multiple alternative conditions to test $color: green; button { @if $color == red { background-color: red; } @else if $color == blue { background-color: blue; } @else { background-color: $color; } } . Loops In Sass . Loops are present in SASS through the @for and @while decorators, along with @each. | Loops are used to repeat a block of code a certain number of times or until a certain condition is met just like in any other programming language. . For Loops: Are used to iterate through a value like a list or a range of numbers | While Loops: Are used to iterate through a block of code until a certain condition is met such as a value is being equal to a certain value through an incrementing or decrementing a variable or any other condition that is met. | . | When using while loops they can be necessary but it is better to use @each and @for as it will make it clear and be able to compile faster. . | Side Note: In SASS lists care a any group of values that are separated by a comma or a space there is no special brackets used like in python or javascript. Lists can be searched for values however they are immutable meaning that they cannot be changed once they are created. . | . Some Code Examples of Loops and Lists . // A for each loop is used to interact with a group of sizes changing // the size of the element for each item in the list $sizes: 40px, 50px, 80px; @each $size in $sizes { .icon-#{$size} { font-size: $size; height: $size; width: $size; } } // @each: allows you to loop over a list of values and generate styles $colors: red, green, blue; @each $color in $colors { .color-#{$color} { background-color: $color; } } . @debug list.index(1px solid red, 1px); // 1 @debug list.index(1px solid red, solid); // 2 @debug list.index(1px solid red, dashed); // null . @use &quot;sass:math&quot;; /// Divides `$value` by `$ratio` until it&#39;s below `$base`. @function scale-below($value, $base, $ratio: 1.618) { @while $value &gt; $base { $value: math.div($value, $ratio); } @return $value; } $normal-font-size: 16px; sup { font-size: scale-below(20px, 16px); } . $base-color: #036; @for $i from 1 through 3 { ul:nth-child(3n + #{$i}) { background-color: lighten($base-color, $i * 5%); } } // @for: allows you to loop over a range of values and generate styles @for $i from 1 through 3 { .item-#{$i} { width: 100px * $i; } } . Functions in SASS . What is a function? . A function is a block of code that performs a specific task. This is a great method to be able to reuse code and processes in a manner that is more efficient and allows for the reuse of code. We do this all the time in programming languages such as JavaScript and Python. | . SASS functions . Sass Functions allow you to define complex calculations and transformations that can be used throughout your stylesheet and allow you to perform complex operations on values, manipulate data, plus you can generate content dynamically. . | There a are built in functions and ones you can make on your own like languages such as JavaScript and Python. . | SASS functions can be used to perform arithmetic operations, manipulate colors, work with strings, and more. . | Functions in SASS are similar to functions in programming languages, but they can be used within SASS stylesheets to generate CSS code dynamically. . | . Using Built-in Functions . Like Python and Javascript SASS provides a variety of built-in functions for math, color manipulation, string manipulation, and more. | . Math Functions . SASS has many functions that allow you to be able to perform wide range of math operations similar to the ones present in python including more complex operations. | . .round(1.2); // returns 1 .ceil(1.2); // returns 2 .floor(1.2); // returns 1 .abs(-1.2); // returns 1.2 .min(1, 2, 3); // returns 1 .max(1, 2, 3); // returns 3 .random(1, 100); // returns a random number between 1 and 100 . Color Functions . Color is an important component of any website and SASS provides a wide range of functions that allow you to manipulate colors in a variety of ways. | . .lighten(#007fff, 20%); // returns a lighter shade of blue .darken(#007fff, 20%); // returns a darker shade of blue .opacify(#007fff, 0.2); // makes the color more opaque .transparentize(#007fff, 0.2); // makes the color more transparent .mix(#007fff, #ff0000, 50%); // returns a mix of two colors . String Functions . SASS provides a variety of string functions that allow you to manipulate strings. Here are some examples: | . .to-upper-case(&quot;hello world&quot;); // returns &quot;HELLO WORLD&quot; .to-lower-case(&quot;HELLO WORLD&quot;); // returns &quot;hello world&quot; .str-index(&quot;hello world&quot;, &quot;world&quot;); // returns the index of the first occurrence of &quot;world&quot; .str-insert(&quot;hello&quot;, &quot; world&quot;, 5); // inserts &quot; world&quot; into &quot;hello&quot; at position 5 . Creating Custom Functions . In addition to using built-in functions, you can also create your own functions in SASS using the @function name(arguments){} | @return is similar to the return statement in JavaScript and Python. It returns a value from a function. | Functions take input values, perform calculations, and return a result. Here&#39;s an example of a simple function that calculates the area of a rectangle: | . @function rectangle-area($width, $height) { @return $width * $height; } // Usage: $area: rectangle-area(10px, 20px); // Returns 200px . Or you can also make a different kind of function that increases the font size to the factorial of a inputted number. | . @function factorial($number){ $calculated: 1; @for $_ from 1 through $number { $calculated: $calculated*$number; } @return $calculated; } #testing { font-size: factorial(3); } . //Combining functions and loops to achieve different sass effects @function sum($numList){ $sum: 0; @each $num in $numList { $sum: $sum+$num; } @return $num; } @function tri($num){ $sum: 0; @for $i from 1 through $num { $sum: $sum+$num; } @return $sum; } @function max($nums){ $i:0; $value:0px; @while $i&lt;length($nums){ @if $value&lt;list.nth($nums,$i){ $value:list.nth($nums,$i); } } } . Custom functions are very powerful, and can be used to create reusable pieces of code that can be used throughout your stylesheets. . | SASS functions are a powerful feature that allow you to perform complex operations on values, manipulate data, and generate content dynamically. By using built-in functions and creating your own custom functions, you can greatly extend the capabilities of your SASS stylesheets. . | . Mixins . Mixin what is a mix in what are we mixing in? . Mixins are a way to make groups of CSS that you want to reuse throughout your site anywhere you please. | Mixins are a form of template and that you can use to build on top of to make different features later on this prevents you from having to write the same code over and over again. | This is a form of encapsulation in your CSS and is a great way to make your code more organized and easier to read. | Mixins can also take in arguments and be able to be used to apply effects on certain elements if that is a feature you want to add to your site. However unlike functions which also take arguments mixins cannot return values. | To use a mixin declare it with @mixin and then incorporate with @include. | . Inheritance . What is inheritance? . In general programming concept where the child class can inherit properties from the parent class. These properties can be changed and modified in the child class. This prevents code from being repeated and makes the code more usable and flexible. | In SASS we have a similar concept that can be used as well we can create base styles and then have other styles inherit from them and then we can change them as we please. | We can do that by through using @extend .name-of-class and then we can add more styles to it as we please. Simple as that | . Mixin &amp; Inheritance Code Example . // example of @mixin @mixin button { width: auto; height: auto; border-radius: 10px; background-color: #21807c; border: 3px solid black; font-size: 1.5em; display: flex; justify-content: center; align-items: center; grid-column: span 1; grid-row: span 1; // creates smooth animation effect transition: all 0.5s; } // default button theme for calculator and stopwatch buttons. Both will follow the same button format .button { // uses the scss from the @mixin @include button; } /* styling for the calculator clear button */ .calculator-button-clear { // @extend inherits .button and then changes the background color from .button @extend .button; background-color: #e68b1c; } /* styling for the calculator equals button */ .calculator-button-equals { // another @extend inherits .button and then changes the background color from .button @extend .button; background-color: #e70f0f; } . Hacks &amp; Hack Helper - Calculator &amp; Hack Helper - Stopwatch . All hacks are pair/trio hacks, individual hacks are not recommended and will not be accepted unless a valid reason is given. We will respond in the appropriate slack channel if we have any questions. Hacks are due by 11:59pm on Wednesday 4/26/2023 at 11:59 p.m. PST. Any late submission will have a deduction of 0.1 points from their total grade. | . Part 1: Reflections 0.4 Points . Write a short description of each key feature of Sass and compare it to how it to CSS and how using Sass makes your life easier when using all the features. Include examples of how it would have made prior features from past projects simpler to implement. Also answer the questions indicated as hack questions. | . Part 2: Sass Demo 0.5+ Points . Using at least 3 or more sass features create a UI demo that may be used for future or current projects and reflect on how this was more effective than doing the same task using only regular features of CSS. Extra points will be awarded based on creativity and extra addition of features from SASS. | . Credits: Team Mortalicously Sassy 💖 .",
            "url": "https://aidenhuynh.github.io/CS_Swag/student/2023/04/24/P3M-SASSFundamentals.html",
            "relUrl": "/student/2023/04/24/P3M-SASSFundamentals.html",
            "date": " • Apr 24, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "P3 4/21 Binary Overview",
            "content": "Learning Objectives . DAT-1.A: Representing Data with Bits . Basic Information . Bit is short for __ digit, and represents a value of either 0 or 1. A byte is 8 bits. | . | Sequences of bits are used to represent different things. Representing data with sequences of bits is called ___. | . | . Examples . Boolean variables (true or false) are the easiest way to visualize binary. 0 = False | 1 = True | . | . import random def example(runs): # Repeat code for the amount of runs given while runs &gt; 0: # Assigns variable boolean to either True or False based on random binary number 0 or 1. boolean = False if random.randint(0, 1) == 0 else True # If the number was 1 (True), it prints &quot;awesome.&quot; if boolean: print(&quot;binary is awesome&quot;) # If the number was 2 (False), it prints &quot;cool.&quot; else: print(&quot;binary is cool&quot;) runs -= 1 # Change the parameter to how many times to run the function. example(10) . DAT-1.B: The Consequences of Using Bits to Represent Data . Basic Information . Integers are represented by a fixed number of bits, this limits the range of integer values. This limitation can result in __ or other errors. | Other programming languages allow for abstraction only limited by the computers memory. | Fixed number of bits are used to represent real numbers/limits | . Examples . import math def exponent(base, power): # Print the operation performed, turning the parameters into strings to properly concatenate with the symbols &quot;^&quot; and &quot;=&quot;. print(str(base) + &quot;^&quot; + str(power) + &quot; = &quot; + str(math.pow(base, power))) # How can function become a problem? (Hint: what happens if you set both base and power equal to high numbers?) exponent(1, 1000) . DAT-1.C: Binary Math . Basic Information . Binary is Base 2, meaning it can only represent values between 0 and 1. | Decimal is Base 10, meaning it can represent from 0 to 9. | Conversion between sequences of binary to decimal depend on how many binary numbers there are, their values and their positions. | . Examples . Using 6 bits, we can represent 64 numbers, from 0 to 63, as 2^6 = 64. | The numbers in a sequence of binary go from right to left, increasing by powers of two from 0 to the total amount of bits. The whole number represented is the sum of these bits. For example: 111111 | 2^5 + 2^4 + 2^3 + 2^2 + 2^1 + 2^0 | 32 + 16 + 8 + 4 + 2 + 1 | 63 | | Fill in the blanks (convert to decimal) 001010 = _ | 11100010 = _ | 10 = _ | | . Hacks . Complete all of the popcorn hacks (Fill in the blanks) | Create a program to conduct basic mathematical operations with binary sequences (addition, subtraction, multiplication, division) For bonus, program must be able to conduct mathematical operations on binary sequences of varying bits (for example: 101 + 1001 would return decimal 14.) | . | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/student/2023/04/21/binary_numbers.html",
            "relUrl": "/student/2023/04/21/binary_numbers.html",
            "date": " • Apr 21, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Week 29 Review Ticket",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Team Lesson Plan | Big Idea 4: Computers and Networks Diagram: | Example of Completed Hacks: | . | Create Performance Task | 2018 Practice MCQ #5 Score: 66/66 | . | Project Work (Base64 Defusal) Flexbox UI pair-coded with Toby | Made UI better, coded working base game, really cool modal images, little to-do | To-do: | Timer | Win/loss screens | Start screen with difficulties (times) | . . | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2023/04/18/Week_29_Hacks.html",
            "relUrl": "/markdown/review_ticket/2023/04/18/Week_29_Hacks.html",
            "date": " • Apr 18, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Base64 Defusal",
            "content": ". 12:00 DECODE THE FOLLOWING: ____ 1 2 3 4 5 6 7 8 9 ⌫ 0 ↩ BASE64 ASCII NOTEPAD BASE64 DEFUSAL EASY (10 MIN) MEDIUM (5 MIN) HARD (1 MIN) TUTORIAL RANKINGS DECODER YOU WIN! TIME REMAINING: RESTART TUTORIAL RANKINGS DECODER YOU LOSE! RESTART TUTORIAL RANKINGS DECODER &times; &times; EASY MEDIUM HARD &times; &times; &times;",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/projects/2023/04/06/Base64_Defusal.html",
            "relUrl": "/markdown/projects/2023/04/06/Base64_Defusal.html",
            "date": " • Apr 6, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Computers and Networks (Unit 4)",
            "content": "Requirements . Work through College Board Unit 4… blog, add definitions, and pictures. Be creative, for instance make a story of Computing and Networks that is related to your PBL experiences this year. . How a Computer Works . As we have learned, a computer needs aa program to do something smart. The sequence of a program initiates a series of actions with the computers Central Processing Unit (CPU). This component is essentially a binary machine focussing on program instructions provided. The CPU retrieves and stores the data it acts upon in Random Access Memory (RAM). Between the CPU, RAM, and Storage Devices a computer can work with many programs and large amounts of data. . List specification of your Computer, or Computers if working as Pair/Trio . Processor GHz: 1.6 GHz | Memory in GB: 8 GB 1600 MHz | Storage in GB: 121.12 GB | OS: macOS Monterey | . Define or describe usage of Computer using Computer Programs. Pictures are preferred over a lot of text. Use your experience. . Input devices | Output devices | Program File | Program Code | Processes | Ports | Data File | Inspect Running Code | Inspect Variables | . . The Internet . Watch/review College Board Daily Video for 4.1.1 . Essential Knowledge A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors. | A computing system is a group of computing devices and programs working together for a common purpose. | A computer network is a group of interconnected computing devices capable of sending or receiving data. | A computer network is a type of computing system. | A path between two computing devices on a computer network (a sender and a receiver) is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. | Routing is the process of finding a path from sender to receiver. | The bandwidth of a computer network is the maximum amount of data that can be sent in a fixed amount of time. | Bandwidth is usually measured in bits per second | . | Complete Vocabulary Matching Activity. Incorporate this into your learnings from year. To analyze measure path and latency use traceroute and ping commands from Linux Terminal. Path: Sequence of connected computing devices that begins at sender and ends at receiver | Route: The process of finding a path between sender and receiver | Computer System: A group of computing devices and programs working together | Computer Device: A physical artifact that can run programs | Bandwidth: The maximum amount of data that can be sent within a certain time frame | Computer Network: A group of interconnected computing devices capable of sending and receiving data between each other | . | . Watch/review College Board Daily Video 4.1.2 . Essential Knowledge The internet is a computer network consisting of interconnected networks that use standardized, open (nonproprietary) communication protocols. | Access to the internet depends on the ability to connect a computing device to an internet connected device. | A protocol is an agreed-upon set of rules that specify the behavior of a system. | The protocols used in the internet are open, which allows users to easily connect additional computing devices to the internet. | Routing on the internet is usually dynamic; it is not specified in advance | The scalability of a system is the capacity for the system to change in size and scale to meet new demands. | The internet was designed to be scalable | Information is passed through the internet as a data stream. Data streams contain chunks of data, which are encapsulated in packets. | Packets contain a chunk of data and metadata used for routing the packet between the origin and the destination on the internet, as well as for data reassembly. | Packets may arrive at the destination in order, out of order, or not at all | IP, TCP and UDP are common protocols used on the internet. | The world wide web is a system of linked pages, programs, and files. | HTTP is a protocol used by the world wide web | The world wide web uses the internet | . | Draw a diagram showing the internet and its many levels. A preferred diagram would use your knowledge of frontend, backend, deployment (GitHub Page, AWS, EC2, Docker, Nginx, Certbot, DNS, APIs). | . . Complete True of False Questions True | False | False | True | False | False | True | | . Fault Tolerance . Watch both Daily videos for 4.2 . Complete the network activity, summarize your understanding of fault tolerance. | . A fault tolerant network is a network in which if one connection between computing devices goes down, a path can still be made between all of the computing devices in the network. While this makes networks more reliable in the case of an accident, it is also more resource intensive as it requires more resources to make more connections between the computers. . Parallel and Distributed Computing . Review previous lecture on Parallel Computing and watch Daily video 4.3. Think of ways to make something in you team project to utilize Cores more effectively. Here are some thoughts to add to your story of Computers and Networks… . What is naturally Distributed in Frontend/Backend architecture? . | Analyze this command in Docker: ENV GUNICORN_CMD_ARGS=&quot;--workers=1 --bind=0.0.0.0:8086&quot;. Determine if there is options are options in this command for parallel computing within the server that runs python/gunicorn. Here is an article . | . Last week we discussed parallel computing on local machine. There are many options. Here is something to get parallel computing work with a tool called Ray. . Review this article… Can you get parallel code on images to work more effectively? I have not tried Ray. | . Code example from ChatGPT using squares. This might be more interesting if nums we generated to be a lot bigger. | . import ray # define a simple function that takes a number and returns its square def square(x): return x * x # initialize Ray ray.init() # create a remote function that squares a list of numbers in parallel @ray.remote def square_list(nums): return [square(num) for num in nums] # define a list of numbers to square nums = [1, 2, 3, 4, 5] # split the list into two parts split_idx = len(nums) // 2 part1, part2 = nums[:split_idx], nums[split_idx:] # call the remote function in parallel on the two parts part1_result = square_list.remote(part1) part2_result = square_list.remote(part2) # get the results and combine them result = ray.get(part1_result) + ray.get(part2_result) # print the result print(result) .",
            "url": "https://aidenhuynh.github.io/CS_Swag/techtalk/2023/04/05/computers_networks.html",
            "relUrl": "/techtalk/2023/04/05/computers_networks.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Week 28 Review Ticket",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . MCQ #4 Score: | Example of Corrected Problem: | . | Hashmaps Diagram: | Questions/Hacks Example: | . | Parallel Computing Hacks: | . | Pair-Trio Hacks RGB Guesser is complete!! | Dash: Made sleep function in js with Promises (idk how this works) | Toby: Helped with accuracy calculation | Aiden: Everything else (its my game!) | . . | Team Hacks Lesson Plan | Lesson date: April 21 | . | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2023/04/03/Week_28_Hacks.html",
            "relUrl": "/markdown/review_ticket/2023/04/03/Week_28_Hacks.html",
            "date": " • Apr 3, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "MCQ Test 4 Reflection",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Score: 48/50 . . Corrections . Q41: Procedure most useful in replacing negative values . A student is writing a program that is intended to replace each negative value in a particular column of a spreadsheet with the value 0. Which of the following procedures is most likely to be useful in the student’s program? Original answer: | A procedure containsNegatives, which returns true if any negative values appear in the column and returns false otherwise. | . Correct answer: | A procedure findNegative, which returns the row number of the first negative value that appears in the column or -1 if there are no negative values. | . Explanation | Being able to identify if there is a negative and where it is is most beneficial for the intended purpose. The original is incorrect because it returns true for a whole list but doesn&#39;t tell you where. | . . Q28: Remove first and last two characters of string . A teacher stores the most recent quiz scores for her class in the list scores. The first element in the list holds the maximum possible number of points that can be awarded on the quiz, and each remaining element holds one student’s quiz score. Assume that scores contains at least two elements. Which of the following code segments will set the variable found to true if at least one student scored the maximum possible number of points on the quiz and will set found to false otherwise? Original answer: | . Correct answer: | . Explanation | Original answer is wrong because it won&#39;t check the very last item in the list. Correct is right because it successfully does check all items. | . .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/hacks/2023/03/31/mcq4.html",
            "relUrl": "/markdown/hacks/2023/03/31/mcq4.html",
            "date": " • Mar 31, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "Data Structures- Hashmaps, Sets, Hash Tables, Hashing and Collisions",
            "content": "What is a Hashtable/Hashmap? . A hashtable is a data structure that with a collection of key-value pairs, where each key maps to a value, and the keys must be unique and hashable. . In Python there is a built in hashtable known as a dictionary. | . The primary purpose of a hashtable is to provide efficient lookup, insertion, and deletion operations. When an element is to be inserted into the hashtable, a hash function is used to map the key to a specific index in the underlying array that is used to store the key-value pairs. The value is then stored at that index. When searching for a value, the hash function is used again to find the index where the value is stored. . The key advantage of a hashtable over other data structures like arrays and linked lists is its average-case time complexity for lookup, insertion, and deletion operations. . The typical time complexity of a hashtable is ___. | . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . my_set = set([1, 2, 3, 2, 1]) print(my_set) # What do you notice in the output? # Only outputs unique numbers # Curly braces indicative of dictionaries # Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # No duplicate values . {1, 2, 3} . Dictionary Example . Below are just some basic features of a dictionary. As always, documentation is always the main source for all the full capablilties. . lover_album = { &quot;title&quot;: &quot;Lover&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2019, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Synth-pop&quot;], &quot;tracks&quot;: { 1: &quot;I Forgot That You Existed&quot;, 2: &quot;Cruel Summer&quot;, 3: &quot;Lover&quot;, 4: &quot;The Man&quot;, 5: &quot;The Archer&quot;, 6: &quot;I Think He Knows&quot;, 7: &quot;Miss Americana &amp; The Heartbreak Prince&quot;, 8: &quot;Paper Rings&quot;, 9: &quot;Cornelia Street&quot;, 10: &quot;Death By A Thousand Cuts&quot;, 11: &quot;London Boy&quot;, 12: &quot;Soon You&#39;ll Get Better (feat. Dixie Chicks)&quot;, 13: &quot;False God&quot;, 14: &quot;You Need To Calm Down&quot;, 15: &quot;Afterglow&quot;, 16: &quot;Me! (feat. Brendon Urie of Panic! At The Disco)&quot;, 17: &quot;It&#39;s Nice To Have A Friend&quot;, 18: &quot;Daylight&quot; } } # What data structures do you see? # Lists # Dictionaries # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}} . print(lover_album.get(&#39;tracks&#39;)) # or print(lover_album[&#39;tracks&#39;]) . {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} . print(lover_album.get(&#39;tracks&#39;).get(4)) # or print(lover_album[&#39;tracks&#39;][4]) . The Man The Man . lover_album[&quot;producer&quot;] = set([&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]) # What can you change to make sure there are no duplicate producers? # Make a set # # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}, &#39;producer&#39;: {&#39;Jack Antonoff&#39;, &#39;Frank Dukes&#39;, &#39;Louis Bell&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;}} . lover_album[&quot;tracks&quot;].update({19: &quot;All Of The Girls You Loved Before&quot;}) # How would add an additional genre to the dictionary, like electropop? lover_album[&quot;genre&quot;].append(&quot;electropop&quot;) # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;, &#39;electropop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;}, &#39;producer&#39;: {&#39;Jack Antonoff&#39;, &#39;Frank Dukes&#39;, &#39;Louis Bell&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;}} . # for k,v in lover_album.items(): # iterate using a for loop for key and value # print(str(k) + &quot;: &quot; + str(v)) # Write your own code to print tracks in readable format for i in lover_album: itemType = type(lover_album[i]) print(str(i.upper()) + &quot;:&quot;) if itemType == list or itemType == set: for n in lover_album[i]: print(&quot; &quot; + str(n)) # not using &quot; t&quot; because the indent looks to big for me elif itemType == dict: for n in lover_album[i]: print(&quot; &quot; + str(n) + &quot;: &quot; + str(lover_album[i][n])) else: print(&quot; &quot; + str(lover_album[i])) print(&quot;&quot;) . TITLE: Lover ARTIST: Taylor Swift YEAR: 2019 GENRE: Pop Synth-pop electropop TRACKS: 1: I Forgot That You Existed 2: Cruel Summer 3: Lover 4: The Man 5: The Archer 6: I Think He Knows 7: Miss Americana &amp; The Heartbreak Prince 8: Paper Rings 9: Cornelia Street 10: Death By A Thousand Cuts 11: London Boy 12: Soon You&#39;ll Get Better (feat. Dixie Chicks) 13: False God 14: You Need To Calm Down 15: Afterglow 16: Me! (feat. Brendon Urie of Panic! At The Disco) 17: It&#39;s Nice To Have A Friend 18: Daylight 19: All Of The Girls You Loved Before PRODUCER: Jack Antonoff Frank Dukes Louis Bell Joel Little Taylor Swift . # def search(): # search = input(&quot;What would you like to know about the album?&quot;) # if lover_album.get(search.lower()) == None: # print(&quot;Invalid Search&quot;) # else: # print(lover_album.get(search.lower())) # search() # This is a very basic code segment, how can you improve upon this code? # Better formatting # loop for invalid searches def albumSearch(): search = input(&quot;What would you like to know about the album?&quot;).lower() if search == &quot;&quot;: print(&quot;search cancelled&quot;) return elif lover_album.get(search) == None: print(&quot;Invalid Search&quot;) albumSearch() else: if search == &quot;tracks&quot;: print(search.upper()) for i in lover_album[&quot;tracks&quot;]: print(&quot; &quot; + str(i) + &quot;: &quot; + str(lover_album[&quot;tracks&quot;][i])) elif search == &quot;producer&quot;: print(str(search.upper()) + &quot;:&quot;) for i in lover_album[&quot;producer&quot;]: print(&quot; &quot; + str(i)) else: print(search.upper() + &quot;: n &quot; + lover_album[search]) albumSearch() . TRACKS 1: I Forgot That You Existed 2: Cruel Summer 3: Lover 4: The Man 5: The Archer 6: I Think He Knows 7: Miss Americana &amp; The Heartbreak Prince 8: Paper Rings 9: Cornelia Street 10: Death By A Thousand Cuts 11: London Boy 12: Soon You&#39;ll Get Better (feat. Dixie Chicks) 13: False God 14: You Need To Calm Down 15: Afterglow 16: Me! (feat. Brendon Urie of Panic! At The Disco) 17: It&#39;s Nice To Have A Friend 18: Daylight 19: All Of The Girls You Loved Before . Hacks . Answer ALL questions in the code segments | Create a venn diagram or other compare and contrast tool related to hashmaps. What are the pro and cons of using this data structure? | Dictionary vs List | . | Expand upon the code given to you, possible improvements in comments | Build your own album showing features of a python dictionary | For Mr. Yeung&#39;s class: Justify your favorite Taylor Swift song, answer may effect seed | . thenownow = { &quot;name&quot;:&quot;The Now Now&quot;, &quot;artist&quot;:&quot;Gorillaz&quot;, &quot;year&quot;:2018, &quot;genres&quot;:False, &quot;tracks&quot;:[ &quot;funk&quot;, &quot;synth-pop&quot;, &quot;psychadelic pop&quot; ] } print(thenownow) . {&#39;name&#39;: &#39;The Now Now&#39;, &#39;artist&#39;: &#39;Gorillaz&#39;, &#39;year&#39;: 2018, &#39;genres&#39;: False, &#39;tracks&#39;: [&#39;funk&#39;, &#39;synth-pop&#39;, &#39;psychadelic pop&#39;]} . Oh no! I&#39;ve accidentally forgotten all of the tracks, set genres equal to False, and set the tracks to the genres! . Also the formatting sucks!!!!! . tracks = [ &quot;Humility&quot;, &quot;Tranz&quot;, &quot;Hollywood&quot;, &quot;Kansas&quot;, &quot;Sorcererz&quot;, &quot;Idaho&quot;, &quot;Lake Zurich&quot;, &quot;Magic City&quot;, &quot;Fire Flies&quot;, &quot;One Percent&quot;, &quot;Souk Eye&quot; ] # Set the genres equal to what tracks currently is, which is the actual genres thenownow[&quot;genres&quot;] = thenownow[&quot;tracks&quot;] # Set the tracks equal to the list of actual tracks thenownow[&quot;tracks&quot;] = tracks print(thenownow) . {&#39;name&#39;: &#39;The Now Now&#39;, &#39;artist&#39;: &#39;Gorillaz&#39;, &#39;year&#39;: 2018, &#39;genres&#39;: [&#39;funk&#39;, &#39;synth-pop&#39;, &#39;psychadelic pop&#39;], &#39;tracks&#39;: [&#39;Humility&#39;, &#39;Tranz&#39;, &#39;Hollywood&#39;, &#39;Kansas&#39;, &#39;Sorcererz&#39;, &#39;Idaho&#39;, &#39;Lake Zurich&#39;, &#39;Magic City&#39;, &#39;Fire Flies&#39;, &#39;One Percent&#39;, &#39;Souk Eye&#39;]} . Hooray! The information is correct now! But the formatting still stuck!!!!!!! . def albumSearch(): # Keep exact search to return to user in text exactSearch = input(&quot;Enter search or press Escape to exit (Name, artist, year, genres, or tracks)&quot;) # Lower actual search to show results even if capitalization is different search = exactSearch.lower() print(&#39;You searched for: &quot;&#39; + exactSearch + &#39;&quot; n&#39;) # Back out if Escape is pressed or nothing is entered if search == &quot;&quot;: return # Loop function if no result is found elif thenownow.get(search) == None: print(&quot;Results not found, please try again n&quot;) albumSearch() # If results are found, state category of result before items in result else: print(&quot;Results found n n&quot; + search.upper() + &quot;:&quot;) # If result is a list, iterate through and print each item if type(thenownow[search]) == list: for item in thenownow[search]: print(&quot; &quot; + item) # If result is not a list, print item else: print(&quot; &quot; + thenownow[search]) albumSearch() . You searched for: &#34;tracks&#34; Results found TRACKS: Humility Tranz Hollywood Kansas Sorcererz Idaho Lake Zurich Magic City Fire Flies One Percent Souk Eye .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/hashmaps",
            "relUrl": "/jupyter/hashmaps",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Unit 4.3a Parallel Computing",
            "content": "Analyzing Parallel Computing . Once again we will use image lab, this time to review Parallel Computing. . Change baseWidth in this line in code to increase computation requirements:def process_image(image, baseWidth=512): For instance 320, 512, 1024, 2048, 4096.- Compare Sequential and Parallel computing code and time to achieve outputs | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as PIL Image is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;../images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpeg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Scale to baseWidth def scale_image(img, baseWidth): scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Convert pixels to Grey Scale def grey_pixel(pixel): average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: return( (average, average, average, pixel[3]) ) # PNG format else: return( (average, average, average) ) # Convert pixels to Red Scale def red_pixel(pixel): if len(pixel) &gt; 3: return( (pixel[0], 0, 0, pixel[3]) ) # PNG format else: return( (pixel[0], 0, 0) ) # Convert pixels to Red Scale def green_pixel(pixel): if len(pixel) &gt; 3: return( (0, pixel[1], 0, pixel[3]) ) # PNG format else: return( (0, pixel[1], 0) ) # Convert pixels to Red Scale def blue_pixel(pixel): if len(pixel) &gt; 3: return( (0, 0, pixel[2], pixel[3]) ) # PNG format else: return( (0, 0, pixel[2]) ) # Set Properties of Image, Scale, and convert to Base64 def image_management(image, baseWidth): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img, baseWidth) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size image[&#39;numpy&#39;] = np.array(img.getdata()) # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Grey HTML # each pixel in numpy array is turned to grey # then resulting list, using List Comprehension, is put back into img img.putdata([grey_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) # Red HTML img.putdata([red_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_red&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) # Green HTML img.putdata([green_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_green&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) # Blue HTML img.putdata([blue_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_blue&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) def process_image(image, baseWidth=int(input(&quot;enter basewidth&quot;))): image_management(image, baseWidth) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- images --&quot;) display(HTML(image[&#39;html&#39;])) display(HTML(image[&#39;html_grey&#39;])) display(HTML(image[&#39;html_red&#39;])) display(HTML(image[&#39;html_green&#39;])) display(HTML(image[&#39;html_blue&#39;])) . Sequential Processing . The for loop iterates over the list of images and processes them one at a time, in order. . if __name__ == &quot;__main__&quot;: # setup default images images = image_data() # Sequential Processing for image in images: process_image(image) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (2048, 2048) -- images -- . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (2048, 1497) -- images -- . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (2048, 1536) -- images -- . . Parallel Computing . In parallel or concurrent mode, the ThreadPoolExecutor is used to submit each image to a separate worker thread, allowing multiple images to be processed simultaneously. Multithreading allows multiple concurrent tasks of a process at the same time. The executor.map() method is used to apply the process_image function to each image in the images list. . The order in which the images are processed is not guaranteed, as threads are performed simultaneously. | . import concurrent.futures # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # setup default images images = image_data() # Parallel Processsing # executor allocates threads, it considers core execution capability of machine with concurrent.futures.ThreadPoolExecutor() as executor: executor.map(process_image, images) # order is not predictable print() . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (2048, 1536) -- images -- . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (2048, 1497) -- images -- . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (2048, 2048) -- images -- . . Observing Parallel Computing and Threads . You can observe Processes, CPU Percentage, and Threads with Tools on your machine. Common tools to monitor performance are Activity Monitor on MacOS or Task Manager on Windows. . This example is using top launched in VSCode Terminal. PID is Process ID. | COMMAND is task running on machine. Python is activated when running this Jupyter notebook. | #TH is number of threads. This increases from 15/1 to 18/1 on my machine when running python parallel computing example. | . | . Hacks . Provide answers and thoughts on theoritical question form college board Video in section 4.3. They start at about the 9 minute mark. . Example 1:* It will take 50 seconds, because one processor can run processes Y and Z, taking 40 seconds, while the other runs X, taking 50 seconds. If these two things happen in parallel, this will take 50 seconds.- Example 2 If you were to run both processes on the same processor, it would take the sum of the times of the processes, which is 70 seconds. However, running the two processes in parallel would allow for one processor to take 25 seconds and the other to take 45 seconds, meaning the total amount of time will be 45 seconds. | . | . Data Structures. Build a List Comprehension example . list = [calc(item) for item in items] | . items = [&quot;Small dog&quot;, &quot;small cat&quot;, &quot;big rat&quot;, &quot;medium Bird&quot;] def grow(item): itemList = item.split() return str(&quot;big &quot; + itemList[1]) bigItems = [grow(item) for item in items] print(bigItems) . [&#39;big dog&#39;, &#39;big cat&#39;, &#39;big rat&#39;, &#39;big Bird&#39;] .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/parallelcomputing",
            "relUrl": "/jupyter/parallelcomputing",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "Week 27 Review Ticket",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Team Hacks Wireframes | Scrum Board | Roles | Name Role . Aiden Huynh | Product Owner | . Colin Mills | Scrum Master | . Azeem Khan | Frontend Tech Lead | . Dash Penning | Backend Tech Lead | . Toby Leeder | DevOps | . Nathan Capule | Frontend Developer | . Ishi Singh | Backend Developer | . Ekam Kaire | Backend Developer | . Overall Plan: BinaryGames, teaching binary and other concepts like base64 decryption through games! | Base64 Bomb Defusal (decrypt defusal code) | RGB Guesser (teaches about data? I just did this one for fun won&#39;t even lie) | Logic gates puzzle | Binary math racing | Pipe game | Escape room containing all of the previous games as clues to escape | . . | Pair-Trio Hacks Going to be working on Base64 Defusal and Logic Gates Puzzle Game with Toby Leeder and Dash Penning | . | Big Idea 2 Quiz Score: | Corrections: | None! 😎😎😎 | . . | GitHub Commit Most Recent Commit | Frontend | This is a commit reflecting completion of hacks, organizational changes, and my progress on the RGB Guessing game, in which players guess the RGB value of a randomized color and are then evaluated on their accuracy and given a score. So far I have created the functionality of the game, but I still need to add a couple things: | Timer | Accuracy calculations (Right now its percent error) | Add a limit to questions | Start menu, maybe select # of questions and also an endless mode maybe? | Score calculations | Hints | . . | CPT Plans I am planning to redo the CPT and instead use the RGB Guessing game from above, because it is a better accumulation of all of the coding knowledge I have learned in this class, with the exception of using an API because I don&#39;t know if I&#39;d have to credit the maker of the API or something and I am too lazy to figure it out. | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2023/03/27/Week_27_Hacks.html",
            "relUrl": "/markdown/review_ticket/2023/03/27/Week_27_Hacks.html",
            "date": " • Mar 27, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "RGB Guesser",
            "content": "RGB GUESSER This game sucks! . START | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/projects/2023/03/23/RGB_Guesser.html",
            "relUrl": "/markdown/projects/2023/03/23/RGB_Guesser.html",
            "date": " • Mar 23, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "Week 26 Review Ticket",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Big Idea 2.4a Completed hacks, most notably made a crud program using the oop method and the data from my final project (pair coded with Toby Leeder) | Notes/Questions answered example | . | Big Idea 2.4b Completed hacks | Notes/Questions answered example | . | Main Hacks Screenshot example: | . | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2023/03/20/Week_26_Hacks.html",
            "relUrl": "/markdown/review_ticket/2023/03/20/Week_26_Hacks.html",
            "date": " • Mar 20, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "SQAlchemy Testing",
            "content": "from flask import Flask from flask_sqlalchemy import SQLAlchemy from sqlalchemy.exc import IntegrityError from datetime import datetime import json app = Flask(__name__) database = &#39;sqlite:///inventory.db&#39; app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() db.init_app(app) class Item(db.Model): id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=True, nullable=False) _date = db.Column(db.String(255), unique=False, nullable=False) _action = db.Column(db.String(255), unique=False, nullable=False) _quantity = db.Column(db.Integer, unique=False, nullable=False) def __init__(self, name, date, action, quantity): self._name = name self._date = date self._action = action self._quantity = quantity @property def name(self): return self._name @name.setter def name(self, name): self._name = name @property def date(self): return self._date @date.setter def date(self, date): self._date = date @property def action(self): return self._action @action.setter def action(self, action): self._action = action @property def quantity(self): return self._quantity @quantity.setter def quantity(self, quantity): self._quantity = quantity def create(self): try: db.session.add(self) db.session.commit() return self except IntegrityError: db.session.remove() return None def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;date&quot;: self.date, &quot;action&quot;:self.action, &quot;quantity&quot;: self.quantity } def update(self, name, date, action, quantity): self.name = name self.date = date self.action = action self.quantity = quantity db.session.add(self) db.session.commit() return self def delete(self): db.session.delete(self) db.session.commit() return None def initUsers(): with app.app_context(): db.create_all() i1 = Item(name=&quot;Pencils&quot;, date=&quot;03-15-2023&quot;, action=&quot;Shipped&quot;, quantity=50) i2 = Item(name=&quot;Pens&quot;, date=&quot;12-01-2019&quot;, action=&quot;Delivered&quot;, quantity=3) i3 = Item(name=&quot;Markers&quot;, date=&quot;02-05-2020&quot;, action=&quot;In Transit&quot;, quantity=80) i4 = Item(name=&quot;Highlighters&quot;, date=&quot;01-15-2022&quot;, action=&quot;Shipped&quot;, quantity=7) i5 = Item(name=&quot;Crayons&quot;, date=&quot;03-15-2021&quot;, action=&quot;Processing&quot;, quantity=20) items = [i1, i2, i3, i4, i5] for item in items: try: object = item.create() print(f&quot;Created new item {object.name}&quot;) except: print(f&quot;Records exist item {item.name}, or error.&quot;) def dateCheck(date): try: datetime.strptime(date, &quot;%m-%d-%Y&quot;) return True except ValueError: return False def create(): nameChecked = False dateChecked = False actionChecked = False quantityChecked = False name = input(&quot;Enter the name of the new item&quot;) while nameChecked == False: if name == &quot;&quot;: print(&quot;You must enter a name.&quot;) name = input(&quot;Enter the name of the new item&quot;) else: nameChecked = True date = input(&quot;Enter the date of the action&quot;) while dateChecked == False: if dateCheck(date): dateChecked = True else: print(&quot;Invalid format for the date, please use MM-DD-YYYY (example for may 12, 2022: 05-12-2022)&quot;) date = input(&quot;Enter the date of the action&quot;) action = input(&quot;Enter the action&quot;) while actionChecked == False: if action == &quot;&quot;: print(&quot;You must enter an action.&quot;) action = input(&quot;Enter the action&quot;) else: actionChecked = True quantity = input(&quot;Enter the quantity of the item&quot;) while quantityChecked == False: try: quantity = int(quantity) quantityChecked = True except ValueError: print(&quot;You must enter a number for quantity.&quot;) quantity = input(&quot;Enter the quantity of the item&quot;) item = Item(name=name, date=date, action=action, quantity=quantity) with app.app_context(): try: object = item.create() print(&quot;Created n&quot;, object.read()) except: print(f&quot;Unknown error name {name}&quot;) def read(): jsonData = [] with app.app_context(): data = Item.query.all() for item in data: jsonData.append(item.read()) output = json.dumps(jsonData, indent=2) print(output) def update(): itemCheck = False name = input(&quot;Enter the name of the item you would like to update:&quot;) while itemCheck == False: emptyList = [] with app.app_context(): data = Item.query.all() for item in data: if item.name == name: selected = item else: emptyList.append(item) if len(emptyList) == len(data): input(&quot;Item not found, please enter a valid item name&quot;) else: itemCheck = True nameChecked = False dateChecked = False actionChecked = False quantityChecked = False name = input(&quot;Enter the new name of the item&quot;) while nameChecked == False: if name == &quot;&quot;: print(&quot;You must enter a name.&quot;) name = input(&quot;Enter the new name of the item&quot;) else: nameChecked = True date = input(&quot;Enter the new date of the action&quot;) while dateChecked == False: if dateCheck(date): dateChecked = True else: print(&quot;Invalid format for the date, please use MM-DD-YYYY (example for may 12, 2022: 05-12-2022)&quot;) date = input(&quot;Enter the new date of the action&quot;) action = input(&quot;Enter the new action&quot;) while actionChecked == False: if action == &quot;&quot;: print(&quot;You must enter an action.&quot;) action = input(&quot;Enter the new action&quot;) else: actionChecked = True quantity = input(&quot;Enter the new quantity of the item&quot;) while quantityChecked == False: try: quantity = int(quantity) quantityChecked = True except ValueError: print(&quot;You must enter a number for quantity.&quot;) quantity = input(&quot;Enter the new quantity of the item&quot;) with app.app_context(): try: selected.update(name, date, action, quantity) print(&quot;Updated n&quot;, selected.read()) except: print(f&quot;Unknown error name {name}&quot;) def delete(): itemCheck = False name = input(&quot;Enter the name of the item you would like to update:&quot;) while itemCheck == False: emptyList = [] with app.app_context(): data = Item.query.all() for item in data: if item.name == name: selected = item else: emptyList.append(item) if len(emptyList) == len(data): input(&quot;Item not found, please enter a valid item name&quot;) else: itemCheck = True with app.app_context(): selected.delete() print(&quot;Deleted: n&quot;, selected.read()) def CRUD(x=&quot;0&quot;): if x == &quot;bad&quot;: return operation = (input(&#39;&quot;&#39; + x + &#39;&quot; is not a valid operation. n Please only enter: C (Create), R (Read), U (Update), D (Delete)&#39;)).lower() if x != &quot;0&quot; else (input(&quot;Enter: C (Create), R (Read), U (Update), D (Delete)&quot;)).lower() if operation == &quot;c&quot; or operation == &quot;create&quot;: create() elif operation == &quot;r&quot; or operation == &quot;read&quot;: read() elif operation == &quot;u&quot; or operation == &quot;update&quot;: update() elif operation == &quot;d&quot; or operation == &quot;delete&quot;: delete() elif len(operation) == 0: return else: CRUD(operation) return CRUD() CRUD() . You must enter a name. Invalid format for the date, please use MM-DD-YYYY (example for may 12, 2022: 05-12-2022) Invalid format for the date, please use MM-DD-YYYY (example for may 12, 2022: 05-12-2022) Invalid format for the date, please use MM-DD-YYYY (example for may 12, 2022: 05-12-2022) Invalid format for the date, please use MM-DD-YYYY (example for may 12, 2022: 05-12-2022) Invalid format for the date, please use MM-DD-YYYY (example for may 12, 2022: 05-12-2022) Invalid format for the date, please use MM-DD-YYYY (example for may 12, 2022: 05-12-2022) Invalid format for the date, please use MM-DD-YYYY (example for may 12, 2022: 05-12-2022) Invalid format for the date, please use MM-DD-YYYY (example for may 12, 2022: 05-12-2022) Invalid format for the date, please use MM-DD-YYYY (example for may 12, 2022: 05-12-2022) Invalid format for the date, please use MM-DD-YYYY (example for may 12, 2022: 05-12-2022) Created {&#39;id&#39;: 13, &#39;name&#39;: &#39;fasdfaf&#39;, &#39;date&#39;: &#39;03-20-2020&#39;, &#39;action&#39;: &#39;123&#39;, &#39;quantity&#39;: 123} .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/sqlalchemytest",
            "relUrl": "/jupyter/sqlalchemytest",
            "date": " • Mar 14, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . Each Tri 2 Final Project should be an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? . * . What is the purpose of identity Column in SQL database? * | What is the purpose of a primary key in SQL database? indexing | . | What are the Data Types in SQL table? variables, strings, integers | . | . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_name&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_uid&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (3, &#39;_password&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (4, &#39;_dob&#39;, &#39;DATE&#39;, 0, None, 0) . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? A database that you connect to. | . | Same for cursor object? | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? | Is &quot;results&quot; an object? How do you know? | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compore create() in both SQL lessons. What is better or worse in the two implementations? The imperative style is much more readable but the OOP style is more concise. | . | Explain purpose of SQL INSERT. Is this the same as User init? Adds data to the table, user init creates the object | . | . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() # create() . A new user record aidenhuynh has been created . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? changes the password to a preset if the password is too short, because it would be easy to guess/hack | . | Explain try/except, when would except occur? Try tests a block of code and if it fails, it runs except instead | . | What code seems to be repeated in each of these examples to point, why is it repeated? cursor and conn keep getting redefined to make sure that it is up to date with the sqlite.db file | . | . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() # update() . The row with user id aidenhuynh the password has been hacked . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? Yes, because you might accidentally permanently delete data with no way of getting it bac | . | In the print statemements, what is the &quot;f&quot; and what does {uid} do? It&#39;s a simpler way of combining strings and variables | {uid} just writes out the value of the uid variable | instead of print(&quot;cool string &quot; + var) you can do print(f&quot;cool string {var}&quot;) | . | . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() # delete() . The row with uid aidenhuynh was successfully deleted . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? | Could you refactor this menu? Make it work with a List? | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) # if operation.lower() == &#39;c&#39;: # create() # elif operation.lower() == &#39;r&#39;: # read() # elif operation.lower() == &#39;u&#39;: # update() # elif operation.lower() == &#39;d&#39;: # delete() # elif operation.lower() == &#39;s&#39;: # schema() # elif len(operation)==0: # Escape Key # return # rewritten with lists operations = {&quot;c&quot;:create(), &quot;r&quot;:read(), &quot;u&quot;:update(), &quot;d&quot;:delete()} unused = [] for method in operations: if operation == method: operations[method] else: unused.append(method) if len(unused) == 4: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu # Repeats running menu because of recursive loop (calls itself within) try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Error while executing the INSERT: UNIQUE constraint failed: users._uid Perform Jupyter &#39;Run All&#39; prior to starting menu . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In this implementation, do you see procedural abstraction? | In 2.4a or 2.4b lecture Do you see data abstraction? Complement this with Debugging example. Yea, data from database is being represented through read operations | . | Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. | . | . Reference... sqlite documentation .",
            "url": "https://aidenhuynh.github.io/CS_Swag/techtalk/2023/03/14/Unit2-4b.html",
            "relUrl": "/techtalk/2023/03/14/Unit2-4b.html",
            "date": " • Mar 14, 2023"
        }
        
    
  
    
        ,"post21": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. Use Debugging through these examples to examine Objects created in Code. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? Provide a defintion of purpose. Flask app object | SQLAlchemy db object | | . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # I used this on my Flask API for tri-2 final project # acts as a central object # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # defines the SQLAlchemy object # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class, purpose and defintion. class User | db.Model inheritance | init method | @property, @&lt;column&gt;.setter | create, read, update, delete methods | . | . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): # user object with attributes of uid, dob, etc. __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): # initializes object by getting and assigning values of attributes to itself self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property # property decorators define properties def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter # setters change values of attributes in objects def name(self, name): self._name = name # a getter method, extracts uid from object @property # getters retrieve values of attributes in objects def uid(self): return self._uid # a setter function, allows uid to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional method used for setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter against stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, a string represents date outside object @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob setter, verifies date type before it is set or default to today @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # age is calculated field, age is returned according to date of birth @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): # adds data to the object try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): # displays data in the object return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): # changes data in the object &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): # removes data from the object db.session.delete(self) db.session.commit() return None . /Users/Aiden/opt/anaconda3/lib/python3.9/site-packages/flask_sqlalchemy/model.py:121: SAWarning: This declarative base already contains a class with the same class name and module name as __main__.User, and will be replaced in the string-lookup table. KeyboardInterrupt . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? Create All Tables from db Object | User Object Constructors | Try / Except | | . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: # attempts to run code, and if there is an error to moves on to the except &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Created new uid toby Created new uid niko Created new uid lex Created new uid whit Created new uid indi Created new uid raven . Check for given Credentials in users table in sqlite.db . Use of ORM (Object relational model) Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following User.query.filter_by | user.password | | . def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() # searches for the user with the matching uid return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): # checks if the password matches return True return False check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . True . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following user.find_by_uid() and try/except | user = User(...) | user.dob and try/except | user.create() and try/except | | . def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) # finds the user given a uid try: #tests if user is found it will run this print(&quot;Found n&quot;, user.read()) return except: # if not then it tries again pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: # attempts to set the dob of the user, and if it does not work, it will change and try again user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dob}&quot;) # write object to database with app.app_context(): try: # tries to make object using uid, and if uid error then return error msg object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Invalid date require YYYY-mm-dd, date defaulted to 03-15-2023 Created {&#39;id&#39;: 7, &#39;name&#39;: &#39;&#39;, &#39;uid&#39;: &#39;&#39;, &#39;dob&#39;: &#39;03-15-2023&#39;, &#39;age&#39;: 0} . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following User.query.all | json_ready assignment, google List Comprehension | | . # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . KeyboardInterrupt . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Change blog to your own database. | Add additional CRUD Add Update functionality to this blog. | Add Delete functionality to this blog. | . | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/sqlalchemy-a",
            "relUrl": "/jupyter/sqlalchemy-a",
            "date": " • Mar 14, 2023"
        }
        
    
  
    
        ,"post22": {
            "title": "Week 25 Review Ticket",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Big Idea 2.2 Completed hacks, most notably made a procedure to change images color to red, green, blue, or gray depending on user input | Notes/Questions answered example | Hacks example | . | Big Idea 2.3 Completed hacks, most notably used pandas to view a video game database. | Notes/Questions answered example | Hacks example | Can use different data sets for my CPT instead of inventory, more like my first project involving video game data. | . | MCQ Test #3 Score: 44/50 | Example of corrected problem | . | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2023/03/10/Week_25_Hacks.html",
            "relUrl": "/markdown/review_ticket/2023/03/10/Week_25_Hacks.html",
            "date": " • Mar 10, 2023"
        }
        
    
  
    
        ,"post23": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Files To Get . Save this file to your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-03-09-AP-unit2-3.ipynb . Save these files into a subfolder named files in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/data.csv . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/grade.json . Save this image into a subfolder named images in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/images/table_dataframe.png . Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . import pandas as pd # reads the JSON file and converts it to a Pandas DataFrame df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # Junior to 11 and 9th grade to 9 and nil to 0 # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? # From poor inputs like if there was a negative GPA entered . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement # print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) # Hiding because output was too big for jupyter (i know i can change settings but i dont want to) # testies print(df[[&#39;GPA&#39;, &#39;Year in School&#39;]]) . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 GPA Year in School 0 3.57 12 1 4.00 10 2 2.78 12 3 3.45 11 4 4.75 Junior 5 3.33 20 6 2.95 12 7 3.90 10 8 3.15 9th Grade 9 2.80 9 10 3.45 11 11 2.75 10 . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order # print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) print(df[[&quot;GPA&quot;, &quot;Student ID&quot;]].sort_values(by=[&#39;GPA&#39;])) . Student ID Year in School GPA 11 456 10 2.75 2 578 12 2.78 9 nil 9 2.80 6 145 12 2.95 8 235 9th Grade 3.15 5 313 20 3.33 3 469 11 3.45 10 469 11 3.45 0 123 12 3.57 7 167 10 3.90 1 246 10 4.00 4 324 Junior 4.75 GPA Student ID 11 2.75 456 2 2.78 578 9 2.80 nil 6 2.95 145 8 3.15 235 5 3.33 313 3 3.45 469 10 3.45 469 0 3.57 123 7 3.90 167 1 4.00 246 4 4.75 324 . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary pets = { &quot;dogs&quot;:{ &quot;0&quot;:&quot;Rocky&quot; }, &quot;fish&quot;:{ &quot;0&quot;:&quot;Bentley&quot; }, &quot;birds&quot;:{ &quot;0&quot;:&quot;Pollo&quot; }, &quot;bunnies&quot;:{ &quot;0&quot;:&quot;Ozzie&quot;, &quot;1&quot;:&quot;Juno&quot;, &quot;2&quot;:&quot;Yo-yo&quot;, &quot;3&quot;:&quot;Little&quot; } } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(pets) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(pets, index=[&quot;0&quot;, &quot;2&quot;, &quot;1&quot;, &quot;3&quot;]) print(df) . -Dict_to_DF dogs fish birds bunnies 0 Rocky Bentley Pollo Ozzie 1 NaN NaN NaN Juno 2 NaN NaN NaN Yo-yo 3 NaN NaN NaN Little -Dict_to_DF_labels-- dogs fish birds bunnies 0 Rocky Bentley Pollo Ozzie 2 NaN NaN NaN Yo-yo 1 NaN NaN NaN Juno 3 NaN NaN NaN Little . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;1&quot;, &quot;3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;0&quot;]) . -Examine Selected Rows dogs fish birds bunnies 1 NaN NaN NaN Juno 3 NaN NaN NaN Little --Examine Single Row-- dogs Rocky fish Bentley birds Pollo bunnies Ozzie Name: 0, dtype: object . Pandas DataFrame Information . print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 4 entries, 0 to 3 Data columns (total 4 columns): # Column Non-Null Count Dtype -- -- 0 dogs 1 non-null object 1 fish 1 non-null object 2 birds 1 non-null object 3 bunnies 4 non-null object dtypes: object(4) memory usage: 332.0+ bytes None . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . country_name cases deaths 0 USA 82,649,779 1,018,316 1 India 43,057,545 522,193 2 Brazil 30,345,654 662,663 3 France 28,244,977 145,020 4 Germany 24,109,433 134,624 5 UK 21,933,206 173,352 . import pandas # Video game data can be swapped out for inventory data in my cpt to make something that actually relates to me #read video game stats of characters and their stats to see the best ones, sorted by winrate dataFrame = pandas.read_csv(&#39;files/lolstats.csv&#39;).sort_values(by=[&#39;Win %&#39;], ascending=False) print(&quot;-Top 10 Top Lane Champions- n&quot;) print(dataFrame[dataFrame.Role == &quot;TOP&quot;].loc[:, ~dataFrame.columns.isin([&#39;Trend&#39;, &#39;Score&#39;])].head(10).to_string(index=False)) # [df.Role == &quot;TOP&quot;] limits data to characters in the &quot;Top lane&quot; role, which is the role I play in the game # .loc removes unnecessary columns that tell me nothing # head(10) shows the top 10 &quot;champions&quot; (characters) # to_string(index=False) removes index numbers # Another useful command is: # print(dataFrame[(dataFrame.Role == &quot;TOP&quot;) &amp; ((dataFrame.Tier == &quot;S+&quot;) | (dataFrame.Tier == &quot;S&quot;))].loc[:, ~dataFrame.columns.isin([&#39;Trend&#39;, &#39;Score&#39;])].head(10).to_string(index=False)) # This limits the selection to only high tier characters # Tier determines the potential of a character, descending in order of S+, S, A, B, C, D # With this information, I now know which characters to play in the game to win the most . -Top 10 Top Lane Champions- Name Class Role Tier Win % Role % Pick % Ban % KDA Kled Fighter TOP A 52.73% 90.09% 2.42% 1.27% 2.36 Olaf Fighter TOP S 52.53% 85.86% 3.38% 3.01% 1.87 Dr. Mundo Marksman TOP A 52.49% 87.61% 2.84% 3.91% 1.91 Shen Tank TOP S 52.14% 87.34% 4.23% 0.95% 3.02 Singed Tank TOP A 52.01% 72.80% 1.79% 0.57% 2.04 Mordekaiser Fighter TOP S+ 51.79% 73.51% 6.39% 13.07% 1.92 Sion Tank TOP S 51.64% 84.73% 5.19% 1.18% 1.82 Jax Fighter TOP S+ 51.62% 88.63% 11.05% 25.09% 1.73 Ornn Tank TOP S 51.58% 93.13% 3.60% 0.52% 2.47 Yorick Fighter TOP A 51.49% 91.38% 3.50% 3.45% 1.57 . Hacks . Early Seed award . Add this Blog to you own Blogging site. | Have all lecture files saved to your files directory before Tech Talk starts. Have data.csv open in vscode. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Fambulous. | . When choosing a data set, think about the following:- Does it have a good sample size? - Is there bias in the data? - Does the data set need to be cleaned? - What is the purpose of the data set? - ... . Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) | . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. Here are some suggestions:- Titanic Dataset: This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. . Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset:- Kaggle: The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. . UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . Titanic Data . Look at a sample of data. . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) print(titanic_data.columns) # titanic data set print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns . Titanic Data Index([&#39;survived&#39;, &#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;fare&#39;, &#39;embarked&#39;, &#39;class&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;deck&#39;, &#39;embark_town&#39;, &#39;alive&#39;, &#39;alone&#39;], dtype=&#39;object&#39;) survived pclass sex age sibsp parch class fare 0 0 3 male 22.0 1 0 Third 7.2500 1 1 1 female 38.0 1 0 First 71.2833 2 1 3 female 26.0 0 0 Third 7.9250 3 1 1 female 35.0 1 0 First 53.1000 4 0 3 male 35.0 0 0 Third 8.0500 .. ... ... ... ... ... ... ... ... 886 0 2 male 27.0 0 0 Second 13.0000 887 1 1 female 19.0 0 0 First 30.0000 888 0 3 female NaN 1 2 Third 23.4500 889 1 1 male 26.0 0 0 First 30.0000 890 0 3 male 32.0 0 0 Third 7.7500 embark_town 0 Southampton 1 Cherbourg 2 Southampton 3 Southampton 4 Southampton .. ... 886 Southampton 887 Southampton 888 Southampton 889 Cherbourg 890 Queenstown [891 rows x 9 columns] . Use Pandas to clean the data. Most analysis, like Machine Learning or even Pandas in general like data to be in standardized format. This is called &#39;Training&#39; or &#39;Cleaning&#39; data. . # Preprocess the data from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(td) . survived pclass sex age sibsp parch fare alone embarked_C 0 0 3 1 22.0 1 0 7.2500 0 0.0 1 1 1 0 38.0 1 0 71.2833 0 1.0 2 1 3 0 26.0 0 0 7.9250 1 0.0 3 1 1 0 35.0 1 0 53.1000 0 0.0 4 0 3 1 35.0 0 0 8.0500 1 0.0 .. ... ... ... ... ... ... ... ... ... 705 0 2 1 39.0 0 0 26.0000 1 0.0 706 1 2 0 45.0 0 0 13.5000 1 0.0 707 1 1 1 42.0 0 0 26.2875 1 0.0 708 1 1 0 22.0 0 0 151.5500 1 0.0 710 1 1 0 24.0 0 0 49.5042 1 1.0 embarked_Q embarked_S 0 0.0 1.0 1 0.0 0.0 2 0.0 1.0 3 0.0 1.0 4 0.0 1.0 .. ... ... 705 0.0 1.0 706 0.0 1.0 707 1.0 0.0 708 0.0 1.0 710 0.0 0.0 [564 rows x 11 columns] . The result of &#39;Training&#39; data is making it easier to analyze or make conclusions. In looking at the Titanic, as you clean you would probably want to make assumptions on likely chance of survival. . This would involve analyzing various factors (such as age, gender, class, etc.) that may have affected a person&#39;s chances of survival, and using that information to make predictions about whether an individual would have survived or not. . Data description:- Survival - Survival (0 = No; 1 = Yes). Not included in test.csv file. - Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd) . Name - Name | Sex - Sex | Age - Age | Sibsp - Number of Siblings/Spouses Aboard | Parch - Number of Parents/Children Aboard | Ticket - Ticket Number | Fare - Passenger Fare | Cabin - Cabin | Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton) | . | Perished Mean/Average . | . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . survived 0.000000 pclass 2.464072 sex 0.844311 age 31.073353 sibsp 0.562874 parch 0.398204 fare 24.835902 alone 0.616766 embarked_C 0.185629 embarked_Q 0.038922 embarked_S 0.775449 dtype: float64 . Survived Mean/Average | . print(td.query(&quot;survived == 1&quot;).mean()) . survived 1.000000 pclass 1.878261 sex 0.326087 age 28.481522 sibsp 0.504348 parch 0.508696 fare 50.188806 alone 0.456522 embarked_C 0.152174 embarked_Q 0.034783 embarked_S 0.813043 dtype: float64 . Survived Max and Min Stats . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . survived 1.0000 pclass 3.0000 sex 1.0000 age 80.0000 sibsp 4.0000 parch 5.0000 fare 512.3292 alone 1.0000 embarked_C 1.0000 embarked_Q 1.0000 embarked_S 1.0000 dtype: float64 survived 1.00 pclass 1.00 sex 0.00 age 0.75 sibsp 0.00 parch 0.00 fare 0.00 alone 0.00 embarked_C 0.00 embarked_Q 0.00 embarked_S 0.00 dtype: float64 . Machine Learning . From Tutorials Point%20is,a%20consistence%20interface%20in%20Python). Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python.&gt; Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. Decision Trees, prediction by a piecewise constant approximation. - Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) . DecisionTreeClassifier Accuracy: 0.7411764705882353 LogisticRegression Accuracy: 0.788235294117647 . /Users/Aiden/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1): STOP: TOTAL NO. of ITERATIONS REACHED LIMIT. Increase the number of iterations (max_iter) or scale the data as shown in: https://scikit-learn.org/stable/modules/preprocessing.html Please also refer to the documentation for alternative solver options: https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression n_iter_i = _check_optimize_result( .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/pandas",
            "relUrl": "/jupyter/pandas",
            "date": " • Mar 8, 2023"
        }
        
    
  
    
        ,"post24": {
            "title": "MCQ Test 3 Reflection",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Score: 44/50 . . Corrections . Q2: Compromising a user’s personal privacy . Which of the following has the greatest potential for compromising a user’s personal privacy? Original answer: | The Internet Protocol (IP) address of the user’s computer | . Correct answer: | A group of cookies stored by the user’s Web browser | . Explanation | Cookies may include tons of data about the user, including usernames and passwords to accounts, whereas the IP Address does not have information relating to the user. | . . Q28: Remove first and last two characters of string . Consider the following procedures for string manipulation. Procedure Call Explanation . concat(str1, str2) | Returns a single string consisting of str1 followed by str2. For example, concat(&quot;key&quot;, &quot;board&quot;) returns &quot;keyboard&quot;. | . substring(str, start, length) | Returns a substring of consecutive characters from str, starting with the character at position start and containing length characters. The first character of str is located at position 1. For example, substring(&quot;delivery&quot;, 3, 4) returns &quot;live&quot;. | . len(str) | Returns the number of characters in str. For example, len(&quot;pizza&quot;) returns 5. | . Original answer: | newString ← substring(oldString, 3, len(oldString) - 2) | tempString ← substring(oldString, 3, len(oldString) - 2) newString ← substring(tempString, 1, len(tempString) - 2) | . Correct answer: | newString ← substring(oldString, 3, len(oldString) - 4) | tempString ← substring(oldString, 3, len(oldString) - 2) newString ← substring(tempString, 1, len(tempString) - 2) | . Explanation | The original answer is incorrect because it will only remove the first two characters of the string. The correct answer is right because the substring with second parameter of 3 makes it so the first 2 letters are removed, then the third parameter removes the last 2 by ending at the length of the string minus 4, because 4 characters are removed in total. | . . Q40: Move robot back to starting place . The following grid contains a robot represented as a triangle, which is initially in the bottom-left square of the grid and facing the top of the grid. The robot can move into a white or a gray square but cannot move into a black region. The following code segment implements an algorithm that moves the robot from its initial position to the gray square and facing the top of the grid. When the robot reaches the gray square, it turns around and faces the bottom of the grid. Which of the following changes, if any, should be made to the code segment to move the robot back to its original position in the bottom-left square of the grid and facing toward the bottom of the grid? Original answer: | Interchange the ROTATE_RIGHT and the ROTATE_LEFT blocks. | . Correct answer: | No change is needed; the algorithm is correct as is. | . Explanation | With the original answer, the robot would leave the boundaries. I honestly don&#39;t even know why I picked that because the correct answer is so obviously correct. | . . Q41: Using binary search on list of genetic codes . A large number of genetic codes are stored as binary values in a list. Which one of the following conditions must be true in order for a researcher to obtain the correct result when using a binary search algorithm to determine if a given genetic code is in the list? Original answer: | The genetic codes must be converted from binary to decimal numbers. | . Correct answer: | The list must be sorted based on the genetic code values. | . Explanation | Numerical base does not matter in binary search, as long as they are sorted. | . . Q49: Crowd Flow Simulation . A city planner is using simulation software to study crowd flow out of a large arena after an event has ended. The arena is located in an urban city. Which of the following best describes a limitation of using a simulation for this purpose? Original answer: | The model used by the simulation software cannot be modified once the simulation has been used. | . Correct answer: | The model used by the simulation software often omits details so that it is easier to implement. | . Explanation | Modification is one of the benefits of simulations so I have no idea why I picked this. However, simulations lack complete accuracy because they do not account for every possible factor and thus they are not completely detailed. | . . Q50: Which algorithm runs in a reasonable time . A computer scientist is analyzing four different algorithms used to sort a list. The table below shows the number of steps each algorithm took to sort lists of different sizes. List Size Number of Stepsfor Algorithm A Number of Stepsfor Algorithm B Number of Stepsfor Algorithm C Number of Stepsfor Algorithm D . 1 | 10 | 2 | 1 | 1 | . 2 | 20 | 4 | 2 | 4 | . 3 | 30 | 8 | 6 | 9 | . 4 | 40 | 16 | 24 | 16 | . 5 | 50 | 32 | 120 | 25 | . Based on the values in the table, which of the algorithms appear to run in reasonable time? Select two answers. Original answer: | Algorithm B | Algorithm C | . Correct answer: | Algorithm A | Algorithm D | . Explanation | Misunderstood the question. A and D increase in steps the slowest and thus require less steps than the other two algorithms | . .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/hacks/2023/03/07/mcq3.html",
            "relUrl": "/markdown/hacks/2023/03/07/mcq3.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post25": {
            "title": "Data Compression",
            "content": "Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. - Clouds Impression . Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Python Libraries and Concepts used for Jupyter and Files/Directories . Introduction to displaying images in Jupyter notebook . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? ls and cd | . | What are the command you use in Windows terminal to access files? ls (sometimes and cd | . | What are some of the major differences? Windows cannot use ls in command prompt but it can in PowerShell. | . | . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? It is crucial to access the image file otherwise it will not be able to display the image. | . | How does the meta data source and label relate to Unit 5 topics? Credit is given to the original creators which relates to Big Idea 5.5 that talks about legal concerns with licensing. These images are probably under a creative commons license because they can be used but only with credit. | . | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? IPython has built in tools to display graphic elements and access data. | . | . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;../images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpeg&quot;}, {&#39;source&#39;: &quot;VectorStock&quot;, &#39;label&#39;: &quot;smiley&quot;, &#39;file&#39;: &quot;smiley.jpeg&quot;}, ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . Translate first 3 letters of your name to Base64. &quot;Aid&quot; -&gt; &quot;65 105 100&quot; -&gt; 01000001 01101001 01100100 -&gt; 010000010110100101100100 -&gt; 010000 010110 100101 100100 -&gt; 16 22 37 36 -&gt; QWlk | . | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? Watching a video on YouTube and the video stops to load more frames. | . | From your consumer experience, what effects have you experienced from buffering? Irritation from having to wait a long time for loading. | . | How do these effects apply to images? Trying to view a very large image causes the entire page to freeze for a bit. | . | . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? Yes | . | Describe Grey Scale algorithm in English or Pseudo code? * | Describe scale image? What is before and after on pixels in three images? | Is scale image a type of compression? If so, line it up with College Board terms described? | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;../images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpeg&quot;}, {&#39;source&#39;: &quot;VectorStock&quot;, &#39;label&#39;: &quot;Smiley&quot;, &#39;file&#39;: &#39;smiley.jpeg&#39;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- original image -- . grey image - . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- original image -- . grey image - . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- original image -- . grey image - . - meta data -- Smiley VectorStock JPEG RGB Original size: (941, 1080) Scaled size: (320, 367) -- original image -- . grey image - . . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL:accesses image- base64: encodes image into base64 | numpy: turns encoded image into an array | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np def colorCheck(): color = input(&quot;Choose a color to change the images to (Red, green, blue, or gray)&quot;).lower() promptAnswered = False while promptAnswered == False: if color == &quot;red&quot; or color == &quot;green&quot; or color == &quot;blue&quot; or color == &quot;gray&quot; or color == &quot;grey&quot;: promptAnswered = True print(&quot;Chosen color for the images: &quot; + color) return color else: promptAnswered = False color = input(&quot;Choose a VALID color to change image to (Red, green, blue, or gray)&quot;).lower() newscale = colorCheck() class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted if newscale == &quot;red&quot;: for pixel in numpy: # red scale YIPPEE!!! pixel[0] = 255 #set R value to maximum for big reds average = (pixel[1] + pixel[2]) // 2 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((pixel[0], average, average, pixel[3])) # PNG format else: grey_data.append((pixel[0], average, average)) # end for loop for pixels elif newscale == &quot;green&quot;: for pixel in numpy: # green scale YIPPEE!!! pixel[1] = 255 #set R value to maximum for big reds average = (pixel[0] + pixel[2]) // 2 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, pixel[1], average, pixel[3])) # PNG format else: grey_data.append((average, pixel[1], average)) # end for loop for pixels elif newscale == &quot;blue&quot;: for pixel in numpy: # blue scale YIPPEE!!! pixel[2] = 255 #set R value to maximum for big reds average = (pixel[1] + pixel[0]) // 2 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, pixel[2], pixel[3])) # PNG format else: grey_data.append((average, average, pixel[2])) # end for loop for pixels else: for pixel in numpy: # gray scale YIPPEE!!! pixel[0] = 255 #set R value to maximum for big reds average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;../images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpeg&quot;}, {&#39;source&#39;: &quot;VectorStock&quot;, &#39;label&#39;: &quot;Smiley&quot;, &#39;file&#39;: &#39;smiley.jpeg&#39;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; color scaled image &quot;) display(HTML(ido.html_grey)) print() . KeyboardInterrupt Traceback (most recent call last) /Users/Aiden/CS_Swag/_notebooks/2023-03-07-compression.ipynb Cell 10 in &lt;cell line: 20&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/Aiden/CS_Swag/_notebooks/2023-03-07-compression.ipynb#X12sZmlsZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; promptAnswered = False &lt;a href=&#39;vscode-notebook-cell:/Users/Aiden/CS_Swag/_notebooks/2023-03-07-compression.ipynb#X12sZmlsZQ%3D%3D?line=17&#39;&gt;18&lt;/a&gt; color = input(&#34;Choose a VALID color to change image to (Red, green, blue, or gray)&#34;).lower() &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/Aiden/CS_Swag/_notebooks/2023-03-07-compression.ipynb#X12sZmlsZQ%3D%3D?line=19&#39;&gt;20&lt;/a&gt; newscale = colorCheck() &lt;a href=&#39;vscode-notebook-cell:/Users/Aiden/CS_Swag/_notebooks/2023-03-07-compression.ipynb#X12sZmlsZQ%3D%3D?line=21&#39;&gt;22&lt;/a&gt; class Image_Data: &lt;a href=&#39;vscode-notebook-cell:/Users/Aiden/CS_Swag/_notebooks/2023-03-07-compression.ipynb#X12sZmlsZQ%3D%3D?line=23&#39;&gt;24&lt;/a&gt; def __init__(self, source, label, file, path, baseWidth=320): /Users/Aiden/CS_Swag/_notebooks/2023-03-07-compression.ipynb Cell 10 in colorCheck() &lt;a href=&#39;vscode-notebook-cell:/Users/Aiden/CS_Swag/_notebooks/2023-03-07-compression.ipynb#X12sZmlsZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; else: &lt;a href=&#39;vscode-notebook-cell:/Users/Aiden/CS_Swag/_notebooks/2023-03-07-compression.ipynb#X12sZmlsZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; promptAnswered = False &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/Aiden/CS_Swag/_notebooks/2023-03-07-compression.ipynb#X12sZmlsZQ%3D%3D?line=17&#39;&gt;18&lt;/a&gt; color = input(&#34;Choose a VALID color to change image to (Red, green, blue, or gray)&#34;).lower() File ~/opt/anaconda3/lib/python3.9/site-packages/ipykernel/kernelbase.py:1075, in Kernel.raw_input(self, prompt) 1071 if not self._allow_stdin: 1072 raise StdinNotImplementedError( 1073 &#34;raw_input was called, but this frontend does not support input requests.&#34; 1074 ) -&gt; 1075 return self._input_request( 1076 str(prompt), 1077 self._parent_ident[&#34;shell&#34;], 1078 self.get_parent(&#34;shell&#34;), 1079 password=False, 1080 ) File ~/opt/anaconda3/lib/python3.9/site-packages/ipykernel/kernelbase.py:1120, in Kernel._input_request(self, prompt, ident, parent, password) 1117 break 1118 except KeyboardInterrupt: 1119 # re-raise KeyboardInterrupt, to truncate traceback -&gt; 1120 raise KeyboardInterrupt(&#34;Interrupted by user&#34;) from None 1121 except Exception: 1122 self.log.warning(&#34;Invalid Message:&#34;, exc_info=True) KeyboardInterrupt: Interrupted by user . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/compression",
            "relUrl": "/jupyter/compression",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post26": {
            "title": "Week 24 Review Ticket",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Runtime Links Backend | Frontend | . | Technical Accomplishments A LOT of garbage checking through test() function and alerts | Utilize GET, PUT, PATCH, and DELETE methods for full CRUD (This took most of my time) | Use of localStorage in conjunction with database | Tons of features for optimizing user experience | Search bar | Garbage checking | Favoriting system with options to show only favorites or clear all favorites | When editing, automatically focus on text box with event listeners for Enter key on input and Escape key to revert changes | . Frontend dev stuff (actually doing stuff that fits my role) | Site-wide theme applied and edited to match website | Navbar that darkens on hover | Stars darken on hover, stars, Xs, and editable text changes cursor to indicate that they are interactive | Placeholders to show template for the adding box and placeholders to show what editable text was originally | . . | Create Performance Task Video | Written response | . | Github Statistics | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2023/02/26/Week_24_Hacks.html",
            "relUrl": "/markdown/review_ticket/2023/02/26/Week_24_Hacks.html",
            "date": " • Feb 26, 2023"
        }
        
    
  
    
        ,"post27": {
            "title": "Create Performance Task",
            "content": "Video . Written Portion . 3a) . 3ai) . This program is intended to help users like small businesses easily and quickly find information about items they have in storage to maintain stock. . 3aii) . The user searches for pencils and different items from the list matching that name are returned on the table with varying data about them. . 3aiii) . The user inputs “Pencils” into the searchbar and only the matching items that were in the table are outputted to the updated table. . 3b) . 3bi) . var data = [ { &quot;id&quot;:1, &quot;date&quot;:&quot;01-05-2023&quot;, &quot;action&quot;:&quot;Shipped&quot;, &quot;item&quot;:&quot;Pencils&quot;, &quot;quantity&quot;:&quot;1500&quot;, }, { &quot;id&quot;:2, &quot;date&quot;:&quot;02-07-2023&quot;, &quot;action&quot;:&quot;Delivered&quot;, &quot;item&quot;:&quot;Pens&quot;, &quot;quantity&quot;:&quot;1000&quot;, }, { &quot;id&quot;:3, &quot;date&quot;:&quot;02-02-2023&quot;, &quot;action&quot;:&quot;Packaged&quot;, &quot;item&quot;:&quot;Markers&quot;, &quot;quantity&quot;:&quot;300&quot;, }, { &quot;id&quot;:4, &quot;date&quot;:&quot;01-15-2023&quot;, &quot;action&quot;:&quot;In Transit&quot;, &quot;item&quot;:&quot;Highlighters&quot;, &quot;quantity&quot;:&quot;100&quot;, }, { &quot;id&quot;:5, &quot;date&quot;:&quot;01-05-2023&quot;, &quot;action&quot;:&quot;Shipped&quot;, &quot;item&quot;:&quot;Pencils&quot;, &quot;quantity&quot;:&quot;1500&quot;, }, { &quot;id&quot;:6, &quot;date&quot;:&quot;02-07-2023&quot;, &quot;action&quot;:&quot;Delivered&quot;, &quot;item&quot;:&quot;Pens&quot;, &quot;quantity&quot;:&quot;1000&quot;, }, { &quot;id&quot;:7, &quot;date&quot;:&quot;02-02-2023&quot;, &quot;action&quot;:&quot;Packaged&quot;, &quot;item&quot;:&quot;Markers&quot;, &quot;quantity&quot;:&quot;300&quot;, }, { &quot;id&quot;:8, &quot;date&quot;:&quot;01-15-2023&quot;, &quot;action&quot;:&quot;In Transit&quot;, &quot;item&quot;:&quot;Highlighters&quot;, &quot;quantity&quot;:&quot;100&quot;, }, { &quot;id&quot;:9, &quot;date&quot;:&quot;01-05-2023&quot;, &quot;action&quot;:&quot;Shipped&quot;, &quot;item&quot;:&quot;Pencils&quot;, &quot;quantity&quot;:&quot;1500&quot;, } ] . 3bii) . searchBar.addEventListener(&quot;keyup&quot;, function() { search(dataList) } ) . 3biii) . The list being used in section 3bii is called dataList . 3biv) . dataList contains dictionaries corresponding to different items and their properties, including their name, the associated action, the date in which this action occurred, and the quantity of the item. . 3bv) . dataList helps manage complexity because it allows the algorithm (shown in section 3ci), search(list) to compare the input to the names of every item in the list in one loop rather than making individual if statements for every single dictionary inside the list. This is especially useful for when there are a much greater number of items, because without the list, this would require an insane amount of if statements in order to check each item. . 3c) . 3ci) . function search(list) { document.getElementById(&#39;bruh&#39;).innerHTML = &quot; &lt;tr&gt; &lt;th style=&#39;width:auto&#39;&gt;&lt;/th&gt; &lt;th style=&#39;width:15%&#39;&gt;Date&lt;/th&gt; &lt;th style=&#39;width:15%&#39;&gt;Item&lt;/th&gt; &lt;th style=&#39;width:13%&#39;&gt;Action&lt;/th&gt; &lt;th style=&#39;width:auto; text-align:right&#39;&gt;Quantity&lt;/th&gt; &lt;th&gt;&lt;/th&gt; &lt;/tr&gt; &quot; results = [] input = document.getElementById(&#39;searchBar&#39;).value.toLowerCase() if (input == &quot;&quot; || input == null) { getItems(dataList) } else { for (let i = 0; i &lt; list.length; i++) { item = list[i][&quot;item&quot;].toLowerCase() if (item.includes(input) == true) { results.push(list[i]) } } if (results.length == 0) { document.getElementById(&#39;bruh&#39;).innerHTML = &quot; &lt;tr&gt; &lt;th style=&#39;width:auto&#39;&gt;&lt;/th&gt; &lt;th style=&#39;width:15%&#39;&gt;Date&lt;/th&gt; &lt;th style=&#39;width:15%&#39;&gt;Item&lt;/th&gt; &lt;th style=&#39;width:13%&#39;&gt;Action&lt;/th&gt; &lt;th style=&#39;width:auto; text-align:right&#39;&gt;Quantity&lt;/th&gt; &lt;th&gt;&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td colspan=&#39;5&#39;&gt;&lt;i&gt;No results found.&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt; &quot; getItems(dataList) } else { getItems(results) } } } . 3cii) . searchBar.addEventListener(&quot;keyup&quot;, function() { search(dataList) } ) . 3ciii) . The procedure search(list) takes the input from the search bar and compares it to each element in the list parameter and takes all that match and replaces the data in the table with these matches. . 3civ) . The procedure first sets changes the HTML of the table (this is referred to as bruh in my code) to be nothing but the header, then creates an empty list called results for the items that pass the check and also creates a variable called input which is just the value of the search bar input. The next part is the algorithm, which first checks if the search bar is empty, in which it just returns the whole list. If the search bar is not empty, it iterates through each dictionary inside of the list parameter. If the value of the item key includes the input variable, then the dictionary is appended to the results list, otherwise, the algorithm simply moves on to the next dictionary in the list, and repeats this process until each dictionary in list has been checked. After, the algorithm checks if the length of results is zero, to account for there being no matches to the search. In this case, all of the data is displayed again with a note that says there were no matches. For when the length of results is not zero, a row is created and added to the innerHTML of the table for each item in results. . 3d) . 3di) . First call: Typing “pencils” into the search bar . Second call: Typing “cars” into the search bar . 3dii) . The first call is testing for when the search matches an item in the list. . The second call is testing for when the search does not match an item in the list. . 3diii) . The first call causes the table to show only rows of items called “Pencils”. . The second call causes the table to show every item in the list with a note at the top that says that there were no matches. .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/projects/2023/02/26/CPT.html",
            "relUrl": "/markdown/projects/2023/02/26/CPT.html",
            "date": " • Feb 26, 2023"
        }
        
    
  
    
        ,"post28": {
            "title": "Word Hunt Solver",
            "content": "",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/projects/2023/02/19/WordHuntSolver.html",
            "relUrl": "/markdown/projects/2023/02/19/WordHuntSolver.html",
            "date": " • Feb 19, 2023"
        }
        
    
  
    
        ,"post29": {
            "title": "Week 22 Review Ticket",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Big Idea 5.5 | Big Idea 5.6 | Week Plans Make an API | Connect API to frontend | Make editing system | Make basic user system | | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2023/02/13/Week_22_Hacks.html",
            "relUrl": "/markdown/review_ticket/2023/02/13/Week_22_Hacks.html",
            "date": " • Feb 13, 2023"
        }
        
    
  
    
        ,"post30": {
            "title": "Week 22 | Peer Grading",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Hackssssssss 🐍🐍🐍🐍 . CPT Planning FE/BE | Frontend demo | Localstorage object used for favoriting | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2023/02/09/peergrading.html",
            "relUrl": "/markdown/2023/02/09/peergrading.html",
            "date": " • Feb 9, 2023"
        }
        
    
  
    
        ,"post31": {
            "title": "Big Idea 5.6",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Big Idea 5.6: Safe Computing . Notes . PII: Personal Identifiable Information General knowledge: Name, email, picture, education, state of residence | Linkedin | . | Safety practices Multi-factor authentication | Encryption Symmetric: One key used to encrypt and decrypt | Asymmetric: Public and private keys to prevent unauthorized use | . | . | Harms of the internet Malware/viruses | Phishing | . | . Hacks . PII is on all of my projects as they all link to my github which has my full name as the username (aidenhuynh) | I feel that PII is beneficial and harmful because I fear about my personal information being leaked to bad people online, but it also makes it easier for employers and college admissions to see my accomplishments. | A good password could be a randomly generated string of at least 8 characters to make it harder to be guessed or memorized by hackers. A bad password contains words or personal information, few characters and no symbols or numbers. | Symmetric encryption has the user input a key to both hide and unhide their passwords into code. Asymmetric encryption has the user input a public key to encrypt their data and a private key to decrypt it | We added security settings to encrypt our data in the AWS servers to prevent attacks | Personally, I have never fallen for a phishing scheme because I’ve grown up being very cautious of this because my parents told me to be. However, I know several friends who have fallen for things like this, for example, people input their instagram account data for more followers, but end up getting their accounts stolen. Other examples include free currencies in games that take your passwords. |",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/techtalk/2023/02/08/safecomputing.html",
            "relUrl": "/markdown/techtalk/2023/02/08/safecomputing.html",
            "date": " • Feb 8, 2023"
        }
        
    
  
    
        ,"post32": {
            "title": "Big Idea 5.5",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Big Idea 5.5: Legal and Ethical Concerns . License Types Creative Commons MIT License: Requires authors to be credited, closed source. | Open Source GPL License: Publicly available for all purposes except making closed source versions | | Open source = Public, closed source = private | Open Source seems best because I don’t intend to profit off of my garbage code | Using GNU General Public License v3.0 because it allows for people to use the code for private and commercial use, but we still get credited. | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/techtalk/2023/02/08/lawsandethics.html",
            "relUrl": "/markdown/techtalk/2023/02/08/lawsandethics.html",
            "date": " • Feb 8, 2023"
        }
        
    
  
    
        ,"post33": {
            "title": "Big Idea 5.4",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Big Idea 5.4: Crowdsourcing . We could use crowdsourcing to gather data of the most effective ways to help students. For example, if we asked what method of studying students prefer, we could make a program to enhance the efficiency of that progress in order to benefit the most students possible. If the answer was flashcards, we could code flashcards, if practice tests, then make practice tests, and etc. | . | Our project could definitely use some crowdsourcing because it solely relies on user data and we could use some sample data to test our tables with. | During night at the museum, I will observe which projects attract the biggest crowds, because these projects will most likely be most interesting to the highest amount of students so that I can know what I can code in the future to benefit the most people possible. | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/techtalk/2023/02/01/crowdsourcing.html",
            "relUrl": "/markdown/techtalk/2023/02/01/crowdsourcing.html",
            "date": " • Feb 1, 2023"
        }
        
    
  
    
        ,"post34": {
            "title": "Big Idea 5.3",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Big Idea 5.3: Computing Bias . Group Discussion . Age difference between users of social media platforms TikTok mostly used by 10-19 year olds (32.5% of users) and least used by 50+ year olds (7.1%) | Facebook mostly used by 25-34 year olds (23.7%) and least used by 13-17 year olds (3.9%) I wouldn’t say that these platforms exclude certain groups, but rather are simply better fit for the respective groups. TikTok is more popular because the younger generations benefit from more fast-paced video media that can be quickly and easily consumed | Facebook is more popular with the older generations because the fast paced media in TikTok is too densely packed with information to be fully understood (fluid intelligence begins to drop off) | . | . | . | Virtual assistants have primarily female voices because women are more prototypically seen as caring for others and in assistant roles in workplaces. This is problematic because it further enforces gender roles that push women into roles that make them seem inferior to men (assisting men) | This may be more beneficial for business because following this stereotype may cause more satisfaction among users because it is what they are useful | . | Algorithms that influence my decisions: YouTube: Recommends me videos that alter my opinions (movie/game reviews) | Recommends videos that affect my mood Things I dislike more likely to get interaction (comments) | . | . | Google: Search algorithm gives me information that may or may not be credible | . | . | . Video: HP computers are racist . The owner probably doesn’t think it’s intentional but plays it off as more of a joke If they seriously thought this was a problem they would have a much more serious tone than laughing about it | . | This was likely caused by a lack of testing for people of color because it perfectly follows the white person’s face. Probably more white people available in the workplace for testing it | Could be fixed by using a more representative pool of testers | . | This is harmful because it excludes a group of people from fully utilizing the features of the device Not intended though, as HP wouldn’t exclude a group because that would be detrimental to their image and business. Yes it should be fixed for the above reasons | . | . | . Conclusion . It is imperative that computing bias is minimized for all applications for several reasons. For one, computer bias affects the profitability of a program because making a program unusable or less optimized for a certain group reduces the possible amount of consumers and therefore reduces the possible profit. Additionally, if users find out about a difference in program performance between certain groups of people, there will be backlash from consumers that will also harm profits, even if the error was unintentional. Aside from profits, this is also important from a moral perspective because it is simply common sense to not exclude groups of people based on factors like race, as seen in the HP computer video. .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/techtalk/2023/02/01/computingbias.html",
            "relUrl": "/markdown/techtalk/2023/02/01/computingbias.html",
            "date": " • Feb 1, 2023"
        }
        
    
  
    
        ,"post35": {
            "title": "Week 21 Review Ticket",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Big Idea 5.3 | Big Idea 5.4 | My contributions I need to wait for us to have the API done until I can make my search bar and favoriting code so in the mean time I am making the website more appealing by changing the themes and stuff. To-do: Make submenu boxes on the left darken when hovered over | Experiment with different color schemes | Make the main table with data and search bar | | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2023/02/01/Week_21_Hacks.html",
            "relUrl": "/markdown/review_ticket/2023/02/01/Week_21_Hacks.html",
            "date": " • Feb 1, 2023"
        }
        
    
  
    
        ,"post36": {
            "title": "Week 20 Review Ticket",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . CollegeBoard MC Test #2 | Big Ideas 5.1 and 5.2 | Project Features | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2023/01/25/Week_20_Hacks.html",
            "relUrl": "/markdown/review_ticket/2023/01/25/Week_20_Hacks.html",
            "date": " • Jan 25, 2023"
        }
        
    
  
    
        ,"post37": {
            "title": "1/24 Project Features",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . My Contributions . A search bar to quickly find item names in the table Algorithm/procedure that iterates through the API (list) of item names then selects ones that match the input of the search bar. | . | A way to “favorite” items in the table and to only show favorited items in the table Saved in localstorage so they remain favorited for the user localStorage is an object (OOP!) | . | . | . CollegeBoard Requirements/Coding Plan . Row # Requirements Comments . Row 1 | input | Text input in the search bar | . output | New table rows | . functionality | Change the table to match search | . describes the overall purpose of the program. | Provide an easy and quick way to find specific items | . describes what functionality of the program is demonstrated in the video. | Replaces table data with rows based on search | . describes the input and output of the program demonstrated in the video. | Text input and new rows | . Row 2 | one that shows how data has been stored in this list (or other collection type). | Create new list by indexing the API of items | . one that shows the data in this same list being used as part of fulfilling the program’s purpose. | Being in a list allows for an algorithm to easily iterate through and select needed data | . identifies the name of the variable representing the list being used in this response. | probably gonna be like itemList or something | . describes what the data contained in this list is representing in the program. | Data represents the name of the stored items | . Row 3 | includes a program code segment that shows a list being used to manage complexity in the program. | a for loop that checks each item in the list | . explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | The list allows for an algorithm to index through each item with a for loop, which would be more complicated without this algorithm because you would have to individually input each string which would become horrible if the list contained a lot of items. | . Row 4 | one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. | search(input) where input is the value of the text box | . one showing where the student-developed procedure is being called. | onKeyPress event | . describes what the identified procedure does and how it contributes to the overall functionality of the program. | I&#39;ve described the algorithm like 3 times already you get the idea | . Row 5 | sequencing | Compares input to an item in the list then adds that item to a new list if it passes | . iteration | checks each item in the list | . selection | if the item matches the search (if the string of the item name includes the search value) then it gets added to a new list, if not then nothing happens to it | . explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | The algorithm starts by creating an empty list then uses a for loop that iterates through the list of item names. It first checks if the item name includes the value from the search, and if it returns true, then that item is appended to the new list then it repeats this check for the next item in the list. If this returns false, it immediately moves to the next item. After each item in the list had been indexed, it runs another procedure that changes the table data based on an array parameter, which here we use the new list so that it only uses data of items that matched the search. | . Row 6 | describes the condition(s) being tested by each call to the procedure. | search input &quot;boxes&quot; | . identifies the result of each call. | returns all rows of the table of boxes | . Video Features . Input: searched item | Output: new table rows | Functionality: change table to match search input | Plan: Search the word “boxes” and the table will have only matching items | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2023/01/24/projectfeatures.html",
            "relUrl": "/markdown/2023/01/24/projectfeatures.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post38": {
            "title": "Big Idea 5.1 and 5.2 Blog",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Big Idea 5.1: Beneficial and Harmful Effects . Notes from lecture . Drones can be used for good, like search and rescue, but can also be used in bad ways like as military weapons | ChatGPT is disruptive Disruptive: Changes the way that people act | Concerns artists, Google (because less searching -&gt; less ads), schools, etc. | May return biased information, as it only considers one perspective | . | . Benefits and Harms of our Project . Benefit Harm . Easier organization for consumers | Quickly find items in storage for consumers | Log-in ensures that storage can not be manipulated by outsiders | . | (Currently) unprotected information that can be used in malicious ways (planning a theft) | . | . Note: I tried very hard to change the text color inside here but I can’t do that without changing the sass file for the entire fastpages theme (which I don’t want to do) so tough luck I guess. . Big Idea 5.2: Digital Divide . Notes from lecture . Our school provides chromebooks but in poorer communities that isn’t an option | Google has access to tons of free software that we don’t have | . Pros and Cons of Internet Blockers . Pros Cons . Prevents hackers from stealing private information | Prevents access to harmful websites (malware and such) | . | Blocks needed resources sometimes (youtube, thousands of things in CS, etc.) | Slower internet speeds | . | . Digital Divide Concerns . The fact that we have access to materials that others don’t isn’t ideal because it makes it harder for those without resources to succeed. However, this is why it must be our mission as more fortunate people to help the less fortunate. This can be achieved through more technological advancement, donation, and other means. | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2023/01/24/benefitsandharms.html",
            "relUrl": "/markdown/2023/01/24/benefitsandharms.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post39": {
            "title": "MCQ Test 2 Reflection",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Score: 47/50 . . Question #28 . . I chose C and D because I thought that it wasn’t A and B. It actually is A because it will follow a diagonal path to the square. . Question #29 . . Very simple question I just miscounted because I was in a rush. . Question #41 . . D is the correct answer because (1, 10) = 2 represents when it equals 20% of the voters. C is wrong is wrong because it includes 20% and 10%. .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2023/01/24/CollegeBoardMCs.html",
            "relUrl": "/markdown/2023/01/24/CollegeBoardMCs.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post40": {
            "title": "Week 19 Review Ticket",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Create Task grading | Database Hacks Our project could use a sign-in to verify if a user should be allowed to add data to the API (so that random people can&#39;t just come in and spam add or remove actual needed information) | API Hacks I simply do not have the brain power for this right now. | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2023/01/23/Week_19_Hacks.html",
            "relUrl": "/markdown/review_ticket/2023/01/23/Week_19_Hacks.html",
            "date": " • Jan 23, 2023"
        }
        
    
  
    
        ,"post41": {
            "title": "Week 19 - Create Task Grading Hacks 3",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Performance Task #1 . Row # Score Explanation Comments . 1 | 1/1 | Video shows: input output functionality Written response includes: describes the overall purpose of the program. describes what functionality of the program is demonstrated in the video. describes the input and output of the program demonstrated in the video. | Criteria met, nothing to say | . 2 | 0/1 | written response includes two program code segments: one that shows how data has been stored in this list (or other collection type). one that shows the data in this same list being used as part of fulfilling the program’s purpose. written response also includes: identifies the name of the variable representing the list being used in this response. describes what the data contained in this list is representing in the program. | Criteria met except for showing data being used | . 3 | 0/1 | written response includes: includes a program code segment that shows a list being used to manage complexity in the program. explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | Does not need a list for first part. Second part is actually also not met because while it is explained how to write otherwise, it does not manage complexity. | . 4 | 1/1 | written response includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. written response also includes: describes what the identified procedure does and how it contributes to the overall functionality of the program. | Actually not met because it does not explain the procedure&#39;s contribution to the overall project | . 5 | 1/1 | written response includes an algorithm with: sequencing iteration selection written response also includes: explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | criteria are met | . 6 | 1/1 | written response includes describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. describes the condition(s) being tested by each call to the procedure. identifies the result of each call. | criteria are met | . Overall: 4/6 | . Actual: 3/6 | . Performance Task #2 . Row # Score Explanation Comments . 1 | 1/1 | Video shows: input output functionality Written response includes: describes the overall purpose of the program. describes what functionality of the program is demonstrated in the video. describes the input and output of the program demonstrated in the video. | all criteria are met | . 2 | 1/1 | written response includes two program code segments: one that shows how data has been stored in this list (or other collection type). one that shows the data in this same list being used as part of fulfilling the program’s purpose. written response also includes: identifies the name of the variable representing the list being used in this response. describes what the data contained in this list is representing in the program. | all criteria are met | . 3 | 1/1 | written response includes: includes a program code segment that shows a list being used to manage complexity in the program. explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | all criteria are met | . 4 | 1/1 | written response includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. written response also includes: describes what the identified procedure does and how it contributes to the overall functionality of the program. | all criteria are met | . 5 | 1/1 | written response includes an algorithm with: sequencing iteration selection written response also includes: explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | all criteria are met | . 6 | 1/1 | written response includes describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. describes the condition(s) being tested by each call to the procedure. identifies the result of each call. | all criteria are met | . Overall: 6/6 | . Actual: 6/6 | . &lt;/table&gt; . Performance Task #3 . Row # Score Explanation Comments . 1 | 1/1 | Video shows: input output functionality Written response includes: describes the overall purpose of the program. describes what functionality of the program is demonstrated in the video. describes the input and output of the program demonstrated in the video. | all criteria are met | . 2 | 1/1 | written response includes two program code segments: one that shows how data has been stored in this list (or other collection type). one that shows the data in this same list being used as part of fulfilling the program’s purpose. written response also includes: identifies the name of the variable representing the list being used in this response. describes what the data contained in this list is representing in the program. | | . 3 | 0/1 | written response includes: includes a program code segment that shows a list being used to manage complexity in the program. explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | Does not explain how the code would be written differently | . 4 | 0/1 | written response includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. written response also includes: describes what the identified procedure does and how it contributes to the overall functionality of the program. | Procedure has no parameter(s). I missed that the procedure is described inaccurately in saying that it changes the screen which it does not. | . 5 | 0/1 | written response includes an algorithm with: sequencing iteration selection written response also includes: explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | Lacks iteration. I missed that the explanation did not include how states are selected with index values. | . 6 | 0/1 | written response includes describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. describes the condition(s) being tested by each call to the procedure. identifies the result of each call. | None of the criteria are met. | . Overall: 2/6 | . Actual: 1/6 | . Performance Task #4 . Row # Score Explanation Comments . 1 | 1/1 | Video shows: input output functionality Written response includes: describes the overall purpose of the program. describes what functionality of the program is demonstrated in the video. describes the input and output of the program demonstrated in the video. | all criteria are met | . 2 | 1/1 | written response includes two program code segments: one that shows how data has been stored in this list (or other collection type). one that shows the data in this same list being used as part of fulfilling the program’s purpose. written response also includes: identifies the name of the variable representing the list being used in this response. describes what the data contained in this list is representing in the program. | all criteria are met | . 3 | 1/1 | written response includes: includes a program code segment that shows a list being used to manage complexity in the program. explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | all criteria are met | . 4 | 1/1 | written response includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. written response also includes: describes what the identified procedure does and how it contributes to the overall functionality of the program. | all criteria are met | . 5 | 1/1 | written response includes an algorithm with: sequencing iteration selection written response also includes: explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | all criteria are met | . 6 | 1/1 | written response includes describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. describes the condition(s) being tested by each call to the procedure. identifies the result of each call. | all criteria are met (NOT) i missed that NONE of the criteria are met. | . Overall: 6/6 | . Actual: 5/6 | . Reflection: . I’ve noticed that it’s a lot easier to be accurate in grading for projects that meet all the requirements. I never give less points than the actual because I only miss when small things aren’t there as opposed to missing when they are there. .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2023/01/22/createtaskgrading3.html",
            "relUrl": "/markdown/2023/01/22/createtaskgrading3.html",
            "date": " • Jan 22, 2023"
        }
        
    
  
    
        ,"post42": {
            "title": "Week 18 Review Ticket",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . OOP Hacks | Create Task grading | OOP in project I used the localStorage object (show vscode) | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2023/01/17/Week_18_Hacks.html",
            "relUrl": "/markdown/review_ticket/2023/01/17/Week_18_Hacks.html",
            "date": " • Jan 17, 2023"
        }
        
    
  
    
        ,"post43": {
            "title": "Model and Object-Oriented Programming",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ... @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . Class and Object Code . # Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface) # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; # tester method to print users def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;) u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, password=&#39;123nick&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, password=&#39;123eli&#39;) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, password=&#39;123hedy&#39;) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u = tester(users, u.uid, &quot;123qwerty&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . Test 1, find user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$42O...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$YBQ...&#34; * name: &#34;Alexander Graham Bell&#34;, id: &#34;lex&#34;, psw: &#34;sha256$xVs...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$A5H...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$qlh...&#34; Test 2, change user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$42O...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$YBQ...&#34; * name: &#34;John Mortensen&#34;, id: &#34;jm1021&#34;, psw: &#34;sha256$djy...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$A5H...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$qlh...&#34; Test 3, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$42OvHN1vGBL5OE6k$e41f474e6037e0c51711d4247e59f11ad1240eedeafd4f0e94ff8df3979254d7&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$YBQujtqgOVzrg0pw$d52bd1e50bccdbdbd5a18213792e9c9ef9f87ff30e9d0c6240c284c02697e57b&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$djy5z29DVXe4ex3s$7aa66283772b2b98c9c77f5ee71ba6ef711dcf16f1d205bc3d802bafcae1b422&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$A5HAdCb7BSgkFUqp$060e45fe78f0bdd9240aa412826ded96130c9c6d9dcb81d61d6beaa7b52d68dd&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$qlhvgNGYM1d5bMkN$2acf54901a98f170a146a60d0c8ceb361f68d8de290e86add9a1030da1c4ee94&#34;}] Test 4, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$42OvHN1vGBL5OE6k$e41f474e6037e0c51711d4247e59f11ad1240eedeafd4f0e94ff8df3979254d7&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$YBQujtqgOVzrg0pw$d52bd1e50bccdbdbd5a18213792e9c9ef9f87ff30e9d0c6240c284c02697e57b&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$djy5z29DVXe4ex3s$7aa66283772b2b98c9c77f5ee71ba6ef711dcf16f1d205bc3d802bafcae1b422&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$A5HAdCb7BSgkFUqp$060e45fe78f0bdd9240aa412826ded96130c9c6d9dcb81d61d6beaa7b52d68dd&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$qlhvgNGYM1d5bMkN$2acf54901a98f170a146a60d0c8ceb361f68d8de290e86add9a1030da1c4ee94&#34;}] . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . Start Code for Hacks . from datetime import date import json def calculateAge(dob): today=date.today() return today.year - dob.year - ((today.month, today.day) &lt; (dob.month, dob.day)) class student: def __init__(self, name, dob, classOf, game): self._name = name self._game = game self._dob = dob self._classOf = classOf self._age = calculateAge(dob) @property def name(self): return self._name @name.setter def name(self, name): self._name = name @property def game(self): return self._game @game.setter def game(self, game): self._game = game @property def dob(self): return self._dob @dob.setter def dob(self, dob): self._dob = dob self._age = calculateAge(dob) @property def dob(self): return self._dob def set_dob(self, dob): self._dob = dob self._age = calculateAge(dob) @property def age(self): calculateAge(self._dob) @property def classOf(self): return self._classOf @classOf.setter def classOf(self, classOf): self._classOf = classOf def __str__(self): return f&#39;name: &quot;{self.name}&quot;, dob: &quot;{self.dob}&quot;, classOf: &quot;{self.classOf}, game: &quot;{self.game}, age: &quot;{self._age}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, dob={self._dob}, classOf={self._classOf}, game: &quot;{self.game}, age: &quot;{self._age}&quot;)&#39; def tester2(students, name): result = None for i in students: if i.name == name: print(&quot;* &quot;, end=&quot;&quot;) result = i print(str(i)) return result if __name__ == &quot;__main__&quot;: u1 = student(name=&#39;Aiden Huynh&#39;, game=&#39;GGST&#39;, dob=date(2006, 5, 12), classOf=&#39;2024&#39;) u2 = student(name=&#39;Jeffrey Lee&#39;, game=&#39;Genshin Impact&#39;, dob=date(2005, 12, 27), classOf=&#39;2023&#39;) u3 = student(name=&#39;Luke Angelini&#39;, game=&#39;League of Legends&#39;, dob=date(2005, 7, 29), classOf=&#39;2023&#39;) u4 = student(name=&#39;Jagger Klein&#39;, game=&#39;Lego Star Wars&#39;, dob=date(2005, 9, 18), classOf=&#39;2023&#39;) u5 = student(name=&#39;James Armstrong&#39;, game=&#39;Fortnite&#39;, dob=date(2006, 3, 28), classOf=&#39;2024&#39;) students = [u1, u2, u3, u4, u5] print(&quot;Test 1, find user 3&quot;) stu = tester2(students, u3.name) print(&quot;Test 2, change user 3&quot;) stu.name = &quot;Avinh Huynh&quot; stu.set_dob(date(1993,12,27)) stu = tester2(students, stu.name) print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([student.__dict__ for student in students]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(student) for student in students]) print(json_string) . Test 1, find user 3 name: &#34;Aiden Huynh&#34;, dob: &#34;2006-05-12&#34;, classOf: &#34;2024, game: &#34;GGST, age: &#34;16&#34; name: &#34;Jeffrey Lee&#34;, dob: &#34;2005-12-27&#34;, classOf: &#34;2023, game: &#34;Genshin Impact, age: &#34;17&#34; * name: &#34;Luke Angelini&#34;, dob: &#34;2005-07-29&#34;, classOf: &#34;2023, game: &#34;League of Legends, age: &#34;17&#34; name: &#34;Jagger Klein&#34;, dob: &#34;2005-09-18&#34;, classOf: &#34;2023, game: &#34;Lego Star Wars, age: &#34;17&#34; name: &#34;James Armstrong&#34;, dob: &#34;2006-03-28&#34;, classOf: &#34;2024, game: &#34;Fortnite, age: &#34;16&#34; Test 2, change user 3 name: &#34;Aiden Huynh&#34;, dob: &#34;2006-05-12&#34;, classOf: &#34;2024, game: &#34;GGST, age: &#34;16&#34; name: &#34;Jeffrey Lee&#34;, dob: &#34;2005-12-27&#34;, classOf: &#34;2023, game: &#34;Genshin Impact, age: &#34;17&#34; * name: &#34;Avinh Huynh&#34;, dob: &#34;1993-12-27&#34;, classOf: &#34;2023, game: &#34;League of Legends, age: &#34;29&#34; name: &#34;Jagger Klein&#34;, dob: &#34;2005-09-18&#34;, classOf: &#34;2023, game: &#34;Lego Star Wars, age: &#34;17&#34; name: &#34;James Armstrong&#34;, dob: &#34;2006-03-28&#34;, classOf: &#34;2024, game: &#34;Fortnite, age: &#34;16&#34; Test 3, make a dictionary . TypeError Traceback (most recent call last) /Users/Aiden/CS_Swag/_notebooks/2023-01-10-object_and_model_programming.ipynb Cell 7 in &lt;cell line: 79&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/Aiden/CS_Swag/_notebooks/2023-01-10-object_and_model_programming.ipynb#W6sZmlsZQ%3D%3D?line=93&#39;&gt;94&lt;/a&gt; stu = tester2(students, stu.name) &lt;a href=&#39;vscode-notebook-cell:/Users/Aiden/CS_Swag/_notebooks/2023-01-10-object_and_model_programming.ipynb#W6sZmlsZQ%3D%3D?line=95&#39;&gt;96&lt;/a&gt; print(&#34;Test 3, make a dictionary&#34;) &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/Aiden/CS_Swag/_notebooks/2023-01-10-object_and_model_programming.ipynb#W6sZmlsZQ%3D%3D?line=96&#39;&gt;97&lt;/a&gt; json_string = json.dumps([student.__dict__ for student in students]) &lt;a href=&#39;vscode-notebook-cell:/Users/Aiden/CS_Swag/_notebooks/2023-01-10-object_and_model_programming.ipynb#W6sZmlsZQ%3D%3D?line=97&#39;&gt;98&lt;/a&gt; print(json_string) &lt;a href=&#39;vscode-notebook-cell:/Users/Aiden/CS_Swag/_notebooks/2023-01-10-object_and_model_programming.ipynb#W6sZmlsZQ%3D%3D?line=99&#39;&gt;100&lt;/a&gt; print(&#34;Test 4, make a dictionary&#34;) File ~/opt/anaconda3/lib/python3.9/json/__init__.py:231, in dumps(obj, skipkeys, ensure_ascii, check_circular, allow_nan, cls, indent, separators, default, sort_keys, **kw) 226 # cached encoder 227 if (not skipkeys and ensure_ascii and 228 check_circular and allow_nan and 229 cls is None and indent is None and separators is None and 230 default is None and not sort_keys and not kw): --&gt; 231 return _default_encoder.encode(obj) 232 if cls is None: 233 cls = JSONEncoder File ~/opt/anaconda3/lib/python3.9/json/encoder.py:199, in JSONEncoder.encode(self, o) 195 return encode_basestring(o) 196 # This doesn&#39;t pass the iterator directly to &#39;&#39;.join() because the 197 # exceptions aren&#39;t as detailed. The list call should be roughly 198 # equivalent to the PySequence_Fast that &#39;&#39;.join() would do. --&gt; 199 chunks = self.iterencode(o, _one_shot=True) 200 if not isinstance(chunks, (list, tuple)): 201 chunks = list(chunks) File ~/opt/anaconda3/lib/python3.9/json/encoder.py:257, in JSONEncoder.iterencode(self, o, _one_shot) 252 else: 253 _iterencode = _make_iterencode( 254 markers, self.default, _encoder, self.indent, floatstr, 255 self.key_separator, self.item_separator, self.sort_keys, 256 self.skipkeys, _one_shot) --&gt; 257 return _iterencode(o, 0) File ~/opt/anaconda3/lib/python3.9/json/encoder.py:179, in JSONEncoder.default(self, o) 160 def default(self, o): 161 &#34;&#34;&#34;Implement this method in a subclass such that it returns 162 a serializable object for ``o``, or calls the base implementation 163 (to raise a ``TypeError``). (...) 177 178 &#34;&#34;&#34; --&gt; 179 raise TypeError(f&#39;Object of type {o.__class__.__name__} &#39; 180 f&#39;is not JSON serializable&#39;) TypeError: Object of type date is not JSON serializable .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/oop",
            "relUrl": "/jupyter/oop",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post44": {
            "title": "Week 18 - Create Task Grading Hacks 2",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Performance Task #1 . Row # Score Explanation . 1 | 0/1 | Video shows: input output functionality Written response includes: describes the overall purpose of the program. describes what functionality of the program is demonstrated in the video. describes the input and output of the program demonstrated in the video. | . 2 | 1/1 | written response includes two program code segments: one that shows how data has been stored in this list (or other collection type). one that shows the data in this same list being used as part of fulfilling the program’s purpose. written response also includes: identifies the name of the variable representing the list being used in this response. describes what the data contained in this list is representing in the program. | . 3 | 0/1 | written response includes: includes a program code segment that shows a list being used to manage complexity in the program. explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | . 4 | 1/1 | written response includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. written response also includes: describes what the identified procedure does and how it contributes to the overall functionality of the program. | . 5 | 0/1 | written response includes an algorithm with: sequencing iteration selection written response also includes: explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | . 6 | 1/1 | written response includes describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. describes the condition(s) being tested by each call to the procedure. identifies the result of each call. | . Overall: 3/6 | . Actual: 1/6 | . Performance Task #2 . Row # Score Explanation . 1 | 1/1 | Video shows: input output functionality Written response includes: describes the overall purpose of the program. describes what functionality of the program is demonstrated in the video. describes the input and output of the program demonstrated in the video. | . 2 | 1/1 | written response includes two program code segments: one that shows how data has been stored in this list (or other collection type). one that shows the data in this same list being used as part of fulfilling the program’s purpose. written response also includes: identifies the name of the variable representing the list being used in this response. describes what the data contained in this list is representing in the program. | . 3 | 1/1 | written response includes: includes a program code segment that shows a list being used to manage complexity in the program. explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | . 4 | 1/1 | written response includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. written response also includes: describes what the identified procedure does and how it contributes to the overall functionality of the program. | . 5 | 1/1 | written response includes an algorithm with: sequencing iteration selection written response also includes: explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | . 6 | 1/1 | written response includes describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. describes the condition(s) being tested by each call to the procedure. identifies the result of each call. | . Overall: 6/6 | . Actual: 6/6 | . Performance Task #3 . Row # Score Explanation . 1 | 0/1 | Video shows: input output functionality Written response includes: describes the overall purpose of the program. describes what functionality of the program is demonstrated in the video. describes the input and output of the program demonstrated in the video. | . 2 | 1/1 | written response includes two program code segments: one that shows how data has been stored in this list (or other collection type). one that shows the data in this same list being used as part of fulfilling the program’s purpose. written response also includes: identifies the name of the variable representing the list being used in this response. describes what the data contained in this list is representing in the program. | . 3 | 1/1 | written response includes: includes a program code segment that shows a list being used to manage complexity in the program. explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | . 4 | 1/1 | written response includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. written response also includes: describes what the identified procedure does and how it contributes to the overall functionality of the program. | . 5 | 1/1 | written response includes an algorithm with: sequencing iteration selection written response also includes: explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | . 6 | 1/1 | written response includes describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. describes the condition(s) being tested by each call to the procedure. identifies the result of each call. | . Overall: 5/6 | . Actual: 5/6 | . Performance Task #4 . Row # Score Explanation . 1 | 1/1 | Video shows: input output functionality Written response includes: describes the overall purpose of the program. describes what functionality of the program is demonstrated in the video. describes the input and output of the program demonstrated in the video. | . 2 | 1/1 | written response includes two program code segments: one that shows how data has been stored in this list (or other collection type). one that shows the data in this same list being used as part of fulfilling the program’s purpose. written response also includes: identifies the name of the variable representing the list being used in this response. describes what the data contained in this list is representing in the program. | . 3 | 0/1 | written response includes: includes a program code segment that shows a list being used to manage complexity in the program. explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | . 4 | 1/1 | written response includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. written response also includes: describes what the identified procedure does and how it contributes to the overall functionality of the program. | . 5 | 1/1 | written response includes an algorithm with: sequencing iteration selection written response also includes: explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | . 6 | 0/1 | written response includes describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. describes the condition(s) being tested by each call to the procedure. identifies the result of each call. | . Overall: 4/6 | . Actual: 3/6 | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2023/01/10/createtaskgrading2.html",
            "relUrl": "/markdown/2023/01/10/createtaskgrading2.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post45": {
            "title": "Week 17 Review Ticket",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Ideation of reunion project * Input: Search bar * Purpose: To provide users with assistance in finding needed crafting recipes when playing older versions of Minecraft. * Output: Desired Minecraft recipes * Recipes all stored in a list of dictionaries called *craftables* * Manages complexity by allowing procedures to iterate through the list rather than having to check each item in separate lines (for example, the search bar checks the whole craftables list, rather than checking each item in craftables one by one) * The procedure named *createRow* takes three parameters and is used to create the crafting grids for specific items. The parameters are &quot;list&quot; (a list of item recipes; *craftables* or a returned list from the search procedure), &quot;index&quot; (index of the desired item in the list), and &quot;rowNum&quot; (which row to create with the procedure, 0-2). It returns html code to be added to the innerHTML of the table body. * Procedure is called when adding a recipe to the table through another procedure, *getRecipes* * An algorithm is used in the search bar procedure, called *search*, with a for loop to iterate through each item in the list parameter and check if that item&#39;s name contains the input within the search bar/text box. If the input is in the item&#39;s name, that item is appended to an empty list (*results*). After each item in the list parameter has been checked, the procedure checks if the length of *results* is 0, and if it is, the table is reconstructed to have just the header and a row that says that no results are found. If the length of *results* is greater than zero, the procedure runs *getRecipes(results)* to rebuild the table but only with the items in *results*. * This function is called when a key is pressed in the text box. * Also checks if the search bar&#39;s value is null or blank, at which it just runs *getRecipes(craftables)* for the full list of recipes | Team work * Roles decided * Main theme for reunion project decided (Minecraft and related games) | Create task grading | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2023/01/08/week_17_hacks.html",
            "relUrl": "/markdown/review_ticket/2023/01/08/week_17_hacks.html",
            "date": " • Jan 8, 2023"
        }
        
    
  
    
        ,"post46": {
            "title": "Week 17 - Create Task Grading Hacks",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Performance Task #1 . Row # Score Explanation . 1 | 1/1 | Video clearly showed input as described by written response. Purpose and output clearly met. | . 2 | 1/1 | Named list with multiple elements, which contributes to purpose as shown in code segment where it is used. | . 3 | 1/1 | Explains how the list makes coding easier and gives an example of how the code would look without the example. | . 4 | 1/1 | Procedure of at least one parameter has function described and how it contributes to the program purpose. | . 5 | 1/1 | Algorithm is described as in row 4, and steps are clear enough for replication. | . 6 | 1/1 | Calls return different values and are described. | . Overall: 6/6 | . Actual: 4/6 | . For Row 1: The function of the program is described rather than the purpose | For Row 3: List does not manage complexity, as strings could just be used. I believe complexity is referring to simplifying the code, not the coding process. | . Performance Task #2 . Row # Score Explanation . 1 | 1/1 | Purpose, input, output described and shown. | . 2 | 1/1 | Describes a named list and the data in it. Shows this list contributing to the purpose. | . 3 | 1/1 | Explains how the list simplifies the code and also shows how the code would be different without the list. | . 4 | 1/1 | Procedure with at least one parameter is shown being called and contribution to purpose is clear | . 5 | 1/1 | Algorithm&#39;s steps clearly listed and functions as described in row 4. | . 6 | 1/1 | Calls return different values and are described. | . Overall: 6/6 | . Actual: 6/6 | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2023/01/05/createtaskgrading.html",
            "relUrl": "/markdown/2023/01/05/createtaskgrading.html",
            "date": " • Jan 5, 2023"
        }
        
    
  
    
        ,"post47": {
            "title": "Unit 3 Sections 17-18",
            "content": "Do Now!!! . Set up your notebook by either wgetting the lesson or tracking it by your own (We would recommend wgetting since there are some fill in the blanks!) | wget here: https://raw.githubusercontent.com/mmaxwu/Tri2-GroupFastpages/master/_notebooks/2022-12-dd-lesson.ipynb | . 3.17: Algorithm Efficiency . Purpose: . The purpose of this lesson is to help students understand how to make an efficient program and optimize it and understand its importance to the CSP curriculum. . What is Algorithmic Efficiency? . What is Algorithmic Efficiency? The ability of an algorithm to solve a problem in an efficient way | An efficient algorithm solves a problem quickly and with a minimum amount of resources, such as time and memory. | . | How do we determine if an algorithm is efficient or not? One way we can do this is by determining the time complexity of the algorithm | Another way is through space complexity | . | . Traveling Merchant Problem Hacks: . What did you and your team discuss? (record below) . An heuristic solution is an approach to a problem that produces a solution that isn&#39;t necessarily optimal but can be used when normal methods take forever | . Describe the method used to solve the traveling merchant problem. (record below) . Go to closest unvisited city. . 3.18: Undecidable Problems . Purpose: . The purpose of this lesson is to introduce students to the concept of undecidable problems in computer science and to explain why these problems are important. . Key vocabulary: . Decision problem | Decidable problem | Undecidable problem | . Decision Problem . A decision problem is a problem in computer science and mathematics that can be solved by a yes-no answer, also known as a binary answer. In other words, a decision problem is a problem for which there are only two possible outputs:&quot;yes&quot; or &quot;no&quot;. There are two types of decision problems that Collegeboard goes over: . Decidable Problems | Undecidable Problems | . A decidable problem is a problem in computer science and mathematics for which an algorithm can be created that can always produce a correct answer or solution. In other words, a decidable problem is a problem for which there exists an algorithm that can be used to determine whether a given input is a valid solution or not. . An undecidable problem problem is a problem in computer science and mathematics for which it is impossible to create an algorithm that can always provide a correct answer or solution. This means that it is not possible for an algorithm to always determine whether a given input is a valid solution to an undecidable problem. . Decidable Problems . A decidable problem is an algorithm that can always have an output of yes or no given any input. It is always correct. . Example of a Decidable Problem . The procedure below tests to see if a number is divisible by 13. If it is, it returns true. If it isn&#39;t, it returns false. . def divideThirteen(number): if number % 13 == 0: return True else: return False print(divideThirteen(26)) print(divideThirteen(30)) . Undecidable Problems . An Example of a Forever Running Code . The code keeps adding 1 to the variable number until number is no longer an integer(This is not the python data type &quot;integer&quot;, it&#39;s the integer in number theory). However, there is no end to this code, making the computer run forever. There is no halt to the code. . i = 0 number = 1 def integerTest(n): # Testing if the number is an integer if n%1 ==0: return True else: return False # Using while loop to keep searching an a non-integer above 1. Note that the computer runs forever. while i == 0: number += 1 if integerTest(number) == False: i +=1 print(&quot;Done&quot;) . The Halting Problem . The halting problem is an example of an undecidable problem. It states that it is not always possible to correctly determine whether a code halts or runs forever. . There is no way to write an algorithm to analyze and determine whether a body of code can run forever or not. . Halting Problem Example: . HaltChecker analyzes the program, program P, and its input, input I. If program P halts with input I, HaltChecker returns an output of &quot;halts&quot;. If program P doesn&#39;t halt(runs forever) with input I, HaltChecker returns an output of &quot;never&quot;. For example, in the code where it tests if variable number, the code runs forever, so HaltChecker returns an output of “never”. | Then, we add another algorithm called Reverser which reverses HaltChecker&#39;s output. So, if &quot;never&quot; is the output of HaltChecker, then the output of Reverser is “halts”. It&#39;s also the same the other way around: if HaltChecker has an output of &quot;halts&quot;, then Reverser has an output of “never”. | We combine these algorithms into one entire body of code. | Since Reverser is the algorithm at the end, hence giving the ultimate output, notice how it prints &quot;never&quot; when in fact there is an end(As proved by HaltChecker), and how it also prints &quot;halts&quot; when there is in fact is no end to the code(Also proved by HaltChecker). As a result, HaltChecker is inaccurate and this is an undecidable problem. | . This Diagram Sums up the Entire Process in the Bulleted List: . Credits of diagram and example to Khan Academy . FAQ . Q: If Reverser is causing the problem, why not remove it? | A: Removing Reverser will remove the problems, however, we are looking for ways which create the problem of not outputting a correct result. One example is enough to prove that it is an undecidable problem since it proves that the code is not completely accurate. | . Extra Things to Notice . Note that while a computer may take a long time to run a section of code, it does not mean that the computer is going to run forever. | Humans are able to solve some undecidable problems. The entire Halting Problem example was to prove that computers cannot solve undecidable problems. | . Hacks . Come up with one situation in which a computer runs into an undecidable problem. Explain why it is considered an undecidable problem. . Dividing by zero (mort copied me) . Here&#39;s another because mort: recursive loop with the wrong inequality sign (&lt; instead of &gt; or vice versa) . 3.17 Homework . Your homework for Algorithmic Efficiency is pretty simple. . Use the 1st code below and graph it (Desmos, TI Inpire Cas, e.t.c), change the x value only! | Label the number of loops done as x and the time (microseconds) to find the index as y | Connect the points | Do the same thing with the 2nd code | Compare the two graphs and explain which one of the two is more efficient and why (min. 2 sentences) | Insert images of the graph either in your blog or on review ticket | import time def linear_search(lst, x): start_time = time.perf_counter_ns() # records time (nanoseconds) for i in range(len(lst)): # loops through the entire list if lst[i] == x: # until the x value we are looking for is found end_time = time.perf_counter_ns() # records time again total_time = (end_time - start_time) // 1000 # subtracts last recorded time and first recorded time print(&quot;Found element after {} loops in {} microseconds&quot;.format(i+1, total_time)) # prints the results return &quot;Your number was found at&quot;, i end_time = time.perf_counter_ns() # records the time again total_time = (end_time - start_time) // 1000 # subtracts last recorded time and first recorded time print(&quot;Element not found after {} loops in {} microseconds&quot;.format(len(lst), total_time)) # prints the results return &quot;Your number wasn&#39;t found :(&quot; lst = list(range(1, 10001)) # list with numbers 1-10000 xvals = [0, 10, 100, 500, 1000, 5000, 10000, 15000] for x in xvals: linear_search(lst, x) # runs procedure . The fact that it does not work is not my problem. . import time def binary_search(lt, x): start_time = time.perf_counter_ns() # starts timer low = 0 # sets the lower side mid = 0 # sets mid value high = len(lt) -1 # sets the higher side num_loops = 0 # number of loops the search undergoes to find the x value while low&lt;=high: # Loop ran until mid is reached num_loops += 1 # adds one loop each time process is repeated mid = (low + high) // 2 # takes the lowest and highest possible numbers and divides by 2 and rounds to closest whole # if lt[mid] == x: end_time = time.perf_counter_ns() # records time total_time = (end_time - start_time) // 1000 # time in microseconds print(&quot;Element found after {} loops in {} microseconds&quot;.format(num_loops, total_time)) # prints the results return mid # returns the index value elif lt[mid] &gt; x: # if mid was higher than x value, then sets new highest value as mid -1 high = mid -1 elif lt[mid] &lt; x: low = mid + 1 # if mid was lower than x, sets the new low as mid + 1 end_time = time.perf_counter_ns() total_time = (end_time - start_time) // 1000 print(&quot;Element not found after {} loops in {} microseconds&quot;.format(num_loops, total_time)) # prints the results return &quot;Your number wasn&#39;t found :(&quot; lt = list(range(1, 10001)) # list with numbers 1-10000 x = 149 # replace with an integer between 1 and 10000 (I suggest big numbers like 500, 2000, so on) binary_search(lt, x) # runs procedure . 3.18 Homework: . Use the Jupyter notebook to write an algorithm that solves a decidable problem. You can use math or whatever else you would like to do. | Write code to get the computer to run forever. Check this example if you need help, but please come up with your own idea. | Homeworks, hacks, and classwork(filled in blanks) for both 3.17 and 3.18 are due on Thursday at 9:00 pm. -0.1 points for each day late. . # infinite calculator unsolved = True while unsolved == True: num1 = input(&quot;Enter a number&quot;) operator = input(&quot;Enter an operator (+, -, *, /, **, %&quot;) num2 = input(&quot;Enter another number&quot;) unsolved = False if num1.isnumeric() == True and num2.isnumeric() == True: num1 = float(num1) num2 = float(num2) if operator == &quot;+&quot;: print(str(num1) + &quot; + &quot; + str(num2) + &quot;= &quot; + str(num1 + num2)) # unsolved = False elif operator == &quot;-&quot;: print(str(num1) + &quot; - &quot; + str(num2) + &quot;= &quot; + str(num1 - num2)) # unsolved = False elif operator == &quot;*&quot;: print(str(num1) + &quot; * &quot; + str(num2) + &quot;= &quot; + str(num1 * num2)) # unsolved = False elif operator == &quot;/&quot;: print(str(num1) + &quot; / &quot; + str(num2) + &quot;= &quot; + str(num1 / num2)) # unsolved = False elif operator == &quot;**&quot;: print(str(num1) + &quot; ** &quot; + str(num2) + &quot;= &quot; + str(num1 ** num2)) # unsolved = False elif operator == &quot;%&quot;: print(str(num1) + &quot; % &quot; + str(num2) + &quot;= &quot; + str(num1 % num2)) # unsolved = False else: print(&quot;Invalid operator type, try again&quot;) else: print(&quot;Invalid numbers, try again&quot;) . 1.0 + 1.0= 2.0 10.0 / 4.0= 2.5 Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/efficiency",
            "relUrl": "/jupyter/efficiency",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "3.16 Lesson",
            "content": "First Order of Business: Get your notebook . Open a terminal in vscode, run command: cd _notebooks, type &#39;wget&#39; and paste this link into said terminal and run it . | Take notes wherever you please, but you will be graded on participating . | . So, what is a simulation anyway? . A simulation is a tested scenario used for viewing results/outputs to prepare for them in real world situations . | These can be used for games like dice rolling, spinners, etc . | These can be used for practical things such as building structures, testing car crashes, and other things before engaging in them in the real world . | These simulations can have the option of obeying real world physics (Gravity, collision) or they can go against these norms since this is a fictitious scenario, and couldn&#39;t happen in real life . | . Big Question . Which of the following simulations could be the LEAST useful? . | A retailer trying to identify which products sold the most . | A restaurant determining the efficiency of robots | An insurance company studying the rain impact of cars | A sports bike company studying design changes to their new bike design | . If you guessed a bike company, you&#39;re wrong, because the retail simulation was the right answer. Simulating robots in food service, sudying rain impact on vehicles, and new bike design can contribute a lot more to society in comparison to seeing what products sell more than others. | . Next Big Question . If you were making a simulation for making a new train station, which of the following would be true about this simulation? . It could reveal potential problems/safety issues before construction starts | It cannot be used to test the train station in different weather | Simulation will add high costs to projects | Simulation is not needed because this train station already exists | . Potential Saftey was the right answer, because you need somewhere to test the safety and ethicness of what you&#39;re about to do before you start building it. Otherwise, let&#39;s just say you&#39;ll have a special plaque for FBI&#39;s Most Wanted | . Simulation 1: . Both programs below do the same thing. Given a height and a weight, they calculate how long it will take for a object to fall to the ground in a vacuum subjected to normal Earth levels of gravity. . However, the second one is a simulation. It calculates the distance the object has fallen every 0.1 seconds. This is useful for if you wanted a visual representation of a falling object, which pure math can&#39;t do as smoothly. . height = float(input(&quot;height in meters?&quot;)) weight = input(&quot;weight in pounds?&quot;) stuff = (2 * (height / 9.8))**(1/2) print(&quot;It will take&quot;, stuff,&quot;seconds for an object that weighs&quot;,weight,&quot;pounds&quot;,&quot;to fall &quot;,height,&quot;meters in a vacuum&quot;) . t = 0 g = 0 d = 0 false = True while false: t = t + 0.1 d = 9.8 / 2 * (t**2) if d &gt;= height: false = False #print(d) # if you want to print the distance every time it calculates it. Too long to output to a terminal, but this could be useful to display graphically. #print(t) print(t) print(d) . Simulation 2: . This simulation is made in order to simulate movement on a 2d plane vs a 3d plane. . | How it works: we have multiple variables, if statements and equations under a while command in order to randomy generate steps on a 2d plane. Once it reaches the set destination, it will say that the man made it home after x amount of steps. . | For the 3D plane, it takes a lot longer due to how big and open the 3d environment is, so there are more if statements in the 3d plane . | . (explain further) . import random x = 0 y = 0 nights = 0 turn = 0 stopped = 0 turns = [] while (nights &lt; 100): step = random.randrange(4) if step == 0: x = x+1 if step == 1: x = x-1 if step == 2: y = y+1 if step == 3: y = y-1 turn = turn + 1 if x == 0 and y == 0: nights = nights + 1 print(&quot;The Man Has Made It Home After &quot;, turn, &quot;Turns&quot;) turns.append(turn) turn = 0 if turn/1000 % 1000 == 0 and x + y != 0: print(&quot;(&quot;, x,y, &quot;)&quot;) if (turn &gt; 10000000): stopped = stopped + 1 turn = 0 x = 0 y = 0 nights = nights + 1 print(&quot;Caped&quot;) average = sum(turns) / len(turns) print(&quot;Avaerage&quot;, average, &quot;Ones that when&#39;t too long &quot;, stopped) . import random x = 0 y = 0 z = 0 nights = 0 turn = 0 stopped = 0 turns = [] while (nights &lt; 100): #rando movement step = random.randrange(6) if step == 0: x = x+1 if step == 1: x = x-1 if step == 2: y = y+1 if step == 3: y = y-1 if step == 4: z = z+1 if step == 5: z = z-1 #Turn counter turn = turn + 1 #Goal check if x == 0 and y == 0 and z == 0: nights = nights + 1 print(&quot;The Bird Has Made It Home After &quot;, turn, &quot;Turns&quot;) turns.append(turn) turn = 0 if turn/1000 % 1000 == 0 and x + y + z != 0: print(&quot;(&quot;, x,y, &quot;) &quot;,&quot;| &quot;, z) #Too long Stoper if (turn &gt; 10000000): stopped = stopped + 1 turn = 0 x = 0 y = 0 z = 0 nights = nights + 1 print(&quot;Caped&quot;) average = sum(turns) / len(turns) print(&quot;Avaerage&quot;, average,&quot;Ones that when&#39;t too long &quot;, stopped) . Simulations in the wild . Simulations are used extremely frequently in real life applications. One of the most common examples of simulations are video games. A games physics engine can accurately simulate objects colliding . Another example is Blender, the software used in 3d animations class, here at Del Norte. Blender is made up of many small simulations, but one big one it uses is simulating the way light bounces off of and interacts with objects. . HW !!! . Create a simulation. It can be anything, just has to simulate something. . Some ideas: . Two objects colliding | Gravity on other planets | . AND . Find an example of a simulation in a software/game you use, screenshot, and explain how it is a simulation . Hacks . Other simulation: Gacha Games . I used to play gacha games (I know at least one of you know what they are), and pulling in gacha games simulates drawing from a real-world gachapon machine, but rather than selecting randomly from a pool a set number of rewards (set number of toys in machine), this is simulated by changing the odds of pulling certain rewards (good things are 0.0000001% chance because capitalism). . Simple Projectile Motion Simulator . Finds the distance in meters that a projectile will travel before hitting the ground (assuming the projectile is launched onto a level plane, and that there are no resistant forces present) given an initial velocity, an initial height, and an angle. . import math qList = {&quot;vi&quot;:&quot;What is your initial velocity? (in meters per second)&quot;, &quot;theta&quot;:&quot;At what angle is the projectile being fired (0 degrees to 90 degrees)&quot;, &quot;yi&quot;:&quot;From what initial height is the projectile being launched?&quot; } g = 9.8 # Gravity = 9.8 m/s^2 print(qList[&quot;vi&quot;]) initialVelocity = float(input(qList[&quot;vi&quot;])) print(str(initialVelocity) + &quot;m/s n&quot;) print(qList[&quot;theta&quot;]) angle = float(input(qList[&quot;theta&quot;])) print(str(angle) + &quot; degrees n&quot;) print(qList[&quot;yi&quot;]) initialHeight = float(input(qList[&quot;yi&quot;])) print(str(initialHeight) + &quot;m n&quot;) radians = angle * math.pi / 180 # Quadratic equation (I know the math can be simplified but I am lazy.) t1 = ((initialVelocity * math.sin(radians)) + ((initialVelocity * math.sin(radians))**2 - (4 * (-.5 * g) * initialHeight))**(1/2))/(2 * 0.5 * g) t2 = ((initialVelocity * math.sin(radians)) - ((initialVelocity * math.sin(radians))**2 - (4 * (-.5 * g) * initialHeight))**(1/2))/(2 * 0.5 * g) if t1 &gt; 0: x = initialVelocity * math.cos(radians) * t1 print(&quot;The projectile will travel &quot; + str(x) + &quot;m&quot;) elif t2 &gt; 0: x = initialVelocity * math.cos(radians) * t2 print(&quot;The projectile will travel &quot; + str(x) + &quot;m&quot;) else: print(&quot;Something went wrong!&quot;) . What is your initial velocity? (in meters per second) 5.0m/s At what angle is the projectile being fired (0 degrees to 90 degrees) 45.0 degrees From what initial height is the projectile being launched? 5.0m The projectile will travel 5.067874680438394m . &quot;Proof&quot; that it works using another simulation from pHet (University of Colorado): . .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/simulations",
            "relUrl": "/jupyter/simulations",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Unit 3 Sections 5-7",
            "content": "Lesson Overview: 3.5 - Boolean Expressions . Here we will focus on: basics of Booleans | its relationship with binary | relational operators | Logical Operators | . | . What is a boolean? . A data type with two possible values: true or false | . Boolean and Binary . So similar yet so different. . Boolean math and binary notation both use the same two ciphers: 1 and 0. | However, please note that Boolean quantities are restricted to a singlular bit (can only be either 1, or 0) | On the otherhand, binary numbers may be composed of many bits adding up in place-weighted form to any finite value, or size | . Must Knows . A Boolean value is either TRUE or FALSE | The AP Exam will provide you with a reference sheet with the operators below. | . . A few ways these operators could be used... | . . Relational Operators in action . How could you use operators to determine if the average of 5 grades is greater than 80? | . With the grades below, use a boolean expression to determine if the average grade is above an 80 and print the result (True or False) | Try it in as few steps as possible! | Be creative! There are obviously TONS of different practical solutions | . gradeList = [90, 65, 60, 75, 95] averageGrade = sum(gradeList)/len(gradeList) if averageGrade &gt; 80: print(&quot;The average grade is: &quot; + averageGrade + &quot;%&quot;) else: print(&quot;The average grade is below 80%.&quot;) . The average grade is below 80%. . The versatility of relational operators: . print(&quot;100 == 100:&quot;,100==100) print(&quot;Hello == Adios:&quot;,&quot;greeting&quot;==&quot;farewell&quot;) print(&quot;Hello != Adios:&quot;,&quot;greeting&quot;!=&quot;farewell&quot;) print(&quot;Hello == Hola:&quot;,&quot;greeting&quot;==&quot;greeting&quot;) print(&quot;5&gt;=4:&quot;, 5&gt;=4) print (&#39;&#39;) # Notice that relational operators can even work on lists! # For lists, the relational operator compares each respective component until an answer is derived print(&quot;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]:&quot;, [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]) print(&quot;[1,2,3,5] &gt; [1,2,3,4]:&quot;, [1,2,3,5] &gt; [1,2,3,4]) print(&quot;[1,2,3,5] &lt; [1,2,3,4]:&quot;, [1,2,3,5] &lt; [1,2,3,4]) print(&quot;[1,2,3,5] == [1,2,3,4]:&quot;, [1,2,3,5] == [1,2,3,4]) . 100 == 100: True Hello == Adios: False Hello != Adios: True Hello == Hola: True 5&gt;=4: True [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]: False [1,2,3,5] &gt; [1,2,3,4]: True [1,2,3,5] &lt; [1,2,3,4]: False [1,2,3,5] == [1,2,3,4]: False . Logical Operators! . These types of operators don&#39;t necessarily deal with equivalent/non-equivalent values, but they rather work on operands to produce a singular boolean result . AND : returns TRUE if the operands around it are TRUE | OR : returns TRUE if at least one operand is TRUE | NOT : returns TRUE if the following boolean is FALSE | . Turn the following arithmetic phrases into either True or False statements as indicated USING LOGICAL OPERATORS . print(&quot;1 &gt; 2 or 5 &lt; 12:&quot;, 1 &gt; 2 or 5 &lt; 12) # Output TRUE using OR ^ # Output FALSE using NOT print(&quot;24 &gt; 8:&quot;, not 24 &gt; 8) # Output FALSE using AND print(&quot;10 &gt; 20:&quot;, 10 &gt; 20 and 20 &lt; 10) . 1 &gt; 2 or 5 &lt; 12: True 24 &gt; 8: False 10 &gt; 20: False . Lesson Overview: 3.6 - Conditionals . Focusing on Selection . Selection: uses a condition that evaluates to true or false . Selection determines which part of an algorithm are executed based on a condition being true or false . Algorithm is a finite set of instructions that accomplish a specific task . Conditional Statements . Also known as &quot;if statements&quot; . Can be seen as if statements or if blocks . . Can also be seen as if else statements or if else-blocks . x = 20 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) . x is greater than y . x = 20 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) else: print(&quot;x is not greater than y&quot;) . x is greater than y . Participation . -Calculate the total sum of two numbers, if it is equal to 200, print 200, if otherwise, print the sum. . num1 = 100 num2 = 150 sum = num1 + num2 # you could just do # print(sum) # because if it&#39;s 200 it&#39;ll print 200 anyways lol if sum == 200: print(200) # or just print(sum)... else: print(sum) . 250 . Lesson Overview - 3.7 Nested Conditionals . Nested conditional statements consist of conditional statements within other conditional statements | Utilizes &quot;if else&quot; statements within &quot;if else&quot; statements | . Basics of a nested conditional: | . Block Coding Visual of Nested Conditionals: | Example Psuedocode of Nested Conditional Statements | . Analyzing Code Walkthrough . Psuedocode to the left, block code to the right | Approach the problem by going through each condition one at a time . Decide which ones are false to skip and which ones are true to execute | . | You Try: . | . score = 82 if (score &gt;= 90) { console.log(&quot;You got an A, congrats!&quot;) } else { if (score &gt;= 75) { console.log(&quot;Please come to retake up to a 90 next week at tutorial!&quot;) } else { console.log(&quot;You have detention!&quot;) } } . protein = 25 carbs = 36 sugar = 11 if (carbs &gt;= 55 || protein &lt;= 20 || sugar &gt;= 15) { console.log(&quot;Your lunch is too unhealthy, please pick a new one&quot;) } else { if (carbs &lt; 35 || protein &lt; 25) { console.log (&quot;This lunch is alright but try to add some more carbs or protein&quot;) } else { if (sugar &gt;= 11) { console.log (&quot;Looks great but lets see if we can cut down on sugar, we don&#39;t want diabetes!&quot;) } else { console.log (&quot;Amazing, you created a healthy lunch!!!&quot;) } } } . Writing Nested Code Activity . Write a program that fits these conditions using nested conditionals: If a person has at least 8 hours, they are experienced | If a person is experienced their salary is 90k, if they have ten hours or above their salary 150k | If a person is inexperienced their salary is always 50k | print the salary of the person at the end and whether they are experienced or not | . | var hrs = 10 var salary = &quot;&quot; var experienced = true if (hrs &gt;= 10) { salary = &quot;150k&quot; } else if (hrs &gt;= 8) { salary = &quot;90k&quot; } else { salary = &quot;50k&quot; experienced = false } console.log(&quot;This person has... n&quot; + &quot;Salary: &quot; + salary + &quot; n&quot; + &quot;Experience: &quot; + experienced) . This person has... Salary: 150k Experience: true . Hacks Assignments: . Conditionals: . Write a program that fits these conditions using nested conditionals: If the product is expired, print &quot;this product is no good&quot; | If the cost is above 50 dollars, and the product isn&#39;t expired, print &quot;this product is too expensive&quot; | If the cost is more than 25 dollars but under 50, and the product isn&#39;t expired, print &quot;this is a regular product&quot; | If the cost is under 25 dollars, print &quot;this is a cheap product&quot; | . | . product = {&quot;expired&quot;:false, &quot;cost&quot;:10} if (product[&quot;expired&quot;] == true) { console.log(&quot;This product is no good!!!!!!!&quot;) } else { if (product[&quot;cost&quot;] &gt; 50) { console.log(&quot;THis product is too expensive!11111&quot;) } else if (product[&quot;cost&quot;] &gt; 25) { console.log(&quot;this product normal&quot;) } else { console.log(&quot;cheap&quot;) } } . cheap . Boolean/Conditionals: . Create a multiple choice quiz that ... uses Boolean expressions | uses Logical operators | uses Conditional statements | prompts quiz-taker with multiple options (only one can be right) | has at least 3 questions | . | Points will be awarded for creativity, intricacy, and how well Boolean/Binary concepts have been intertwined | . qAndA = { &quot;question&quot; : [&quot;What language was this quiz coded in?&quot;, &quot;sus amognsu&quot;, &quot;what do you think of kanye&quot;], &quot;answers&quot; : [[&quot;python&quot;,&quot;english&quot;,&quot;java&quot;,&quot;javascript&quot;], [&quot;among us&quot;,&quot;sussy baka&quot;,&quot;among among&quot;,&quot;agmosnus&quot;], [&quot;great&quot;,&quot;ok&quot;,&quot;meh&quot;,&quot;no good&quot;]], &quot;correct&quot; : [&quot;a&quot;, &quot;b&quot;, &quot;d&quot;], &quot;letters&quot; : [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;] } totalQs = len(qAndA[&quot;question&quot;]) i = 0 score = 0 while i != totalQs: qAnswered = False currentQ = qAndA[&quot;question&quot;][i] print(currentQ + &quot; n&quot;) n = 0 while n &lt; 4: print(str(qAndA[&quot;letters&quot;][n]) + &quot;: &quot; + str(qAndA[&quot;answers&quot;][i][n])) n += 1 ans = input(currentQ) ans.lower() print(&quot;&quot;) while qAnswered == False: if ans == &quot;a&quot; or &quot;b&quot; or &quot;c&quot; or &quot;d&quot;: if ans == qAndA[&quot;correct&quot;][i]: score += 1 print(&quot;correct!11111&quot;) else: print(&quot;NO&quot;) qAnswered = True else: print(&quot;Enter a valid letter option (a, b, c, or d)&quot;) print(&quot;you score is: &quot; + str(score) + &quot; n&quot;) i += 1 . What language was this quiz coded in? a: python b: english c: java d: javascript correct!11111 you score is: 1 sus amognsu a: among us b: sussy baka c: among among d: agmosnus correct!11111 you score is: 2 what do you think of kanye a: great b: ok c: meh d: no good correct!11111 you score is: 3 .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/booleans",
            "relUrl": "/jupyter/booleans",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "Unit 3 Sections 12-13",
            "content": "Calling Procedures . Slide 1: . A procedure is a named group of programming instructions that may have parameters and return values. | Procedures are referred to by different names, such as method or function, depending on the programing language. | Parameters are input values of a procedure. Arguments specify the values of the parameters when procedure is called. | A procedure call interrupts the sequential execution of statements causing the program to execute the statements within the procedure before continuing. One the last statement in the procedure (or a return statement) has executed, flow or control is returned to the point immediately following where the procedure was called. | . Slide 2: . When calling procedures, it&#39;s important to take notice to whether it returns data, or a block of statements. | If the procedure just returns a block of statements, you call the procedure by referring to the procedure name, and inputting the arguments. | If the procedure returns some sort of data like a boolean or value, then you will assign that value to a variable | . Slide 3: . Assume the Temperature outside is Fahrenheit. | The procedure convertFahrenheit is intended to convert from Fahrenheit to Celsius. | Convert the following psuedocode to python | . def convertFahrenheit(temperature): celsius = (temperature - 32) * 5/9 return celsius outsideTemp = int(input(&#39;what is the temperature outside?&#39;)) convertFahrenheit(outsideTemp) . 22.22222222222222 . Developing Procedures . Slide 8: . Picking a ___ name is important in case you revisit the code later on (separate words with capitals) There are 2 different types of procedures- ones that return a value and those that simply execute a block of statements Steps of developing procedure: picking a useful name, thinking of parameters (what data does the procedure need to know), making a flowchart or writing procedure in pseudocode, and actually developing the procedure. . Slide 9: . In this example, a teacher is writing a program that will replace the grade on a previous quiz if the new grade is better than the previous. . What would be a good name for this procedure? | What parameters do we need for this procedure? | Try writing this procedure out in python based on the given pseudocode | . def retakeGrader(currentPoints, quizGrade, questions): print(&#39;Your original grade was: &#39; + str(grade) + &#39;%&#39;) currentGrade = currentPoints / questions currentGrade = currentGrade * 100 if currentGrade &gt; quizGrade: quizGrade = currentGrade print(&#39;Your new grade is: &#39; + str(quizGrade) + &#39;%&#39;) else: print(&#39;Your grade did not change&#39;) pts = int(input(&#39;How many points did you get? (on the retake)&#39;)) grade = int(input(&#39;What was your original grade? (percent)&#39;)) qs = int(input(&#39;How many questions were on the retake?&#39;)) retakeGrader(pts, grade, qs) . Your original grade was: 80% Your new grade is: 90.0% . Procedural Abstraction . One type of abstraction is procedural abstraction which provides a name for a process and allows a procedure to be used only knowing what it does and not how it does it | This is very helpful in managing complexity in a program | Subdivision of a program into separate subprograms is called modularity | A procedural abstraction may extract shared features to generalize functionality instead of duplicating code. This allows for program reuse, which helps manage complexity | . Complexity Example . One of the biggest advantages of procedural abstraction is managing complexity. . Think about the process of simplifying the code? What do you think the advantage of the code segment on the left is? . Code Segment 1 Code Segment 2 . ROTATE_LEFT() | detourLeft() | . MOVE_FORWARD()|turnCorner()| ROTATE_RIGHT |MOVE_FORWARD()| MOVE_FORWARD()|MOVE_FORWARD()| MOVE_FORWARD() ROTATE_RIGHT() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() MOVE_FORWARD MOVE_FORWARD() . Hacks . Write a python procedure about something which can help you in school, for example the teacher’s function we spoke about earlier. | Points will be awarded based on creativity and functionality | 0.1 points will be deducted for late submissions | Submit the notes with all blanks filled in (scored out of 0.5 points) and the python procedure (scored out of 0.5 points) by Monday 12/12 at 11:59 PM. | . a = &#39;&#39; vf = &#39;&#39; vi = &#39;&#39; t = &#39;&#39; x = &#39;&#39; qList = {&#39;want&#39;:&#39;What is the desired value? n(a, vf, vi, t, or x)&#39;, &#39;a&#39;:&#39;What is the acceleration? n(if unknown, input &quot;?&quot;)&#39;, &#39;vf&#39;:&#39;What is the final velocity? n(if unknown, input &quot;?&quot;)&#39;, &#39;vi&#39;:&#39;What is the initial velocity? n(if unknown, input &quot;?&quot;)&#39;, &#39;t&#39;:&#39;What is the change in time? n(if unknown, input &quot;?&quot;)&#39;, &#39;x&#39;:&#39;What is the change in position? n(if unknown, input &quot;?&quot;)&#39;} def floatConverter(var): if var == &quot;?&quot;: return(var) else: return float(var) def aSolve(vf, vi, t, x): if vf == &#39;?&#39;: return 2*(x - vi * t)/t**2 elif t == &#39;?&#39;: return (vf**2 - vi**2)/(2 * x) elif vi == &#39;?&#39;: return 2*(x - ((2 * x)-(vf * t)))/t**2 elif x == &#39;?&#39;: return (vf**2 - vi**2)/(2 * x) else: return &quot;Unsolvable&quot; def vfSolve(a, vi, t, x): if a == &#39;?&#39;: return ((2*x)/t)-vi elif vi == &#39;?&#39;: return (x-((1 / 2) * a * t ** 2))/t + a * t elif t == &#39;?&#39;: print(&quot;Note: This is the absolute value; remember to check directionality.&quot;) return (vi**2+2*a*x)**(1/2) elif x == &#39;?&#39;: return vi + a * t else: return &quot;Unsolvable&quot; def viSolve(a, vf, t, x): if a == &#39;?&#39;: return (2 * x) / t - vf elif vf == &#39;?&#39;: return (x-(.5*a*t**2))/t elif t == &#39;?&#39;: print(&quot;Note: This is the absolute value; remember to check directionality.&quot;) return (vf**2-2*a*x)**(1/2) elif x == &#39;?&#39;: return vf - a * t else: return &quot;Unsolvable&quot; def xSolve(a, vf, vi, t): if a == &#39;?&#39;: return t * (vf+vi)/t elif vf == &#39;?&#39;: return vi*t+.5*a*(t**2) elif vi == &#39;?&#39;: return t * (2*vf - a * t)/2 elif t == &#39;?&#39;: return (vf**2 - vi**2)/(2*a) else: return &quot;Unsolvable&quot; def tSolve(a, vf, vi, x): if a == &#39;?&#39;: return (2*x)/(vi+vf) elif vf == &#39;?&#39;: return ((vi**2+2*a*x)**(1/2)-vi)/a # idk if this works 100% of the time but oh well boo hoo cry about it elif vi == &#39;?&#39;: return (vf -(vf**2-2*a*x)**(1/2))/a # also dont know elif x == &#39;?&#39;: return (vf - vi)/a else: return &quot;Unsolvable&quot; def kinematicCalculator(want): if want == &#39;a&#39;: vf = floatConverter(input(qList[&#39;vf&#39;])) vi = floatConverter(input(qList[&#39;vi&#39;])) t = floatConverter(input(qList[&#39;t&#39;])) x = floatConverter(input(qList[&#39;x&#39;])) return aSolve(vf, vi, t, x) elif want == &#39;vf&#39;: a = floatConverter(input(qList[&#39;a&#39;])) vi = floatConverter(input(qList[&#39;vi&#39;])) t = floatConverter(input(qList[&#39;t&#39;])) x = floatConverter(input(qList[&#39;x&#39;])) return vfSolve(a, vi, t, x) elif want == &#39;vi&#39;: a = floatConverter(input(qList[&#39;a&#39;])) vf = floatConverter(input(qList[&#39;vf&#39;])) t = floatConverter(input(qList[&#39;t&#39;])) x = floatConverter(input(qList[&#39;x&#39;])) return viSolve(a, vf, t, x) elif want == &#39;t&#39;: a = floatConverter(input(qList[&#39;a&#39;])) vf = floatConverter(input(qList[&#39;vf&#39;])) vi = floatConverter(input(qList[&#39;vi&#39;])) x = floatConverter(input(qList[&#39;x&#39;])) return tSolve(a, vf, vi, x) elif want == &#39;x&#39;: a = floatConverter(input(qList[&#39;a&#39;])) vf = floatConverter(input(qList[&#39;vf&#39;])) vi = floatConverter(input(qList[&#39;vi&#39;])) t = floatConverter(input(qList[&#39;t&#39;])) return xSolve(a, vf, vi, t) else: print(&#39;Please input a valid variable. n(a, vf, vi, t, or x)&#39;) want = input(&#39;What is the desired value? n(a, vf, vi, t, or x)&#39;) print(want + &quot; = &quot; + str(kinematicCalculator(want))) # I will convert this to javascript at another time to make a user-friendly version, but for now, this works. . t=1.4285714285714286 .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/procedures",
            "relUrl": "/jupyter/procedures",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Week 15 - Team Grades",
            "content": "Week 15 Grades . . Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Lesson Aiden Jeffrey Luke James Jagger . Sections 5-7 | 0.95/1 | 0.95/1 | 0.85/1 | 0.35/1 | 0.95/1 | . Section 8-10 | 1/1 | 0.75/1 | 0.7/1 | 0.5/1 | 0.9/1 | . Total | 1.95/2 | 1.7/2 | 1.55/2 | 0.85/2 | 1.85/2 | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2022/12/07/team_grades.html",
            "relUrl": "/markdown/2022/12/07/team_grades.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "3.9 and 3.11 Lesson",
            "content": "First Things First: WGET . wget allows you to essentially clone someone elses file on Github into a directory of your choosing You are able to edit your own copy of the file without affecting the original | . | . Here&#39;s a quick how-to . Open your VSCode terminal (Terminal &gt; New Terminal) . | Navigate to your Fastpages Blog using cd . | Navigate to the _notebooks directory in your Fastpages . | Copy and paste this into the terminal: wget https://raw.githubusercontent.com/Azeem-Khan1/TripleAJ/master/_notebooks/2022-12-06-lessonComplete.ipynb . | You&#39;re all set! you can use this copy of our notebook to help you take notes and participate during the lesson . Please raise your hand if you are having trouble with wget and we will come around and help you | . | Note: if you have a separate notebook that you take notes on and you also want to do your practice in that notebook, you can copy and paste cells from this notebook by left clicking next to any markdown or code cell (indicating that it is selected), do ctl+c or cmd+c, and go to the desired notebook and do ctl+v or cmd+v (if that doesn&#39;t work, try just c and v with no ctl or cmd) | . 3.9 Part 1 . The lesson will start off with introducing what algorithms are and what they do, moreover, what their significance is. . 3.9 Lesson 1 has the objective to teach the student of the outcome of similar algorithmic concepts and similar algorithms. In this lesson, you will see different ways on how algorithms are developed. . Lesson 1 | Defining Algorithms . What is an algorithm? An algorithm is a process or set of rules to be followed through CODE. There are set limitations, this is what makes algorithms fun, you can your imagination and create whatever you wan with your own instructions! . Algorithms can be written in different ways and still accomplish the same tasks . | Algorithms that appear similar can yield different side effects or results. . | Some conditional statements can be written as the same as Boolean expressions (VICE VERSA) . | Different algorithms can be developed or use to solve the same problem. . | . Example 1 | What happens if we test the algorithm with different outputs? . The pseudocode above is translated to python for you. . Record what your outputs are when you enter 95 degrees F, does the algorithm yield the same result? . The conditional below is nested . temp = int(input(&quot;Select a temperature from 0 to 99 degrees F&quot;)) if (temp &gt;= 90): print(&quot;It&#39;s too hot outside!&quot;) else: if (temp &gt;= 65): print(&quot;Sure I will play outside!&quot;) else: print(&quot;It is too cold outside!&quot;) # Input 54 and then 95, what do you notice? . It&#39;s too hot outside! . temp = int(input(&quot;Select a temperature from 0 to 99 degrees F&quot;)) if (temp &gt;= 90): print(&quot;It&#39;s too hot outside!&quot;) if (temp &gt;= 65): print(&quot;Sure I will play outside!&quot;) if (temp &lt; 65): print(&quot;It is too cold outside!&quot;) # Input 54 and then Input 95, what do you notice? . It&#39;s too hot outside! Sure I will play outside! . NOW RECORD with another output . Record what your outputs are when you enter 54, does the algorithm yield the same result this time? . *Now use 95 as an input for the two code blocks above. . Even though an algorithm&#39;s code can look the same, you have to be careful, they can always yield different results. When constructing algorithms you want to make sure that your code corresponds with what you want as your output. You set the limit of your code and you decide what the code&#39;s output is. . Conditionals vs. Booleans . The condition and instructions are what differ, that&#39;s where the magic happens. The condition is a boolean expression when an expression outputs either true or false. Boolean values are another type of data type in programming languages, and they can only ever hold true or false. . Exercise . Learning how to utilize conditionals and booleans are important for developing algorithms. Use this exercise to help you. . Can either Boolean expression on the right replace the conditional on the left? Assume isWeekday and isHoliday are Boolean variables. . *NOTE = you can edit the variables to check the conditions needed! . IsHoliday = False IsWeekday = True if IsHoliday: driveWork = True else: if IsWeekday: driveWork = True else: driveWork = False print(driveWork) . Logically thinking about conditionals and booleans . Now the problem may seem confusing, but the best way to develop an algorithm is to think about all the possible results that can be potentially be outputted. . So if IsHoliday is set to true, then driveWork is automatically equal to false and it does not matter what value of isWeekday is. This must mean that one of the conditionals must be NOT IsHoliday. . In the case that lets say IsHoliday is set to false, then the variable for weekday needs to be checked. If it&#39;s true then driveWork is true, if it&#39;s false then driveWork is false. This must mean that the other conditional isWeekday. . Combining both conditionals, you get option 2, which is not IsHoliday and IsWeekday. This is why option 2 is right! . Example 3 | Conditionals vs Booleans . The following algorithms are intended to sum the odd numbers from 1-9. Which algorithms work as intended? . Below, I have translated the block code into python, import this to your jupyter notebook and record the result. What do you notice? . First block . sum = 1 counter = 3 #iteration var = 0 while (var &lt; 4): #while the var is &lt;= 4, it executes those commands, once it exceeds it hits the else command sum = sum + counter counter = counter + 2 var = var + 1 # now go through the whole thing 4 times, this is an iteration, a vital part of algorithms. else: print(sum) . 25 . Second block . sum = 0 counter = 9 #iteration while (counter &gt;= 1): sum = sum + counter counter = counter - 2 print(sum) . 25 . When we start our initializing left sum as 1 counter as 3 we had no iterations yet. Remember we&#39;re going to have to repeat this four times because the block code prompts us to repeat 4 times, so we iterate. So as we go through and follow what the block gives us. . So you see that the sum does work, it does sum up the odd numbers from 1-9 . Now lets look at the right block. . Sum is set to 0 Counter is set to 9 We must repeat until the counter &lt; 1 is true. . So we keep adding until -1, that is when the counter &lt; 1 is true, so we stop . So why is it important to understand that algorithms can be written in different ways and still accomplish the same task? . An algorithm is beautiful that way, just because you think of solving a problem differently, doesn&#39;t mean your wrong, . 3.9 Part 2 . Flowcharts . Flowcharts can help you visualize the functionality of an algorithm . | They are a good way to double check whether or not your algorithm is achieving its purpose . | . How To Set Up A Flowchart . label the start point . | Define any and all variables you may need . | Consider the first question you want the algorithm to ask . | Write what you want the algorithm to do if the answer to that question is yes (or true) . | Write what you want the algorithm to do if the answer to that question is no (or false) . Steps 3-5 are the steps to creating code that uses a process called selection (you can convert the question from step 3 to a conditional if-statement in code) | . | Write out all necessary steps for the algorithm to function properly . | You may want your algorithm to iterate some steps until a condition is met . You can write the steps that need to be repeated, then draw an arrow from the last step to a step above that contains a conditional statement | . | determine a way to reach the end goal | Selection vs. Iteration . Selection: . A process used in algorithms where a conditional if-statement leads to one of two outcomes . Outcome 1: if the conditional statement is true, something will happen . | Outcome 2: if the conditional statement is false, something else will happen . | Ex: see Example A . | . | . | Iteration . A process used in algorithms that allows certain things to happen until a condition is satisfied . Once the condition is satisfied, then an outcome is produced . | This can take the form of a for-loop, while-loop, and/or if-statement . | . | . | . Example A . Consider this situation: . You are shopping for your favorite food at your favorite supermarket . | You see that there is a sale on wheat products for 35% off . | There is another sale on produce for 20% off . | These sales are mutually exclusive . | Tax on all items is 8% . | . | Your TASK: . Create a flowchart for an algorithm that can be used to calculate the cost of your favorite item | . | . Example A Possible Solution (using Selection) . 3.9 Part 3 . For Algorithms How to combine and/or modify an existing algorithm. | . | . Benefits of combining algorithms can reduce development time, testing time, and simplify the identification of errors. | . | . Example in Class . Rules . step/rule 1: start with any positive integer | step/rule 2: if the preceding term is even; divide by 2 | step/rule 3: if the preceding term is odd; multiply by 3 and add 1 | step/rule 4: repeat steps until you arrive at 1 | fact: the sequence should ALWAYS end up at 1 if repeated. | . Algorithm to Start (Determining Whether a Number is Even or Odd) . print(&quot;choose value for x&quot;) varx=int(input(&quot;Enter any positive Integer&quot;)) print(varx) while varx != 1: if (varx %2 == 0): varx /= 2 else: varx = varx * 3 + 1 print(varx) # Run this cell to see how it works . choose value for x 32 16.0 8.0 4.0 2.0 1.0 . How can we modify this code to match our goal . Hint: uses arithmetic operations | Hint: look at the steps of the equation and try and modify it to fit them | Must display all numbers used in it | . Solution . Step 1 . steps/rules 2 &amp; 3. | . print(&quot;choose value for x&quot;) varx=int(input(&quot;Enter any positive Integer&quot;)) if (varx %2 == 0): varx == varx/2 # Change print to the function else: varx == varx * 3 + 1 # Change print to the function print(varx) . Step 2 . step/rule 4; here we add the loop | . print(&quot;choose value for x&quot;) varx=int(input(&quot;Enter any positive Integer&quot;)) while varx != 1: if (varx %2 == 0): varx = varx/2 # Change print to the function else: varx = varx * 3 + 1 # Change print to the function print(varx) . Step 3 . Display all values throughout the algorithm | . print(&quot;choose value for x&quot;) varx=int(input(&quot;Enter any positive Integer&quot;)) print(varx) while varx != 1: if (varx %2 == 0): varx = varx/2 print(varx) # add Display else: varx = varx * 3 + 1 print(varx) # add Display print(varx) # Final # Should be 1 every time . Takeaways . You can use code you&#39;ve previously wrote in order to make a project easier. | Breaking algorithms down into steps can make things easier and more simple. | . Hacks . create another algorithm using a famous mathematical algorithm such as the &quot;collatz conjecture.&quot; and explain your steps in a post on a blog. | . 3.11 Binary Search . Goals/Objectives: . detirmine number of iterations required to find vlue in data set. | explain requirements for binary search | . What is Binary Search? . Binary search is a search algorithm that finds the position of a target value within a sorted array. Binary search compares the target value to the middle element of the array. | An algorithm for iterating to find a value inside a data set | . About Binary Search: . Binary Search Algorithm starts in the middle of a data set of numbers and eliminates half the data. This process reapeats until the desired value is found or until all elements have been eliminated. | In order to use binary search effectivly and properly, data must be stored in order | COLLEGE BOARD INDEX STARTS AT 1 NOT 0 | . Think about how you would you would try to find a certain number in this set. . (IMAGE HERE) . One way would be to line up the numbers and count them individually untill you find the desired value. . When working with large data sets with lots of numbers, methods like these wont work . Instead, a Binary Search would be more effective. | . (IMAGE HERE) . Here we can see the numbers are set in an increasing order. Setting numbers in an increasing or decreasing is needed for a binary search . Binary search is started with the middle number first Middle number is found by taking the higest index number plus the lowest and divided by two | . | Binary Search can be represented using a tree as shown below | . (IMAGE HERE) . . Heres an easy way to put it: . binary search fidns the desired element by continuously chopping the search area in half | say the element you are looking for is &#39;f&#39; | . [a b c d e f g h] . We would start in the middle at element &#39;d&#39; | becuase our target is greater than d we will eliminate everything left of &#39;d&#39; including &#39;d&#39; (chopping it in half) . [e f g h] is what now remains . again we would &#39;chop in half&#39; | say we iterate through &#39;g&#39; and &#39;h&#39;, our desired element is still not found so we would eliminate &#39;g; and &#39;h&#39; and continue the process | . [e f] . now we are down to 2 elements | &#39;chopping in half&#39; will give us our desired element | . [f] . | . def BinarySearch(array, x, low, high): # Repeat until the pointers low and high meet each other while low &lt;= high: mid = low + (high - low)//2 # find the middle (taking the higest index number plus the lowest and divided by two) if array[mid] == x: # if desired number is the middle is found return desired number (middle number) return mid elif array[mid] &lt; x: low = mid + 1 else: high = mid - 1 return -1 array = [3, 4, 5, 6, 7, 8, 9] x = 4 result = BinarySearch(array, x, 0, len(array)-1) if result != -1: print(&quot;Element is present at index &quot; + str(result)) else: print(&quot;Not found&quot;) . Element is present at index 1 . We have created a function called binary_search() function which takes two arguments - a list to be sorted and a number to be searched. . | We have declared two variables to store the lowest and highest values in the list. The lowest is assigned initial value to 0, the highest to len(list1) 1 and mid as 0. . | Next, we have declared the while loop with the condition that the lowest is equal and smaller than the highest. The while loop will iterate if the number has not been found yet. . | In the while loop, we find the mid value and compare the index value to the number we are searching for. . | If the value of the mid-index is smaller than n, we increase the mid value by 1 and assign it to the low. The search moves to the left side. . | Otherwise, if the value of mid index is larger than n, we decrease the mid value by 1 and assign it to the high. The search moves to the right side. . | If the n is equal to the mid value then return mid. . | This will happen until the low is equal and smaller than the high. . | If we reach at the end of the function, then the element is not present in the list. We return -1 to the calling function. . | . . Hacks . Using my example above and steps below, create your own iteration using binary search . Steps . Compare x with the middle element. | If x matches with the middle element, we return the mid index. | Else if x is greater than the mid element, then x can only lie in the right (greater) half subarray after the mid element. Then we apply the algorithm again for the right half. | Else if x is smaller, the target x must lie in the left (lower) half. So we apply the algorithm for the left half. | . Homework Assignment (DUE FRIDAY 12/09 BY 5:00 PM) . Consider this situation: . You&#39;re playing a short game using a random number generator from 1 to 20 . On each turn, a player will generate 3 random numbers . | They get to keep the highest number that they generate as their score . | . | . | . Your TASK: . Create a flowchart that can be used to write an algorithm that calculates a player&#39;s score after a turn . NOTE: Don&#39;t forget the syntax for Flowcharts! (each shape represents an action) . | Try to implement selection and/or iteration in your algorithm . | Please do this using Google Drawing. It can be found in your Google Drive if you click New &gt; More &gt; Google Drawings . | . | Write the working algorithm in Python . Make sure to initialize / define any variables you may need . | Add comments to your code! . | . | How to submit: . Make a shareable link to your Flowchart with commenting access through Google Drive&#39;s &quot;Share&quot; feature . | Make a comment with the link at the top of the code block that holds your algorithm (use # for comments in Python) . | Submit a link to your algorithm (with the commented link to Flowchart) in the comment/issue found on the schedule . | Grading . DUE FRIDAY 12/09 BY 5:00 PM . | LATE PENALTY: -0.2 . | You will be graded based on: . how functional your algorithm is . | how well your Flowchart is organized . | . | . If something comes up, feel free to DM us on Slack . Flowchart . This isn&#39;t an algorithm thanks to max() . Working code . import random def roll(n): rollsList = [] while n &gt; 0: rollsList.append(random.randint(1,20)) n -= 1 print(rollsList) return max(rollsList) roll(3) # If you want me to do this with binary search (intentional obsolescence), lmk . [1, 18, 3] . 18 .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/algorithms",
            "relUrl": "/jupyter/algorithms",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "Lists and Iteration",
            "content": "Lists . What are lists? . Lists: a sequence of variables . we can use lists to store multiple items into one variable | used to store collections of data | changeable, ordered, allow duplicates | . List examples in Python, JavaScript, and Pseudocode. . fruits = [&quot;apple&quot;, &quot;grape&quot;, &quot;strawberry&quot;] print (fruits) . const fruits = [&quot;apple&quot;, &quot;grape&quot;, &quot;strawberry&quot;]; . fruits ← [apple, grape, strawberry] . More list examples . brands = [&quot;nike&quot;, &quot;adidas&quot;, &quot;underarmour&quot;] #string numbers = [1, 2, 3, 4, 5] #integer truefalse = [True, False, True] #boolean . Lists are just one of four collection data types in Python . Tuple: collection that is ordered, unchangeable, allows duplicates | Set: collection that is unordered, unchangeable, doesn&#39;t allow duplicates | Dictionary: collection that is ordered, changeable, doesn&#39;t allow duplicates | . Terms . Index: a term used to sort data in order to reference to an element in a list (allows for duplicates) | Elements: the values in the list assigned to an index | . fruits = [&quot;apple&quot;, &quot;grape&quot;, &quot;strawberry&quot;] index = 1 print (fruits[index]) . Methods in Lists . Method Definition Example . append() | adds element to the end of the list | fruits.append(&quot;watermelon&quot;) | . index() | returns the index of the first element with the specified value | fruits.index(&quot;apple&quot;) | . insert() | adds element at given position | fruits.insert(1, &quot;watermelon&quot;) | . remove() | removes the first item with the specified value | fruits.remove(&quot;strawberry&quot;) | . reverse() | reverses the list order | fruits.reverse() | . sort() | sorts the list | fruits.sort() | . count() | returns the amount of elements with the specified value | fruits.count(&quot;apple&quot;) | . copy() | returns a copy of the list | fruits.copy() | . clear() | removes the elements from the list | fruits.clear() | . sports = [&quot;football&quot;, &quot;hockey&quot;, &quot;baseball&quot;, &quot;basketball&quot;] # change the value &quot;soccer&quot; to &quot;hockey&quot; print (sports) . [&#39;football&#39;, &#39;hockey&#39;, &#39;baseball&#39;, &#39;basketball&#39;] . sports = [&quot;football&quot;, &quot;soccer&quot;, &quot;baseball&quot;, &quot;basketball&quot;, &quot;golf&quot;] # add &quot;golf&quot; as the 3rd element in the list print (sports) . [&#39;football&#39;, &#39;soccer&#39;, &#39;baseball&#39;, &#39;basketball&#39;, &#39;golf&#39;] . Try this . Determine the output of the code segment | . . This will output &quot;unusual&quot;, &quot;bold&quot;, &quot;away&quot; . Iteration . stuff . title:Iteration HW- toc: true | comments: true | categories: [iteration] | tags: [iteration] | . First, what not to do . Iteration is important for your time and sanity . print(&quot;alpha&quot;) print(&quot;bravo&quot;) print(&quot;charlie&quot;) print(&quot;delta&quot;) print(&quot;echo&quot;) print(&quot;foxtrot&quot;) print(&quot;golf&quot;) print(&quot;hotel&quot;) print(&quot;india&quot;) print(&quot;juliett&quot;) print(&quot;kilo&quot;) print(&quot;lima&quot;) print(&quot;mike&quot;) print(&quot;november&quot;) print(&quot;oscar&quot;) print(&quot;papa&quot;) print(&quot;quebec&quot;) print(&quot;romeo&quot;) print(&quot;sierra&quot;) print(&quot;tango&quot;) print(&quot;uniform&quot;) print(&quot;victor&quot;) print(&quot;whiskey&quot;) print(&quot;x-ray&quot;) print(&quot;yankee&quot;) print(&quot;zulu&quot;) #please help me . Coding all of these individually takes a lot of unnecessary time, how can we shorten this time? . Iteration . Iteration is the repetition of a process or utterance applied to the result or taken from a previous statement. There&#39;s a lot of types of iteration though, what to use? How do we apply iteration to lists? . Some methods include using a &quot;for loop&quot;, using a &quot;for loop and range()&quot;, using a &quot;while loop&quot;, and using comprehension . Lists, tuples, dictionaries, and sets are iterable objects. They are the &#39;containers&#39; that store the data to iterate. . Each of these containers are able to iterate with the iter() command. . There are 2 types of iteration:definite and indefinite. Definite iteration clarifies how many times the loop is going to run, while indefinite specifies a condition that must be met . for variable in iterable: statement() . Iterator? Iterable? Iteration? . When an object is iterable it can be used in an iteration | When passed through the function iter() it returns an iterator | Strings, lists, dictionaries, sets and tuples are all examples of iterable objects. | . a = [&#39;alpha&#39;, &#39;bravo&#39;, &#39;charlie&#39;] itr = iter(a) print(next(itr)) print(next(itr)) print(next(itr)) . alpha bravo charlie . Loops . Well, above is basically just printing them again, so how do we takes these iterators into something we can make use for? | Loops take essentially what we did above and automates it, here are some examples. | . list = [&quot;Alpha&quot;, &quot;Bravo&quot;, &quot;Charlie&quot;, &quot;Delta&quot;, &quot;Echo&quot;, &quot;Foxtrot&quot;, &quot;Golf&quot;, &quot;Hotel&quot;, &quot;India&quot;, &quot;Juliett&quot;, &quot;Kilo&quot;, &quot;Lima&quot;, &quot;Mike&quot;, &quot;November&quot;, &quot;Oscar&quot;, &quot;Papa&quot;, &quot;Quebec&quot;, &quot;Romeo&quot;, &quot;Sierra&quot;, &quot;Tango&quot;, &quot;Uniform&quot;, &quot;Victor&quot;, &quot;Whiskey&quot;, &quot;X-ray&quot;, &quot;Yankee&quot;, &quot;Zulu&quot;] # using a for loop for i in list: #for item in the list, print the item print(i) . list = [&quot;Alpha&quot;, &quot;Bravo&quot;, &quot;Charlie&quot;, &quot;Delta&quot;, &quot;Echo&quot;, &quot;Foxtrot&quot;, &quot;Golf&quot;, &quot;Hotel&quot;, &quot;India&quot;, &quot;Juliett&quot;, &quot;Kilo&quot;, &quot;Lima&quot;, &quot;Mike&quot;, &quot;November&quot;, &quot;Oscar&quot;, &quot;Papa&quot;, &quot;Quebec&quot;, &quot;Romeo&quot;, &quot;Sierra&quot;, &quot;Tango&quot;, &quot;Uniform&quot;, &quot;Victor&quot;, &quot;Whiskey&quot;, &quot;X-ray&quot;, &quot;Yankee&quot;, &quot;Zulu&quot;] # Taking the length of the list lengthList = len(list) # Iteration using the amount of items in the list for i in range(lengthList): print(list[i]) . list = [&quot;Alpha&quot;, &quot;Bravo&quot;, &quot;Charlie&quot;, &quot;Delta&quot;, &quot;Echo&quot;, &quot;Foxtrot&quot;, &quot;Golf&quot;, &quot;Hotel&quot;, &quot;India&quot;, &quot;Juliett&quot;, &quot;Kilo&quot;, &quot;Lima&quot;, &quot;Mike&quot;, &quot;November&quot;, &quot;Oscar&quot;, &quot;Papa&quot;, &quot;Quebec&quot;, &quot;Romeo&quot;, &quot;Sierra&quot;, &quot;Tango&quot;, &quot;Uniform&quot;, &quot;Victor&quot;, &quot;Whiskey&quot;, &quot;X-ray&quot;, &quot;Yankee&quot;, &quot;Zulu&quot;] # Once again, taking the length of the list lengthList = len(list) # Setting the variable we are going to use as 0 i=0 # Iteration using the while loop # Argument saying WHILE a certain variable is a certain condition, the code should run while i &lt; lengthList: print(list[i]) i += 1 . Using the range() function . But wait, there&#39;s more . Need to save even more time? The above is useful for many occasions, but can get tedious fast, in this case, use range() | . x = range(5) for n in x: print(n) . 0 1 2 3 4 . Else, elif, and break . For when 1 statement isn&#39;t enough . Else:when the condition does not meet, do statement()- Elif: when the condition does not meet, but meets another condition, do statement() | Break: stop the loop | . HW Iteration . Use the list below to turn the first letter of any word (using input()) into its respective NATO phonetic alphabet word . Ex: . list -&gt; . lima india sierra tango . words = [&quot;alfa&quot;, &quot;bravo&quot;, &quot;charlie&quot;, &quot;delta&quot;, &quot;echo&quot;, &quot;foxtrot&quot;, &quot;golf&quot;, &quot;hotel&quot;, &quot;india&quot;, &quot;juliett&quot;, &quot;kilo&quot;, &quot;lima&quot;, &quot;mike&quot;, &quot;november&quot;, &quot;oscar&quot;, &quot;papa&quot;, &quot;quebec&quot;, &quot;romeo&quot;, &quot;sierra&quot;, &quot;tango&quot;, &quot;uniform&quot;, &quot;victor&quot;, &quot;whiskey&quot;, &quot;xray&quot;, &quot;yankee&quot;, &quot;zulu&quot;] inp = input().lower() output = &quot;&quot; for letter in inp: for word in words: if letter == word[0]: output += word + &quot; &quot; print(inp + &quot; -&gt; n&quot; + output) . bruh bravo romeo uniform hotel . 2D Iteration . 2D Arrays . A 2D array is simply just a list of lists. The example below is technically correct but... . keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] . Conventially 2D arrays are written like below. This is because 2D arrays are meant to be read in 2 dimensions (hence the name). Writing them like below makes them easier to visualize and understand. . keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] . Printing a 2D Array . We already know that we can&#39;t just print the matrix by calling it. We need to iterate through it to print it. . def print_matrix1(matrix): for i in range(len(matrix)): # outer for loop. This runs on i which represents the row. range(len(matrix)) is in order to iterate through the length of the matrix for j in range(len(matrix[i])): # inner for loop. This runs on the length of the i&#39;th row in the matrix (j changes for each row with a different length) print(matrix[i][j], end=&quot; &quot;) # [i][j] is the 2D location of that value in the matrix, kinda like a coordinate pair. [i] iterates to the specific row and [j] iterates to the specific value in the row. end=&quot; &quot; changes the end value to space, not a new line. print() # prints extra line. this is in the outer loop, not the inner loop, because it only wants to print a new line for each row . print(&quot;Raw matrix (list of lists): &quot;) print(keypad) print(&quot;Matrix printed using nested for loop iteration:&quot;) print_matrix1(keypad) print() . Raw matrix (list of lists): [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&#39; &#39;, 0, &#39; &#39;]] Matrix printed using nested for loop iteration 1 2 3 4 5 6 7 8 9 0 . def print_matrix2(matrix): for row in matrix: # Iterates through each &quot;row&quot; of matrix. Row is a dummy variable, it could technically be anything. It iterates through each value of matrix and each value is it&#39;s own list. in this syntax the list is stored in &quot;row&quot;. for col in row: # Iterates through each value in row. Again col, column, is a dummy variable. Each value in row is stored in col. print(col, end=&quot; &quot;) # Same as 1 print() # Same as 1 print_matrix2(keypad) . 1 2 3 4 5 6 7 8 9 0 . More Functions . Try to find another way to print the matrix. Only complete one of the two (unless you&#39;d like to do both). Below is a hint . fruit = [&quot;apples&quot;, &quot;bananas&quot;, &quot;grapes&quot;] print(fruit) print(*fruit) # Python built in function: &quot;*&quot;. Figure out what it does . [&#39;apples&#39;, &#39;bananas&#39;, &#39;grapes&#39;] apples bananas grapes . keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] def print_matrix3(matrix): for i in matrix: print(*i) print_matrix3(keypad) . 1 2 3 4 5 6 7 8 9 0 . Alternatively, find a way to print the matrix using the iter() function you already learned. Or use both! . def print_matrix4(matrix): code = &quot;your code goes here&quot; . keyboard = [[&quot;`&quot;, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;]] . Print what month you were born and how old you are by iterating through the keyboard (don&#39;t just write a string). . keyboard = [[&quot;`&quot;, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;]] print(str(keyboard[0][5]) + str(keyboard[3][9]) + str(keyboard[0][1]) + str(keyboard[0][2]) + str(keyboard[3][9]) + str(keyboard[0][2]) + str(keyboard[0][10]) + str(keyboard[0][10]) + str(keyboard[0][6]) + &quot; n&quot; + str(keyboard[0][1]) + str(keyboard[0][6])) . 5/12/2006 16 . Challenge . Change all of the letters that you DIDN&#39;T print above to spaces, &quot; &quot;, and then print the full keyboard. (the things you did print should remain in the same spot) . Alternative Challenge: If you would prefer, animate it using some form of delay so it flashes one of your letters at a time on the board in order and repeats. (this one may be slightly more intuitive) . DO NOT HARD CODE THIS. Don&#39;t make it harder on yourself, iterate through, make it abstract so it can be used dynamically. You should be able to input any string and your code should work. . . 1 6 R A H C M . If you get stuck you can just make a picture with an array and print it (I will grade based on how good it looks) . I do expect an attempt so write some code to show you tried the challenge. . keyboard = [[&quot;`&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;0&quot;, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;]] for row in keyboard: for item in row: print(item, end = &quot; &quot;) print() . ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / . keyboard = [[&quot;`&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;0&quot;, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;]] inp = input() for row in keyboard: for item in row: letterFound = True for letter in inp: if letter.lower() == item.lower(): print(letter.upper(), end = &quot; &quot;) else: letterFound = False if letterFound == False: print(&quot; &quot;, end = &quot; &quot;) print() # it kind of works:) . 1 2 3 .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/iteration",
            "relUrl": "/jupyter/iteration",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "Unit 3 Sections 5-7",
            "content": "Lesson Overview: 3.5 - Boolean Expressions . Here we will focus on: basics of Booleans | its relationship with binary | relational operators | Logical Operators | . | . What is a boolean? . A data type with two possible values: true or false | . Boolean and Binary . So similar yet so different. . Boolean math and binary notation both use the same two ciphers: 1 and 0. | However, please note that Boolean quantities are restricted to a singlular bit (can only be either 1, or 0) | On the otherhand, binary numbers may be composed of many bits adding up in place-weighted form to any finite value, or size | . Must Knows . A Boolean value is either TRUE or FALSE | The AP Exam will provide you with a reference sheet with the operators below. | . . A few ways these operators could be used... | . . Relational Operators in action . How could you use operators to determine if the average of 5 grades is greater than 80? | . With the grades below, use a boolean expression to determine if the average grade is above an 80 and print the result (True or False) | Try it in as few steps as possible! | Be creative! There are obviously TONS of different practical solutions | . gradeList = [90, 65, 60, 75, 95] averageGrade = sum(gradeList)/len(gradeList) if averageGrade &gt; 80: print(&quot;The average grade is: &quot; + averageGrade + &quot;%&quot;) else: print(&quot;The average grade is below 80%.&quot;) . The average grade is below 80%. . The versatility of relational operators: . print(&quot;100 == 100:&quot;,100==100) print(&quot;Hello == Adios:&quot;,&quot;greeting&quot;==&quot;farewell&quot;) print(&quot;Hello != Adios:&quot;,&quot;greeting&quot;!=&quot;farewell&quot;) print(&quot;Hello == Hola:&quot;,&quot;greeting&quot;==&quot;greeting&quot;) print(&quot;5&gt;=4:&quot;, 5&gt;=4) print (&#39;&#39;) # Notice that relational operators can even work on lists! # For lists, the relational operator compares each respective component until an answer is derived print(&quot;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]:&quot;, [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]) print(&quot;[1,2,3,5] &gt; [1,2,3,4]:&quot;, [1,2,3,5] &gt; [1,2,3,4]) print(&quot;[1,2,3,5] &lt; [1,2,3,4]:&quot;, [1,2,3,5] &lt; [1,2,3,4]) print(&quot;[1,2,3,5] == [1,2,3,4]:&quot;, [1,2,3,5] == [1,2,3,4]) . 100 == 100: True Hello == Adios: False Hello != Adios: True Hello == Hola: True 5&gt;=4: True [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]: False [1,2,3,5] &gt; [1,2,3,4]: True [1,2,3,5] &lt; [1,2,3,4]: False [1,2,3,5] == [1,2,3,4]: False . Logical Operators! . These types of operators don&#39;t necessarily deal with equivalent/non-equivalent values, but they rather work on operands to produce a singular boolean result . AND : returns TRUE if the operands around it are TRUE | OR : returns TRUE if at least one operand is TRUE | NOT : returns TRUE if the following boolean is FALSE | . Turn the following arithmetic phrases into either True or False statements as indicated USING LOGICAL OPERATORS . print(&quot;1 &gt; 2 or 5 &lt; 12:&quot;, 1 &gt; 2 or 5 &lt; 12) # Output TRUE using OR ^ # Output FALSE using NOT print(&quot;24 &gt; 8:&quot;, not 24 &gt; 8) # Output FALSE using AND print(&quot;10 &gt; 20:&quot;, 10 &gt; 20 and 20 &lt; 10) . 1 &gt; 2 or 5 &lt; 12: True 24 &gt; 8: False 10 &gt; 20: False . Lesson Overview: 3.6 - Conditionals . Focusing on Selection . Selection: uses a condition that evaluates to true or false . Selection determines which part of an algorithm are executed based on a condition being true or false . Algorithm is a finite set of instructions that accomplish a specific task . Conditional Statements . Also known as &quot;if statements&quot; . Can be seen as if statements or if blocks . . Can also be seen as if else statements or if else-blocks . x = 20 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) . x is greater than y . x = 20 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) else: print(&quot;x is not greater than y&quot;) . x is greater than y . Participation . -Calculate the total sum of two numbers, if it is equal to 200, print 200, if otherwise, print the sum. . num1 = 100 num2 = 150 sum = num1 + num2 # you could just do # print(sum) # because if it&#39;s 200 it&#39;ll print 200 anyways lol if sum == 200: print(200) # or just print(sum)... else: print(sum) . 250 . Lesson Overview - 3.7 Nested Conditionals . Nested conditional statements consist of conditional statements within other conditional statements | Utilizes &quot;if else&quot; statements within &quot;if else&quot; statements | . Basics of a nested conditional: | . Block Coding Visual of Nested Conditionals: | Example Psuedocode of Nested Conditional Statements | . Analyzing Code Walkthrough . Psuedocode to the left, block code to the right | Approach the problem by going through each condition one at a time . Decide which ones are false to skip and which ones are true to execute | . | You Try: . | . score = 82 if (score &gt;= 90) { console.log(&quot;You got an A, congrats!&quot;) } else { if (score &gt;= 75) { console.log(&quot;Please come to retake up to a 90 next week at tutorial!&quot;) } else { console.log(&quot;You have detention!&quot;) } } . protein = 25 carbs = 36 sugar = 11 if (carbs &gt;= 55 || protein &lt;= 20 || sugar &gt;= 15) { console.log(&quot;Your lunch is too unhealthy, please pick a new one&quot;) } else { if (carbs &lt; 35 || protein &lt; 25) { console.log (&quot;This lunch is alright but try to add some more carbs or protein&quot;) } else { if (sugar &gt;= 11) { console.log (&quot;Looks great but lets see if we can cut down on sugar, we don&#39;t want diabetes!&quot;) } else { console.log (&quot;Amazing, you created a healthy lunch!!!&quot;) } } } . Writing Nested Code Activity . Write a program that fits these conditions using nested conditionals: If a person has at least 8 hours, they are experienced | If a person is experienced their salary is 90k, if they have ten hours or above their salary 150k | If a person is inexperienced their salary is always 50k | print the salary of the person at the end and whether they are experienced or not | . | var hrs = 10 var salary = &quot;&quot; var experienced = true if (hrs &gt;= 10) { salary = &quot;150k&quot; } else if (hrs &gt;= 8) { salary = &quot;90k&quot; } else { salary = &quot;50k&quot; experienced = false } console.log(&quot;This person has... n&quot; + &quot;Salary: &quot; + salary + &quot; n&quot; + &quot;Experience: &quot; + experienced) . This person has... Salary: 150k Experience: true . Hacks Assignments: . Conditionals: . Write a program that fits these conditions using nested conditionals: If the product is expired, print &quot;this product is no good&quot; | If the cost is above 50 dollars, and the product isn&#39;t expired, print &quot;this product is too expensive&quot; | If the cost is more than 25 dollars but under 50, and the product isn&#39;t expired, print &quot;this is a regular product&quot; | If the cost is under 25 dollars, print &quot;this is a cheap product&quot; | . | . product = {&quot;expired&quot;:false, &quot;cost&quot;:10} if (product[&quot;expired&quot;] == true) { console.log(&quot;This product is no good!!!!!!!&quot;) } else { if (product[&quot;cost&quot;] &gt; 50) { console.log(&quot;THis product is too expensive!11111&quot;) } else if (product[&quot;cost&quot;] &gt; 25) { console.log(&quot;this product normal&quot;) } else { console.log(&quot;cheap&quot;) } } . cheap . Boolean/Conditionals: . Create a multiple choice quiz that ... uses Boolean expressions | uses Logical operators | uses Conditional statements | prompts quiz-taker with multiple options (only one can be right) | has at least 3 questions | . | Points will be awarded for creativity, intricacy, and how well Boolean/Binary concepts have been intertwined | . qAndA = { &quot;question&quot; : [&quot;What language was this quiz coded in?&quot;, &quot;sus amognsu&quot;, &quot;what do you think of kanye&quot;], &quot;answers&quot; : [[&quot;python&quot;,&quot;english&quot;,&quot;java&quot;,&quot;javascript&quot;], [&quot;among us&quot;,&quot;sussy baka&quot;,&quot;among among&quot;,&quot;agmosnus&quot;], [&quot;great&quot;,&quot;ok&quot;,&quot;meh&quot;,&quot;no good&quot;]], &quot;correct&quot; : [&quot;a&quot;, &quot;b&quot;, &quot;d&quot;], &quot;letters&quot; : [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;] } totalQs = len(qAndA[&quot;question&quot;]) i = 0 score = 0 while i != totalQs: qAnswered = False currentQ = qAndA[&quot;question&quot;][i] print(currentQ + &quot; n&quot;) n = 0 while n &lt; 4: print(str(qAndA[&quot;letters&quot;][n]) + &quot;: &quot; + str(qAndA[&quot;answers&quot;][i][n])) n += 1 ans = input(currentQ) ans.lower() print(&quot;&quot;) while qAnswered == False: if ans == &quot;a&quot; or &quot;b&quot; or &quot;c&quot; or &quot;d&quot;: if ans == qAndA[&quot;correct&quot;][i]: score += 1 print(&quot;correct!11111&quot;) else: print(&quot;NO&quot;) qAnswered = True else: print(&quot;Enter a valid letter option (a, b, c, or d)&quot;) print(&quot;you score is: &quot; + str(score) + &quot; n&quot;) i += 1 . What language was this quiz coded in? a: python b: english c: java d: javascript correct!11111 you score is: 1 sus amognsu a: among us b: sussy baka c: among among d: agmosnus correct!11111 you score is: 2 what do you think of kanye a: great b: ok c: meh d: no good correct!11111 you score is: 3 .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/booleans",
            "relUrl": "/jupyter/booleans",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "Unit 3 Sections 5-7",
            "content": "Lesson Overview: 3.5 - Boolean Expressions . Here we will focus on: basics of Booleans | its relationship with binary | relational operators | Logical Operators | . | . What is a boolean? . A data type with two possible values: true or false | . Boolean and Binary . So similar yet so different. . Boolean math and binary notation both use the same two ciphers: 1 and 0. | However, please note that Boolean quantities are restricted to a singlular bit (can only be either 1, or 0) | On the otherhand, binary numbers may be composed of many bits adding up in place-weighted form to any finite value, or size | . Must Knows . A Boolean value is either TRUE or FALSE | The AP Exam will provide you with a reference sheet with the operators below. | . . A few ways these operators could be used... | . . Relational Operators in action . How could you use operators to determine if the average of 5 grades is greater than 80? | . With the grades below, use a boolean expression to determine if the average grade is above an 80 and print the result (True or False) | Try it in as few steps as possible! | Be creative! There are obviously TONS of different practical solutions | . gradeList = [90, 65, 60, 75, 95] averageGrade = sum(gradeList)/len(gradeList) if averageGrade &gt; 80: print(&quot;The average grade is: &quot; + averageGrade + &quot;%&quot;) else: print(&quot;The average grade is below 80%.&quot;) . The average grade is below 80%. . The versatility of relational operators: . print(&quot;100 == 100:&quot;,100==100) print(&quot;Hello == Adios:&quot;,&quot;greeting&quot;==&quot;farewell&quot;) print(&quot;Hello != Adios:&quot;,&quot;greeting&quot;!=&quot;farewell&quot;) print(&quot;Hello == Hola:&quot;,&quot;greeting&quot;==&quot;greeting&quot;) print(&quot;5&gt;=4:&quot;, 5&gt;=4) print (&#39;&#39;) # Notice that relational operators can even work on lists! # For lists, the relational operator compares each respective component until an answer is derived print(&quot;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]:&quot;, [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]) print(&quot;[1,2,3,5] &gt; [1,2,3,4]:&quot;, [1,2,3,5] &gt; [1,2,3,4]) print(&quot;[1,2,3,5] &lt; [1,2,3,4]:&quot;, [1,2,3,5] &lt; [1,2,3,4]) print(&quot;[1,2,3,5] == [1,2,3,4]:&quot;, [1,2,3,5] == [1,2,3,4]) . 100 == 100: True Hello == Adios: False Hello != Adios: True Hello == Hola: True 5&gt;=4: True [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]: False [1,2,3,5] &gt; [1,2,3,4]: True [1,2,3,5] &lt; [1,2,3,4]: False [1,2,3,5] == [1,2,3,4]: False . Logical Operators! . These types of operators don&#39;t necessarily deal with equivalent/non-equivalent values, but they rather work on operands to produce a singular boolean result . AND : returns TRUE if the operands around it are TRUE | OR : returns TRUE if at least one operand is TRUE | NOT : returns TRUE if the following boolean is FALSE | . Turn the following arithmetic phrases into either True or False statements as indicated USING LOGICAL OPERATORS . print(&quot;1 &gt; 2 or 5 &lt; 12:&quot;, 1 &gt; 2 or 5 &lt; 12) # Output TRUE using OR ^ # Output FALSE using NOT print(&quot;24 &gt; 8:&quot;, not 24 &gt; 8) # Output FALSE using AND print(&quot;10 &gt; 20:&quot;, 10 &gt; 20 and 20 &lt; 10) . 1 &gt; 2 or 5 &lt; 12: True 24 &gt; 8: False 10 &gt; 20: False . Lesson Overview: 3.6 - Conditionals . Focusing on Selection . Selection: uses a condition that evaluates to true or false . Selection determines which part of an algorithm are executed based on a condition being true or false . Algorithm is a finite set of instructions that accomplish a specific task . Conditional Statements . Also known as &quot;if statements&quot; . Can be seen as if statements or if blocks . . Can also be seen as if else statements or if else-blocks . x = 20 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) . x is greater than y . x = 20 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) else: print(&quot;x is not greater than y&quot;) . x is greater than y . Participation . -Calculate the total sum of two numbers, if it is equal to 200, print 200, if otherwise, print the sum. . num1 = 100 num2 = 150 sum = num1 + num2 # you could just do # print(sum) # because if it&#39;s 200 it&#39;ll print 200 anyways lol if sum == 200: print(200) # or just print(sum)... else: print(sum) . 250 . Lesson Overview - 3.7 Nested Conditionals . Nested conditional statements consist of conditional statements within other conditional statements | Utilizes &quot;if else&quot; statements within &quot;if else&quot; statements | . Basics of a nested conditional: | . Block Coding Visual of Nested Conditionals: | Example Psuedocode of Nested Conditional Statements | . Analyzing Code Walkthrough . Psuedocode to the left, block code to the right | Approach the problem by going through each condition one at a time . Decide which ones are false to skip and which ones are true to execute | . | You Try: . | . score = 82 if (score &gt;= 90) { console.log(&quot;You got an A, congrats!&quot;) } else { if (score &gt;= 75) { console.log(&quot;Please come to retake up to a 90 next week at tutorial!&quot;) } else { console.log(&quot;You have detention!&quot;) } } . protein = 25 carbs = 36 sugar = 11 if (carbs &gt;= 55 || protein &lt;= 20 || sugar &gt;= 15) { console.log(&quot;Your lunch is too unhealthy, please pick a new one&quot;) } else { if (carbs &lt; 35 || protein &lt; 25) { console.log (&quot;This lunch is alright but try to add some more carbs or protein&quot;) } else { if (sugar &gt;= 11) { console.log (&quot;Looks great but lets see if we can cut down on sugar, we don&#39;t want diabetes!&quot;) } else { console.log (&quot;Amazing, you created a healthy lunch!!!&quot;) } } } . Writing Nested Code Activity . Write a program that fits these conditions using nested conditionals: If a person has at least 8 hours, they are experienced | If a person is experienced their salary is 90k, if they have ten hours or above their salary 150k | If a person is inexperienced their salary is always 50k | print the salary of the person at the end and whether they are experienced or not | . | var hrs = 10 var salary = &quot;&quot; var experienced = true if (hrs &gt;= 10) { salary = &quot;150k&quot; } else if (hrs &gt;= 8) { salary = &quot;90k&quot; } else { salary = &quot;50k&quot; experienced = false } console.log(&quot;This person has... n&quot; + &quot;Salary: &quot; + salary + &quot; n&quot; + &quot;Experience: &quot; + experienced) . This person has... Salary: 150k Experience: true . Hacks Assignments: . Conditionals: . Write a program that fits these conditions using nested conditionals: If the product is expired, print &quot;this product is no good&quot; | If the cost is above 50 dollars, and the product isn&#39;t expired, print &quot;this product is too expensive&quot; | If the cost is more than 25 dollars but under 50, and the product isn&#39;t expired, print &quot;this is a regular product&quot; | If the cost is under 25 dollars, print &quot;this is a cheap product&quot; | . | . product = {&quot;expired&quot;:false, &quot;cost&quot;:10} if (product[&quot;expired&quot;] == true) { console.log(&quot;This product is no good!!!!!!!&quot;) } else { if (product[&quot;cost&quot;] &gt; 50) { console.log(&quot;THis product is too expensive!11111&quot;) } else if (product[&quot;cost&quot;] &gt; 25) { console.log(&quot;this product normal&quot;) } else { console.log(&quot;cheap&quot;) } } . cheap . Boolean/Conditionals: . Create a multiple choice quiz that ... uses Boolean expressions | uses Logical operators | uses Conditional statements | prompts quiz-taker with multiple options (only one can be right) | has at least 3 questions | . | Points will be awarded for creativity, intricacy, and how well Boolean/Binary concepts have been intertwined | . qAndA = { &quot;question&quot; : [&quot;What language was this quiz coded in?&quot;, &quot;sus amognsu&quot;, &quot;what do you think of kanye&quot;], &quot;answers&quot; : [[&quot;python&quot;,&quot;english&quot;,&quot;java&quot;,&quot;javascript&quot;], [&quot;among us&quot;,&quot;sussy baka&quot;,&quot;among among&quot;,&quot;agmosnus&quot;], [&quot;great&quot;,&quot;ok&quot;,&quot;meh&quot;,&quot;no good&quot;]], &quot;correct&quot; : [&quot;a&quot;, &quot;b&quot;, &quot;d&quot;], &quot;letters&quot; : [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;] } totalQs = len(qAndA[&quot;question&quot;]) i = 0 score = 0 while i != totalQs: qAnswered = False currentQ = qAndA[&quot;question&quot;][i] print(currentQ + &quot; n&quot;) n = 0 while n &lt; 4: print(str(qAndA[&quot;letters&quot;][n]) + &quot;: &quot; + str(qAndA[&quot;answers&quot;][i][n])) n += 1 ans = input(currentQ) ans.lower() print(&quot;&quot;) while qAnswered == False: if ans == &quot;a&quot; or &quot;b&quot; or &quot;c&quot; or &quot;d&quot;: if ans == qAndA[&quot;correct&quot;][i]: score += 1 print(&quot;correct!11111&quot;) else: print(&quot;NO&quot;) qAnswered = True else: print(&quot;Enter a valid letter option (a, b, c, or d)&quot;) print(&quot;you score is: &quot; + str(score) + &quot; n&quot;) i += 1 . What language was this quiz coded in? a: python b: english c: java d: javascript correct!11111 you score is: 1 sus amognsu a: among us b: sussy baka c: among among d: agmosnus correct!11111 you score is: 2 what do you think of kanye a: great b: ok c: meh d: no good correct!11111 you score is: 3 .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/booleans",
            "relUrl": "/jupyter/booleans",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post56": {
            "title": "Title",
            "content": "import random # importing the &quot;random&quot; library def Dice(n): # Where “n” is the number of die rolled sum = 0 while n &gt;= 0: sum += random.randint(1, 6) n -= 1 return sum Dice(13) .",
            "url": "https://aidenhuynh.github.io/CS_Swag/2022/11/30/randomvaluessol.html",
            "relUrl": "/2022/11/30/randomvaluessol.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post57": {
            "title": "Unit 3 Sections 14 and 15",
            "content": "wget https://raw.githubusercontent.com/aidenhuynh/CS_Swag/master/_notebooks/2022-11-30-randomvalues.ipynb . Libraries . A library is a collection of precompiled codes that can be used later on in a program for some specific well-defined operations. | These precompiled codes can be referred to as modules. Each module contains bundles of code that can be used repeatedly in different programs. | A library may also contain documentation, configuration data, message templates, classes, and values, etc. | . Why are libraries important? . Using Libraries makes Python Programming simpler and convenient for the programmer. | One example would be through looping and iteration, as we don’t need to write the same code again and again for different programs. | Python libraries play a very vital role in fields of Machine Learning, Data Science, Data Visualization, etc. | . A few libraries that simplify coding processes: . Pillow allows you to work with images. | Tensor Flow helps with data automation and monitors performance. | Matplotlib allows you to make 2D graphs and plots. | . The AP Exam Refrence Sheet itself is a library! . Hacks: . Research two other Python Libraries NOT DISCUSSED DURING LESSON and make a markdown post, explaining their function and how it helps programmers code. . API&#8217;s . An Application Program Interface, or API, contains specific direction for how the procedures in a library behave and can be used. | An API acts as a gateway for the imported procedures from a library to interact with the rest of your code. | . Activity: Walkthrough with NumPy . Install NumPy on VSCode: Open New Terminal In VSCode: | pip3 install --upgrade pip | pip install numpy | | . REMEMBER: When running library code cells use Python Interpreter Conda (Version 3.9.12) . Example of using NumPy for arrays: . import numpy as np new_matrix = np.array([[1, 2, 3],[4, 5, 6],[7, 8, 9]]) print (new_matrix) . Example of using NumPy for derivatives: . import numpy as np # defining polynomial function var = np.poly1d([2, 0, 1]) print(&quot;Polynomial function, f(x): n&quot;, var) # calculating the derivative derivative = var.deriv() print(&quot;Derivative, f(x)&#39;=&quot;, derivative) # calculates the derivative of after # given value of x print(&quot;When x=5 f(x)&#39;=&quot;, derivative(5)) . Random Values . Random number generation (RNG) produces a random number (crazy right?) This means that a procedure with RNG can return different values even if the parameters (inputs) do not change | . | CollegeBoard uses RANDOM(A, B), to return an integer between integers A and B. RANDOM(1, 10) can output 1, 2, 3, 4, 5, 6, 7, 8, 9, or 10 | In Python, this would be random.randint(A, B), after importing Python&#39;s &quot;random&quot; library (import random) | JavaScript&#39;s works a little differently, with Math.random() returning a value between 0 and 1. To match Python and CollegeBoard, you could make a procedure like this | . | . | . CollegeBoard Example: What is the possible range of values for answ3 . Convert the following procedure to Python, then determine the range of outputs if n = 5. . PROCEDURE Dice(n) sum ← 0 REPEAT UNTIL n = 0 sum ← sum + RANDOM(1, 6) n ← n - 1 RETURN sum . import _____ # Fill in the blank def Dice(n): # Code here Dice(5) # Will output a range of __ to __ . Homework . Write a procedure that generates n random numbers, then sorts those numbers into lists of even and odd numbers (JS or Python, Python will be easier). . | Using NumPy and only coding in python cell, find the answer to the following questions: a. What is the derivative of 2x^5 - 6x^2 + 24x? b. What is the derivative of (13x^4 + 4x^2) / 2 when x = 9? . | Suppose you have a group of 10 dogs and 10 cats, and you want to create a random order for them. Show how random number generation could be used to create this random order. . | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/libraries",
            "relUrl": "/jupyter/libraries",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post58": {
            "title": "Robotics Scouting??!?!?!?",
            "content": "Enter team ID (be careful to enter a valid team id, code is not checking lmao) . | . Team Number Team Name School Location Sponsors Rookie Past Awards Regionals Past Rankings .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2022/11/29/Robotics_Scouting.html",
            "relUrl": "/markdown/2022/11/29/Robotics_Scouting.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post59": {
            "title": "Week 14 - Variables, Assignments, and Data Abstractions Hacks",
            "content": "def qAndRsp(prompt): print(&quot;Question: &quot; + prompt) msg = input(prompt) return msg questionsList = [ [&quot;What language was this coded in?&quot;, &quot;python&quot;], [&quot;Sussy&quot;, &quot;among us&quot;], [&quot;What letter comes after A in the alphabet?&quot;,&quot;b&quot;], [&quot;What is 3+4?&quot;,&quot;7&quot;], [&quot;What is my least favorite class?&quot;,&quot;csp&quot;], [&quot;aAAAAAaaaaaAaAaaAaaAAaaAAaaAaAaaa&quot;, &quot;&quot;], [&quot;I quit&quot;, &quot;ok&quot;], ] correct = 0 questions = len(questionsList) for QAPair in questionsList: question = QAPair[0] answer = QAPair[1] rsp = qAndRsp(question) rspLower = rsp.lower() if rspLower == answer: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(&quot;&quot;) quotient=correct/questions percentage=round((quotient * 100), 2) print(&quot;You scored &quot; + str(correct) +&quot;/&quot; + str(questions)) print(&quot;That&#39;s&quot;, percentage,&quot;%!&quot;) percentList = [ [100,&quot;Perfect!&quot;], [90,&quot;Great!&quot;], [80,&quot;Nice!&quot;], [70,&quot;Could be better&quot;], [60,&quot;Needs improvement&quot;], ] for numbersPair in percentList: numbers = numbersPair[0] note = numbersPair[1] if numbers + 10 &gt; percentage &gt;= numbers: print(note) if 60 &gt; percentage &gt; 0: print(&quot;Skill issue?&quot;) elif percentage ==0: print(&quot;Very cool!!&quot;) . Question: What language was this coded in? python is correct! Question: Sussy AMOGUS is incorrect! Question: What letter comes after A in the alphabet? b is correct! Question: What is 3+4? 7 is correct! Question: What is my least favorite class? CSP is correct! Question: aAAAAAaaaaaAaAaaAaaAAaaAAaaAaAaaa AAAHHHH is incorrect! Question: I quit me too is incorrect! You scored 4/7 That&#39;s 57.14 %! Skill issue? .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/vardata",
            "relUrl": "/jupyter/vardata",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post60": {
            "title": "Mathematical Expressions and Strings",
            "content": "What is an Algorithm? . An algorithm: a set of instructions that can accomplish a specific task. . An Algorithm Has Three Components . Sequencing: Algorithms do tasks in the order of specification. | . Selection: Helps choose two different outcomes based off a decision. | . Iteration: If a condition is true + then the code can repeat. | . Algorithms Can Be Represented in Two Ways . Flowcharts: Use shapes and arrows to represent the steps of an algorithm. | . . Pseudocode: A blend of human language and coding format. | Hacks: Jamboard Flowchart . Click on this link for a group activity . . . Arithmetic Operations . Arithmetic operations exist in most programming languages. . Basic Operations . Subtraction: . Represented by “-&quot; | . num1 = 2 - 1 . Addition: . Represented by &quot;+&quot; | . num1 = 2 + 1 . Multiplication: . Represented by “*” | . num1 = 2 * 1 . Division: . Represented by “/” | . num1 = 2 / 1 . Getting the Remainder: . Represented by “MOD” (% in python) | . num1 = 5 % 2 . Different Uses . Items can be numbers or variables. . Examples: . num1 = 10 num2 = num1 - 25 num3 = 100 * num1 num4 = num1 / num2 num5 = 9 % num4 . Order of Operations . Arithmetic operations in programming are performed in the same order as operations in mathematics: . Operations in parentheses should be done first. . | Division and multiplication should be done before addition and subtraction. . | Modulus works similar to multiplication and division. . | . Example: Evaluate num1 . num1 = 9 % 2 * ( 8 - 2 ) + 8 / ( 6 - 4 ) print(num1) . 10.0 . . . Variables . Different Ways Values are Stored in Variables . Numerical value stored in a variable . | Value of another variable stored in a variable . | Result of an operation stored in a variable . | Result of a procedure call stored in a variable . | score = 0 # 1 score = newScore # 2 score = newScore + 2 # 3 avgScore = allscores(20 + 60 + 80) # 4 . Sequencing is Important! . Changing the order of the steps changes the overall outcome + since every time the value assigned to a variable is changed + it overrides the last value which was assigned to the same variable. That is why it is important to track the value of variables + especially in code where the value is constantly changing. . num1 = 2 num2 = 4 num3 = 6 num1 = num2 + num3 # num1 is now 4 + 6 + which is 10 num2 = num1 + num3 # num2 is now (the new num1) 10 + 6 + which is 16 # output: num1 = 10 + num2 = 16 + num3 = 6 . VS . num1 = 2 num2 = 4 num3 = 6 num2 = num1 + num3 #num2 is now 8 num1 = num2 + num3 # num1 is now 14 # output: num1 = 14 + num2 = 8 + num3 = 6 . Tracking Variables . Tracking variables is a common question found on AP exams and is an important thing to keep in mind when writing any code. If the value of your variables changes a lot + not accounting for these changes can result in an unwanted outcome. . var1 = 9 var2 = 7 var3 = 2 #var = var1 + 5 #var2 = var1 - var3 #var1 = var2 #var3 = (var1 + var2) / 2 #var2 = 6 print(var1) print(var2) print(var3) . Hacks/Homework . Evaluate the variable &quot;result&quot;. . Num1 = 50 Num2 = Num1 % 9 + 15 Num3 = Num2 / Num1 + ( Num2 * 2 ) Num4 = Num3 + Num1 / 5 - 10 Result = Num4 - Num2 #its 20.4 . Num1 = 10 Num2 = Num1 % 3 * 4 Num1 = Num2 Num3 = Num1 * 3 Result = Num3 % 2 #0 . valueA = 4 valueB = 90 valueC = 17 valueB = valueC - valueA valueA = valueA * 10 if valueB &gt; 10: print(valueC) #17 . 17 . type = &quot;curly&quot; color = &quot;brown&quot; length = &quot;short&quot; type = &quot;straight&quot; hair = type + color + length print(hair) #straightbrownshort . straightbrownshort . . . Strings . What is a String? . A String: A string is a collection of characters. What is a character as character can be anything from numbers + letters + spaces + special symbols + etc. . A string is a collection of characters. What is a character as character can be anything from numbers + letters + spaces + special symbols + etc. . Certain procedures may be used with strings and they vary from programming language to language Python examples . len() to find the length of a string . lower() to convert to lowercase . etc. Pseudocode examples . len() returns the length of a string . concat() returns a string made up of the concatenated strings ex. concat(&quot;string1&quot; + &quot;string2&quot;) would return string1string2 . substring() returns the characters from the string beginning at the at the first position to the last so an example of this would be substring (&quot;abcdefghijk&quot; + 2 + 5) would print bcde (pseudocode starts at 1) . String Concatenation . What is string concatenation? . String concatenation is combining 2 or more strings to make a new strings in order to create a new string . concat() in pseudocode and varys from language to language can be used to combine to strings such as concat(&quot;cookie&quot; +&quot;monster&quot;) returns cookiemonster . Substrings . What is a substring? . A substring is a part of and already existing string. . In pseudocode substring() method is used for instance for concat(&quot;Mr.Mortenson is very handsome&quot; 1 + 2) the system would return Mr (remember that pseudocode starts at 1) . Hacks . Find the result of the following problems. Then convert the pseudocode to working python code using your knowledge of python string operators. . Problem 1 . Noun = &quot;Mr.Mortenson&quot; Adjective = &quot;handsome&quot; Adjective2 = &quot;Very&quot; Verb = &quot;is&quot; abrev = Noun[0:7] yoda = Adjective2 + &quot; &quot; + Adjective + &quot; &quot; + abrev + &quot; &quot; +Verb + &quot;.&quot; print(yoda) . Very handsome Mr.Mort is. . Problem 2 . cookie = &quot;choclate&quot; cookie2 = &quot;rasin&quot; len1 = len(cookie) / 2 len2 = len(cookie2) * 45 vote1 = str(cookie) + &quot; votes: &quot; + str(len2) vote2 = str(cookie2) + &quot; votes: &quot; + str(len1) votes = vote1 &quot; n&quot; + vote2 print(votes) . choclate votes: 225 rasin votes: 4.0 .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/mathexpressions",
            "relUrl": "/jupyter/mathexpressions",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post61": {
            "title": "Presentation Notes",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Variables, Assignments, and Data Abstraction * Keep variable names simple but not too vague * Spaces and dashes in variable names are improper syntax * Variable types: - Integers are numbers - Text/strings are words (not always) - Booleans are data that determine true/false * Lists can be stored in variables for easy access * Assignment operator allows programs to change values of a variable - = : Sets equal - += : Adds right to left - -= : Subtracts right from left - *= : Multiplies right by left - /= : Divides left by right * Data abstraction represents data in a useful form - Variables and lists * List = Ordered sequence of elements - Related items can be treated as a single value - Can keep adding elements - Store more elements in a single variable * Element = Individual value in a list with a unique index * Index = Way to reference the elements in a list or string using natural numbers (you can do negative in Python tho??) - AP Exam has it start at 1 * Python allows you to append lists to lists but on the AP Exam it just replaces the other list * Hacks * Grade: # Mathematical Expressions and Strings * Sequences are the order that algorithms do things * Selection chooses different outcomes from a decision * Iteration repeats code until true ![stuff](https://github.com/manigggg18/manimani/blob/master/images/12345.png?raw=true) * Remainder represented by MOD (% in python) * Follows same order of operations as regular mathematics * Numerical values can be stored in variables, as well as other variables, the results of mathematical operations, and results of procedure calls * Strings can be anything * Concatenation adds two strings (like just + in python) * substring(string, starting index, ending index) - substring(&quot;thisisabruhmoment&quot;, 8, 11) returns &quot;bruh&quot; (CollegeBoard index starts at 1) * Hacks * Grade: 0.9/1 # Boolean * If and else and else if * returns only 2 possible outputs, true or false * includes &lt;, &gt;, =, !=, etc. * Hacks * Grade: 0.95/1 # Lists &amp; Iteration * Iteration is the repetition of a process - Loops (for, while, recursive) * Matrices are complicated lol * Hacks * Grade: 1/1 # Algorithms * Algorithms are processes through code * Conditions are boolean expressions that output true or false * Binary search finds the index of specific values in a list by splitting in half the max(?) * Hacks * Grade: 0.9/1 # Procedures * Procedures are named groups of programming instructions that may have parameters and return values - Parameters are inputs like n in function(n) - return values are the outputs kind of - Also called methods and functions * Arguments specify the values of parameters * Procedure calls interrupt the sequential execution of statements to execute code within the procedure before continuing where the procedure was called * Procedures can return blocks of statements or data like booleans or values * Procedure names should be succinct - Consider input values, purpose - Start with a flowchart (NO) * Hacks * Grade: 0.75/1 # Simulations * Used to test hypothetical situations to prevent real-world consequences * Hacks * Grade: 0.8/1 # Algorithmic Efficiency * Minimize resources used (mainly time and memory) * Efficiency can be determined with time complexity or space complexity - Bubble sort better than insertion because takes less iterations * Heuristic solutions are shortcuts, not necessarily optimal but can make it faster * Hacks * Grade: 0/1 (OOPS)",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2022/11/28/notes.html",
            "relUrl": "/markdown/2022/11/28/notes.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post62": {
            "title": "Week 13 Review Ticket",
            "content": "Week 13 Review Ticket . Binary Hacks | Show working kernels | Show working docker | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2022/11/18/Week_13_Hacks-copy.html",
            "relUrl": "/markdown/review_ticket/2022/11/18/Week_13_Hacks-copy.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post63": {
            "title": "Week 11 Review Ticket",
            "content": "Week 11 Review Ticket . . Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Night at the Museum I only visited other periods of CSP and CSA (and Psych for other reasons), but I saw some pretty cool stuff, however I only took pictures before it started, of people&#39;s VSCode (because I thought it would be funny), and only took photos of two groups because I kind of forgot. Here is a picture of a phone taking a picture of someone&#39;s Dictionary website using an API. Here is a picture of a crime data website. | CollegeBoard Multiple Choice Questions Score: 45/50 Corrections: The correct answer is C because honestly I read the question too fast and flipped the &quot;&lt;&quot; If x is less than 0 (negative) then y is defined and the procedure will return &quot;True&quot;, otherwise it returns nothing. The answer is A because the application *would* need Brandon and Cynthia&#39;s usernames to find their dietary restrictions, but not of everyone on their contacts list. I don&#39;t really get this one. The answer isn&#39;t A because routing on the internet is usually dynamic, meaning that the order is not specified in advance. On this one I knew both A and D would work, but I didn&#39;t realize I was supposed to select multiple answers. The reason I went with D, however, is because it is what I would have done. | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2022/11/04/NatM_Blog.html",
            "relUrl": "/markdown/2022/11/04/NatM_Blog.html",
            "date": " • Nov 4, 2022"
        }
        
    
  
    
        ,"post64": {
            "title": "Who's That Pokémon?",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . . Who&#39;s That Pokémon? . HOW TO PLAY . Press start | Choose generation of Pokémon (Gen 8 not yet fully supported by PokéAPI) | Submit Pokémon name with the button or Enter | Press Next or Enter | Repeat until all Pokémon are correct or until 3 incorrect answers | | . | . | . CLICK TO START | . A better version of the game (with global stats) can be found here . .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2022/10/20/whothatpokemon.html",
            "relUrl": "/markdown/2022/10/20/whothatpokemon.html",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post65": {
            "title": "Week 7 Review Ticket",
            "content": "Week 7 Review Ticket . . Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . API: YouTube Downloader | Final Project Planning | Code Corrections | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2022/10/09/Week_7_Review_Ticket.html",
            "relUrl": "/markdown/review_ticket/2022/10/09/Week_7_Review_Ticket.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post66": {
            "title": "Week 7 - API Testing",
            "content": "I will add frontend to make this useable on the blog for everyone rather than just in this notebook later. . import json, requests, getpass, sys class color: BOLD = &#39; 033[91m&#39; UNDERLINE = &#39; 033[91m&#39; END = &#39; 033[0m&#39; # This doesn&#39;t really work except make things red, don&#39;t know why print(color.BOLD + &quot;YouTube Video Downloader with APIs: n&quot; + color.END) apiFound = False while apiFound == False: print(color.UNDERLINE + &quot;Enter a valid YouTube Video URL or ID:&quot; + color.END) videoURL = input(&quot;Enter a valid YouTube Video URL or ID:&quot;) videoID = videoURL[-11:] print(getpass.getuser() + &quot;: &quot; + videoURL) url = &quot;https://ytstream-download-youtube-videos.p.rapidapi.com/dl&quot; querystring = {&quot;id&quot;:videoID} headers = { &quot;X-RapidAPI-Key&quot;: &quot;e51c67fa22mshec43200baacf5b3p148027jsn10e3e84c629e&quot;, &quot;X-RapidAPI-Host&quot;: &quot;ytstream-download-youtube-videos.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) json = response.json() if json[&#39;status&#39;] == &quot;fail&quot;: print(color.BOLD + &quot; nYou have inputted an invalid YouTube ID, please try again. n&quot; + color.END) else: apiFound = True formatList = json.get(&#39;formats&#39;) qualityFound = False while qualityFound == False: print(color.UNDERLINE + &quot; nAvailable qualities:&quot; + color.END) i = 2 while i &gt;= 0: print(formatList[i][&#39;qualityLabel&#39;]) i -= 1 print(&quot;Note: 144p is &quot; + color.BOLD + &quot;AUDIO-ONLY&quot; + color.END) print(color.UNDERLINE + &quot; nEnter chosen quality (from the list):&quot; + color.END) chosenQuality = input(&quot;Enter chosen quality (from the list)&quot;) print(getpass.getuser() + &quot;: &quot; + chosenQuality) chosenQuality.lower() downloadURL = 0 if chosenQuality == formatList[0][&#39;qualityLabel&#39;]: downloadURL = 0 qualityFound = True elif chosenQuality == formatList[1][&#39;qualityLabel&#39;]: downloadURL = 1 qualityFound = True elif chosenQuality == formatList[2][&#39;qualityLabel&#39;]: downloadURL = 2 qualityFound = True else: print(color.BOLD + &quot; nThe selected resolution is not available, please try again.&quot; + color.END) print(color.UNDERLINE + &quot; nDownload link: n&quot; +formatList[downloadURL][&#39;url&#39;] + color.END + &quot; n nTo download, click on the three dots in the bottom-right then press download.&quot;) . YouTube Video Downloader with APIs: Enter a valid YouTube Video URL or ID: Aiden: https://www.youtube.com/watch?v=TApmI8YtYhc Available qualities: 144p 360p 720p Note: 144p is AUDIO-ONLY Enter chosen quality (from the list): Aiden: The selected resolution is not available, please try again. Available qualities: 144p 360p 720p Note: 144p is AUDIO-ONLY Enter chosen quality (from the list): Aiden: 720p Download link: https://rr5sn-4g5edns6.googlevideo.com/videoplayback?expire=1665633762&amp;ei=gjlHY9jRAZqy1wK45qGADQ&amp;ip=23.88.39.196&amp;id=o-AFKqeirNm7pBz-qtDw5uSZ_D3elyevEQf-n9Y6w3bR8Z&amp;itag=22&amp;source=youtube&amp;requiressl=yes&amp;mh=KX&amp;mm=31%2C29&amp;mn=sn-4g5edns6%2Csn-4g5lznez&amp;ms=au%2Crdu&amp;mv=m&amp;mvi=5&amp;pl=26&amp;initcwndbps=282500&amp;vprv=1&amp;svpuc=1&amp;mime=video%2Fmp4&amp;cnr=14&amp;ratebypass=yes&amp;dur=3.134&amp;lmt=1630135775777054&amp;mt=1665611831&amp;fvip=3&amp;fexp=24001373%2C24007246&amp;c=ANDROID&amp;txp=5311224&amp;sparams=expire%2Cei%2Cip%2Cid%2Citag%2Csource%2Crequiressl%2Cvprv%2Csvpuc%2Cmime%2Ccnr%2Cratebypass%2Cdur%2Clmt&amp;sig=AOq0QJ8wRQIgYCqH0FduYsIW4JcOIHh5xZ2r0KWTxifgEXKIWCSoUF4CIQDTRUhB15r0QljszhXWoY7-EcvgO8ejS72TmIvw8_dPkA%3D%3D&amp;lsparams=mh%2Cmm%2Cmn%2Cms%2Cmv%2Cmvi%2Cpl%2Cinitcwndbps&amp;lsig=AG3C_xAwRAIgKFiwJ7fK4qGudS8wcyOjcGxbSR1z4qxmBuROzt83OfgCIBc-Yn0sbcrF0uzKoLLreDgflqrsmbIQsu9U6_RgDMvh To download, click on the three dots in the bottom-right then press download. .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/markdown/2022/10/05/API_Test.html",
            "relUrl": "/jupyter/markdown/2022/10/05/API_Test.html",
            "date": " • Oct 5, 2022"
        }
        
    
  
    
        ,"post67": {
            "title": "Making TETRIS",
            "content": "Planning . Use Javascript setInterval() for block gravity Potentially make the interval a variable that increases over time or with difficulty settings | . | . | Block saving sounds hard, do that last maybe | A list of each block type? | . Day #1 (10/4/22) . // html zone for later . var gameRunning = 0; //variables for easy difficulty changes, settings options implemented later? var time = 500; // change for initial speed in ms var acceleration = 10000; // how long it takes before increasing speed in ms function timer() { time -= 50 }; function gravity() { //gravity code poggers }; function gameStart() { // do an onclick event on html button gameRunning = 1 //change screen?}; while (gameRunning === 1) { setInterval(timer, acceleration) // every ___ milliseconds the speed will increase if (time &gt;= 10) { setInterval(gravity, time) } else { setInterval(gravity, 10) // speed caps at 10ms } }; while (gameRunning === 0) { // score screen or somethin } //ok like the timer works but it doesnt stop because i don&#39;t have a stop thing yet . 450 400 350 300 250 200 150 100 50 0 -50 -100 -150 -200 -250 -300 -350 -400 -450 -500 -550 -600 -650 -700 -750 -800 -850 -900 -950 -1000 -1050 -1100 -1150 -1200 -1250 -1300 -1350 -1400 -1450 -1500 -1550 -1600 -1650 -1700 -1750 -1800 -1850 -1900 -1950 -2000 -2050 -2100 -2150 -2200 -2250 -2300 -2350 -2400 -2450 -2500 -2550 -2600 -2650 -2700 -2750 -2800 -2850 -2900 -2950 -3000 -3050 -3100 -3150 -3200 -3250 -3300 -3350 -3400 -3450 -3500 -3550 -3600 -3650 -3700 -3750 -3800 -3850 -3900 -3950 -4000 -4050 -4100 -4150 -4200 -4250 -4300 -4350 -4400 -4450 -4500 -4550 -4600 -4650 -4700 -4750 -4800 -4850 -4900 -4950 -5000 -5050 -5100 -5150 -5200 -5250 -5300 -5350 -5400 -5450 -5500 -5550 -5600 -5650 -5700 -5750 -5800 -5850 -5900 -5950 -6000 -6050 -6100 -6150 -6200 -6250 -6300 -6350 -6400 -6450 -6500 -6550 -6600 -6650 -6700 -6750 -6800 -6850 -6900 -6950 -7000 -7050 -7100 -7150 -7200 -7250 -7300 -7350 -7400 -7450 -7500 -7550 -7600 -7650 -7700 -7750 -7800 -7850 -7900 -7950 -8000 -8050 -8100 -8150 -8200 -8250 -8300 -8350 -8400 -8450 -8500 -8550 -8600 -8650 -8700 -8750 -8800 -8850 -8900 -8950 -9000 -9050 -9100 -9150 -9200 -9250 -9300 -9350 -9400 -9450 -9500 -9550 -9600 -9650 -9700 -9750 -9800 -9850 -9900 -9950 -10000 -10050 -10100 -10150 -10200 -10250 -10300 -10350 -10400 -10450 -10500 -10550 -10600 -10650 -10700 -10750 -10800 -10850 -10900 -10950 -11000 -11050 -11100 -11150 -11200 -11250 -11300 -11350 -11400 -11450 -11500 -11550 -11600 -11650 -11700 -11750 -11800 -11850 -11900 -11950 -12000 -12050 -12100 -12150 -12200 -12250 -12300 -12350 -12400 -12450 -12500 -12550 -12600 -12650 -12700 -12750 -12800 -12850 -12900 -12950 -13000 -13050 -13100 -13150 -13200 -13250 -13300 -13350 -13400 -13450 -13500 -13550 -13600 -13650 -13700 -13750 -13800 -13850 -13900 -13950 -14000 -14050 -14100 -14150 -14200 -14250 -14300 -14350 -14400 -14450 -14500 -14550 -14600 -14650 -14700 -14750 -14800 -14850 -14900 -14950 -15000 -15050 -15100 -15150 -15200 -15250 -15300 -15350 -15400 -15450 -15500 -15550 -15600 -15650 -15700 -15750 -15800 -15850 -15900 -15950 -16000 -16050 -16100 -16150 -16200 -16250 -16300 -16350 -16400 -16450 -16500 -16550 -16600 -16650 -16700 -16750 -16800 -16850 -16900 -16950 -17000 -17050 -17100 -17150 -17200 -17250 -17300 -17350 -17400 -17450 -17500 -17550 -17600 -17650 -17700 -17750 -17800 -17850 -17900 -17950 -18000 -18050 -18100 -18150 -18200 -18250 -18300 -18350 -18400 -18450 -18500 -18550 -18600 -18650 -18700 -18750 -18800 -18850 -18900 -18950 -19000 -19050 -19100 -19150 -19200 -19250 -19300 -19350 -19400 -19450 -19500 -19550 -19600 -19650 -19700 -19750 -19800 -19850 -19900 -19950 -20000 -20050 -20100 -20150 -20200 -20250 -20300 -20350 -20400 -20450 -20500 -20550 -20600 -20650 -20700 -20750 -20800 -20850 -20900 -20950 -21000 -21050 -21100 -21150 -21200 -21250 -21300 -21350 -21400 -21450 -21500 -21550 -21600 -21650 -21700 -21750 -21800 -21850 -21900 -21950 -22000 -22050 -22100 -22150 -22200 -22250 -22300 -22350 -22400 -22450 -22500 -22550 -22600 -22650 -22700 -22750 -22800 -22850 -22900 -22950 -23000 -23050 -23100 -23150 -23200 -23250 -23300 -23350 -23400 -23450 -23500 -23550 -23600 -23650 -23700 -23750 -23800 -23850 -23900 -23950 -24000 -24050 -24100 -24150 -24200 -24250 -24300 -24350 -24400 -24450 -24500 -24550 -24600 -24650 -24700 -24750 -24800 -24850 -24900 -24950 -25000 -25050 -25100 -25150 -25200 -25250 -25300 -25350 -25400 -25450 -25500 -25550 -25600 -25650 -25700 -25750 -25800 -25850 -25900 -25950 -26000 -26050 -26100 -26150 -26200 -26250 -26300 -26350 -26400 -26450 -26500 -26550 -26600 -26650 -26700 -26750 -26800 -26850 -26900 -26950 -27000 -27050 -27100 -27150 -27200 -27250 -27300 -27350 -27400 -27450 -27500 -27550 -27600 -27650 -27700 -27750 -27800 -27850 -27900 -27950 -28000 -28050 -28100 -28150 -28200 -28250 -28300 -28350 -28400 -28450 -28500 -28550 -28600 -28650 -28700 -28750 -28800 -28850 -28900 -28950 -29000 -29050 -29100 -29150 -29200 -29250 -29300 -29350 -29400 -29450 -29500 -29550 -29600 -29650 -29700 -29750 -29800 -29850 -29900 -29950 -30000 -30050 -30100 -30150 -30200 -30250 -30300 -30350 -30400 -30450 -30500 -30550 -30600 -30650 -30700 -30750 -30800 -30850 -30900 -30950 -31000 -31050 -31100 -31150 -31200 -31250 -31300 -31350 -31400 -31450 -31500 -31550 -31600 -31650 -31700 -31750 -31800 -31850 -31900 -31950 -32000 -32050 -32100 -32150 -32200 -32250 -32300 -32350 -32400 -32450 -32500 -32550 -32600 -32650 -32700 -32750 -32800 -32850 -32900 -32950 -33000 -33050 -33100 -33150 -33200 -33250 -33300 -33350 -33400 -33450 -33500 -33550 -33600 -33650 -33700 -33750 -33800 -33850 -33900 -33950 -34000 -34050 -34100 -34150 -34200 -34250 -34300 -34350 -34400 -34450 -34500 -34550 -34600 -34650 -34700 -34750 -34800 -34850 -34900 -34950 -35000 -35050 -35100 -35150 -35200 -35250 -35300 -35350 -35400 -35450 -35500 -35550 -35600 -35650 -35700 -35750 -35800 -35850 -35900 -35950 -36000 -36050 -36100 -36150 -36200 -36250 -36300 -36350 -36400 -36450 -36500 -36550 -36600 -36650 -36700 -36750 -36800 -36850 -36900 -36950 -37000 -37050 -37100 -37150 -37200 -37250 -37300 -37350 -37400 . Day 2 (10/20/22) . After looking online at some examples of TETRIS with js, I have noticed that I would need to write a minimum of like 1,500 lines of code so I have given up on this and am now moving to do Who&#39;s That Pokemon. .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/markdown/2022/09/30/tetris-testing.html",
            "relUrl": "/jupyter/markdown/2022/09/30/tetris-testing.html",
            "date": " • Sep 30, 2022"
        }
        
    
  
    
        ,"post68": {
            "title": "Week 6 - Deployment",
            "content": "Week 6 Review Ticket . . Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . CollegeBoard MCQs (1.1, 1.2, 1.3) I got a point off on 1.2 because I forgot like basic Integrated math (5*3 vs 5^3) | . AWS Deployment (curl output) (webapp) ubuntu@ip-172-31-28-68:~/Flask_Swag$ curl http://localhost:8086&lt;br/&gt; &lt;!-- Custom file for standardizing Project Data&lt;br/&gt; This HTML is setup as as a Jinja2 layout, coders use layouts for:&lt;br/&gt; ... standardization of style&lt;br/&gt; ... setting expectations for data&lt;br/&gt; ... code reuse&lt;br/&gt; --&gt;&lt;br/&gt; &lt;!DOCTYPE HTML&gt;&lt;br/&gt; &lt;html lang=&quot;en&quot;&gt;&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; &lt;br/&gt; &lt;br/&gt; &lt;br/&gt; &lt;br/&gt; &lt;head&gt;&lt;br/&gt; &lt;!-- Required meta tags --&gt;&lt;br/&gt; &lt;meta charset=&quot;utf-8&quot;&gt;&lt;br/&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;&lt;br/&gt; &lt;br/&gt; &lt;!-- JQuery CSS --&gt;&lt;br/&gt; &lt;script src=&quot;https://code.jquery.com/jquery-3.3.1.slim.min.js&quot; integrity=&quot;sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;&lt;br/&gt; &lt;!-- Bootstrap CSS --&gt;&lt;br/&gt; &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; integrity=&quot;sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;br/&gt; &lt;br/&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css&quot;&gt;&lt;br/&gt; &lt;style&gt;&lt;br/&gt; .navbar {&lt;br/&gt; position: static;&lt;br/&gt; z-index: 9999;&lt;br/&gt; }&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; &lt;/style&gt;&lt;br/&gt; &lt;br/&gt; &lt;title&gt;Nighthawk Coding | Home &lt;/title&gt;&lt;br/&gt; &lt;br/&gt; &lt;/head&gt;&lt;br/&gt; &lt;br/&gt; &lt;body&gt;&lt;br/&gt; &lt;!-- Navigation Bar from bootstrap&lt;br/&gt; This HTML is setup as a fragment allowing it to be &quot;included&quot; by other HTML files via Jinja2&lt;br/&gt; --&gt;&lt;br/&gt; &lt;nav class=&quot;navbar navbar-expand-lg navbar-light bg-light&quot;&gt;&lt;br/&gt; &lt;img src=&quot;/static/assets/ncs_logo.png&quot; width=&quot;50&quot; height=&quot;50&quot; class=&quot;d-inline-block align-center&quot; alt=&quot;&quot;&gt;&lt;br/&gt; &lt;a class=&quot;navbar-brand&quot; href=&quot;https://csp.nighthawkcodingsociety.com/&quot;&gt;Nighthawk Coding&lt;/a&gt;&lt;br/&gt; &lt;button class=&quot;navbar-toggler&quot; type=&quot;button&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#navbarNavAltMarkup&quot; aria-controls=&quot;navbarNavAltMarkup&quot; aria-expanded=&quot;false&quot; aria-label=&quot;Toggle navigation&quot;&gt;&lt;br/&gt; &lt;span class=&quot;navbar-toggler-icon&quot;&gt;&lt;/span&gt;&lt;br/&gt; &lt;/button&gt;&lt;br/&gt; &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;navbarNavAltMarkup&quot;&gt;&lt;br/&gt; &lt;div class=&quot;navbar-nav&quot;&gt;&lt;br/&gt; &lt;!-- url_for is a Jinja2 pre-processor that finds route from function name (def) --&gt;&lt;br/&gt; &lt;a class=&quot;nav-link&quot; href=/&gt;Home&lt;/a&gt;&lt;br/&gt; &lt;a class=&quot;nav-link&quot; href=/stub/&gt;Sign-Up&lt;/a&gt;&lt;br/&gt; &lt;/div&gt;&lt;br/&gt; &lt;/div&gt;&lt;br/&gt; &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;navbarNavDarkDropdown&quot;&gt;&lt;br/&gt; &lt;ul class=&quot;navbar-nav&quot;&gt;&lt;br/&gt; &lt;li class=&quot;nav-item dropdown&quot;&gt;&lt;br/&gt; &lt;a class=&quot;nav-link dropdown-toggle&quot; href=&quot;#&quot; id=&quot;navbarDarkDropdownMenuLink&quot; role=&quot;button&quot; data-bs-toggle=&quot;dropdown&quot; aria-expanded=&quot;false&quot;&gt;&lt;br/&gt; Blogs&lt;br/&gt; &lt;/a&gt;&lt;br/&gt; &lt;ul class=&quot;dropdown-menu dropdown-menu-dark&quot; aria-labelledby=&quot;navbarDarkDropdownMenuLink&quot;&gt;&lt;br/&gt; &lt;li&gt;&lt;a class=&quot;dropdown-item&quot; href=/projects/portfolio/&gt;Portfolio&lt;/a&gt;&lt;/li&gt;&lt;br/&gt; &lt;li&gt;&lt;a class=&quot;dropdown-item&quot; href=/projects/kangaroos/&gt;Kangaroos&lt;/a&gt;&lt;/li&gt;&lt;br/&gt; &lt;li&gt;&lt;a class=&quot;dropdown-item&quot; href=/projects/walruses/&gt;Dash&#39;s Blog&lt;/a&gt;&lt;/li&gt;&lt;br/&gt; &lt;li&gt;&lt;a class=&quot;dropdown-item&quot; href=/projects/aidensblog/&gt;Aiden&#39;s Blog&lt;/a&gt;&lt;/li&gt;&lt;br/&gt; &lt;/ul&gt;&lt;br/&gt; &lt;/li&gt;&lt;br/&gt; &lt;/ul&gt;&lt;br/&gt; &lt;/div&gt;&lt;br/&gt; &lt;/nav&gt;&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; &lt;!-- Start of body content specific to page --&gt;&lt;br/&gt; &lt;html&gt;&lt;br/&gt; &lt;head&gt;&lt;br/&gt; &lt;style&gt;&lt;br/&gt; html,body { height:100%; }&lt;br/&gt; .mainDiv {&lt;br/&gt; text-align: center;&lt;br/&gt; padding: 30px;&lt;br/&gt; background-color: #4d4d4dbe;&lt;br/&gt; margin: auto;&lt;br/&gt; border-radius:25px;&lt;br/&gt; width:50%;&lt;br/&gt; height:80%;&lt;br/&gt; }&lt;br/&gt; h2.titleText {&lt;br/&gt; font-family: &quot;Courier New&quot;;&lt;br/&gt; color:rgb(0, 255, 170);&lt;br/&gt; }&lt;br/&gt; .button {&lt;br/&gt; width: 100%;&lt;br/&gt; height: 15%;&lt;br/&gt; background-color: rgba(255, 255, 255, 0.9);&lt;br/&gt; border: 0px;&lt;br/&gt; border-radius:10px;&lt;br/&gt; }&lt;br/&gt; &lt;/style&gt;&lt;br/&gt; &lt;/head&gt;&lt;br/&gt; &lt;br&gt;&lt;br/&gt; &lt;div class=&quot;mainDiv&quot;&gt;&lt;br/&gt; &lt;body&gt;&lt;br/&gt; &lt;h1 style=&quot;color:rgb(0, 255, 170);text-align:center;text-align:center;font-family:&#39;Courier New&#39;&quot;&gt;title text&lt;/h1&gt; &lt;br/&gt; &lt;i style=&quot;color:rgb(212, 212, 212)&quot;&gt;this doesn&#39;t do anything yet&lt;/i&gt;&lt;br/&gt; &lt;br&gt;&lt;br/&gt; &lt;br&gt;&lt;br/&gt; &lt;br&gt;&lt;br/&gt; &lt;button class=&quot;button&quot;&gt;GAME TITLE 1&lt;/button&gt;&lt;br/&gt; &lt;br&gt;&lt;br/&gt; &lt;br&gt;&lt;br/&gt; &lt;button class=&quot;button&quot;&gt;GAME TITLE 2&lt;/button&gt;&lt;br/&gt; &lt;br&gt;&lt;br/&gt; &lt;br&gt;&lt;br/&gt; &lt;button class=&quot;button&quot;&gt;GAME TITLE 3&lt;/button&gt;&lt;br/&gt; &lt;br&gt;&lt;br/&gt; &lt;br&gt;&lt;br/&gt; &lt;button class=&quot;button&quot;&gt;GAME TITLE 4&lt;/button&gt;&lt;br/&gt; &lt;/body&gt;&lt;br/&gt; &lt;/div&gt;&lt;br/&gt; &lt;/html&gt;&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; &lt;!-- Bootstrap 5.0 Bundle with Popper --&gt;&lt;br/&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js&quot; integrity=&quot;sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;&lt;br/&gt; &lt;/body&gt;&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; &lt;script src=&quot;/static/js/three.r119.min.js&quot;&gt;&lt;/script&gt;&lt;br/&gt; &lt;script src=&quot;/static/js/vanta.birds.min.js&quot;&gt;&lt;/script&gt;&lt;br/&gt; &lt;script&gt;&lt;br/&gt; VANTA.BIRDS({&lt;br/&gt; el: &quot;body&quot;,&lt;br/&gt; mouseControls: true,&lt;br/&gt; touchControls: true,&lt;br/&gt; gyroControls: false,&lt;br/&gt; minHeight: 200.00,&lt;br/&gt; minWidth: 200.00,&lt;br/&gt; scale: 1.00,&lt;br/&gt; scaleMobile: 1.00&lt;br/&gt; })&lt;br/&gt; &lt;/script&gt; . | &lt;/ul&gt; | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2022/09/26/Week_6_Review_Ticket.html",
            "relUrl": "/markdown/review_ticket/2022/09/26/Week_6_Review_Ticket.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post69": {
            "title": "Week 5 - UI Starters",
            "content": "Week 5 Review Ticket . . Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Program Purpose Hacks | Submenu (above) | Java Testing (on the submenu) | Flask stuff | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2022/09/25/Week_5_Review_Ticket.html",
            "relUrl": "/markdown/review_ticket/2022/09/25/Week_5_Review_Ticket.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post70": {
            "title": "Submenu Test",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2022/09/25/Submenu_Test.html",
            "relUrl": "/markdown/2022/09/25/Submenu_Test.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post71": {
            "title": "Week 5 - Program Purpose Hacks",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Questions: . Do we have final project ideas for a PBL Web Project? We are thinking of making a website that contains multiple different games, something like coolmathgames.com | Each person will be making their own game, and we will assist each other along the way | . | Are we considering a project that is best for our educational purpose? In working primarily by ourselves on our own games, we will be more susceptible to running into problems, thus allowing for more learning opportunities | . | Is the project going to hold team members interest for 8 weeks? We like games, we like to code -&gt; coding + games = mega cool! | . | Does the project have potential for someone to use it beyond the 8 weeks? ie Customer or Sponsor needed? People don&#39;t really need games but it might be fun to revisit now and then | . | Does the project have potential to be used for Create Performance Task submission? My game will be Tetris, which has potential for Create Performance Task submission as it uses data abstraction in the lists of possible tetricles | . | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/markdown/2022/09/23/Program_Purpose_Hacks.html",
            "relUrl": "/jupyter/markdown/2022/09/23/Program_Purpose_Hacks.html",
            "date": " • Sep 23, 2022"
        }
        
    
  
    
        ,"post72": {
            "title": "Week 5 - Java Testing",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . console.log output . var bruh = &quot;cool coding&quot;; console.log(bruh); . cool coding . console.log as a Function . function print(output) { console.log(output) } print(bruh) print(&quot; &quot;) print(&quot;Can also be numbers:&quot;) print(100) . cool coding Can also be numbers: 100 . Getting Input Types . function printType(output) { console.log(&quot;This is a&quot;, typeof output+&quot;:&quot;, output); } print(&quot;You don&#39;t have to specify what type of value inputs are (string or int)&quot;) printType(&quot;Text&quot;); printType(bruh); // bruh = a string, therefore... printType(100); printType([1,2,3]); // object is generic for arrays (array = list) . You don&#39;t have to specify what type of value inputs are (string or int) This is a string: Text This is a string: cool coding This is a number: 100 This is a object: [ 1, 2, 3 ] . Coin Flipper . function coinFlip() { var flip = Math.random() if(flip &lt; &quot;0.5&quot;) { console.log(&quot;It&#39;s Heads!&quot;) } else if(flip &gt; &quot;0.5&quot;) { console.log(&quot;It&#39;s Tails!&quot;) } else { console.log(&quot;It landed on it&#39;s side!&quot;) // This is a 0.00000000000001% chance } } var coinCount = 10 while (coinCount&gt;0) { coinCount=(coinCount-1); coinFlip(); } . It&#39;s Heads! It&#39;s Tails! It&#39;s Tails! It&#39;s Tails! It&#39;s Heads! It&#39;s Heads! It&#39;s Tails! It&#39;s Tails! It&#39;s Heads! It&#39;s Tails! . Table with Java . function htmlsource() { // i could not figure out arrays return ( &quot;&lt;head&gt;&quot; + &quot;&lt;style&gt;&quot; + &quot;table, th, td, tr {&quot; + &quot;border: 1px solid #000000;&quot; + &quot;text-align: left;&quot; + &quot;padding: 8px;&quot; + &quot;}&quot; + &quot;&lt;/style&gt;&quot; + &quot;&lt;/head&gt;&quot; + &quot;&lt;table&gt;&quot; + &quot;&lt;tr&gt;&quot; + &quot;&lt;th&gt;&lt;b&gt;&quot; + &quot;Name&quot; + &quot;&lt;/b&gt;&lt;/th&gt;&quot; + &quot;&lt;th&gt;&lt;b&gt;&quot; + &quot;Role&quot; + &quot;&lt;/b&gt;&lt;/th&gt;&quot; + &quot;&lt;/tr&gt;&quot; + &quot;&lt;tr&gt;&quot; + &quot;&lt;td&gt;&quot; + &quot;Aiden&quot; + &quot;&lt;/td&gt;&quot; + &quot;&lt;td&gt;&quot; + &quot;Scrum Master&quot; + &quot;&lt;/td&gt;&quot; + &quot;&lt;/tr&gt;&quot; + &quot;&lt;tr&gt;&quot; + &quot;&lt;td&gt;&quot; + &quot;Dash&quot; + &quot;&lt;/td&gt;&quot; + &quot;&lt;td&gt;&quot; + &quot;Backend Developer&quot; + &quot;&lt;/td&gt;&quot; + &quot;&lt;/tr&gt;&quot; + &quot;&lt;tr&gt;&quot; + &quot;&lt;td&gt;&quot; + &quot;Sabine&quot; + &quot;&lt;/td&gt;&quot; + &quot;&lt;td&gt;&quot; + &quot;Frontend Developer&quot; + &quot;&lt;/td&gt;&quot; + &quot;&lt;/tr&gt;&quot; + &quot;&lt;tr&gt;&quot; + &quot;&lt;td&gt;&quot; + &quot;Aiden&quot; + &quot;&lt;/td&gt;&quot; + &quot;&lt;td&gt;&quot; + &quot;Backend Developer&quot; + &quot;&lt;/td&gt;&quot; + &quot;&lt;/tr&gt;&quot; + &quot;&lt;/table&gt;&quot; ) } $$.html(htmlsource()); . . NameRole . Aiden | Scrum Master | . Dash | Backend Developer | . Sabine | Frontend Developer | . Aiden | Backend Developer | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/markdown/2022/09/21/Java_Test.html",
            "relUrl": "/jupyter/markdown/2022/09/21/Java_Test.html",
            "date": " • Sep 21, 2022"
        }
        
    
  
    
        ,"post73": {
            "title": "Time Box",
            "content": ". Week Review Ticket Points . TRI 1 | . 0 | Week 0 Review Ticket | Tools and Setup | . 1 | Week 1 Review Ticket | Intro to Python, Bash, and Fastpages Frontend Development | . 2 | Week 2 Review Ticket | Dictionaries, Lists, Loops, and HTML Fragments | . 3 | Week 3 Review Ticket | AppLab Planning/Blogging, AppLab Creation, Plan for end of Tri project | . 4 | Week 4 Review Ticket | Python Web Server Project, Focus and Habits, Collaboration | . 5 | Week 5 Review Ticket | UI Starters, Agile, Javascript, Frontend | . 6 | Week 6 Review Ticket | Deployment, MCQs | . 7 | Week 7 Review Ticket | N/A | . TRI 2 | . 13 | Week 13 Review Ticket | Binary Hacks | . 17 | Week 17 Review Ticket | Project Planning | . 18 | Week 18 Review Ticket | Object-Oriented Programming | . 19 | Week 19 Review Ticket | Create Task Grading &amp; Backend Stuff | . 20 | Week 20 Review Ticket | MCQ Test 2, 5.1, 5.2, &amp; Project WOrk | . 21 | Week 21 Review Ticket | 5.4, 5.3 | . 22 | Week 23 Review Ticket | 5.5, 5.6, and Project Work | . 24 | Week 24 Review Ticket | Tri-2 Final Project | . TRI 3 . 25 | Week 24 Review Ticket | MCQ 3, 2.2, 2.3 | . . lmao imagine keeping an up to date time box .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2022/09/18/timebox.html",
            "relUrl": "/markdown/2022/09/18/timebox.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post74": {
            "title": "Week 4 Video Presentation",
            "content": "",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2022/09/18/Week_4_Video.html",
            "relUrl": "/markdown/2022/09/18/Week_4_Video.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post75": {
            "title": "Week 4 Review Ticket - Python Web Server Project",
            "content": "Psychology and the Good Life Goals: (ACTUALLY DO THESE, EFFORT -&gt; HAPPINESS) Create something fun outside of class (SUPERSCRUMMERS) | Fun game for groups to play | More team building with the team | Make a substantial impact on the Robotics club | Offer help to classmates (particularly in psych) | 8-10hrs of sleep | . | Video Review | Collaboration My group is completely random as I hadn&#39;t known any of them aside from Dash | Not entirely sure about common interests | There is some variance in gender and a lot in culture. | Unsure of skill sets, but they are all interested in Computer Science | . | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2022/09/18/Week_4_Review_Ticket.html",
            "relUrl": "/markdown/review_ticket/2022/09/18/Week_4_Review_Ticket.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post76": {
            "title": "Sprint Backlog",
            "content": "Sprint Backlog: . Current Sprint: Python Web Server Project . Make video | Show local hosted servers | . Super Scrummers . I have actually no idea what we’re doing | . Other: . Create task planning | Figure out collaboration | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2022/09/12/Sprint_Backlog.html",
            "relUrl": "/markdown/2022/09/12/Sprint_Backlog.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post77": {
            "title": "Week 3 - Creative Development",
            "content": "Week 3 Review Ticket - Creative Development . AppLab Planning | AppLab Creation: The RNG Test(click for code) function Code() { hideElement(&quot;buttonContinue&quot;); hideElement(&quot;buttonRestart&quot;); hideElement(&quot;textTitle&quot;); var ans1 = &quot;nothing&quot;; var ans2 = &quot;nothing&quot;; var ans3 = &quot;nothing&quot;; var ans4 = &quot;nothing&quot;; var socialCredit = 0; var ans = 0; setText(&quot;textScore&quot;, &quot;Score: 0&quot;); function Correctans() { Hidebuttons(); setScreen(&quot;screenCorrect&quot;); showElement(&quot;buttonContinue&quot;); socialCredit += 15; Questions(); setText(&quot;textScore&quot;, &quot;Score: &quot;+socialCredit); } function Incorrectans() { Hidebuttons(); setScreen(&quot;screenIncorrect&quot;); showElement(&quot;buttonRestart&quot;); socialCredit = &quot;-30,000,000&quot;; onEvent(&quot;buttonRestart&quot;, &quot;click&quot;, function( ) { Code(); }); } function Questioncheck() { onEvent(&quot;buttonTL&quot;, &quot;click&quot;, function( ) { if (ans1 === &quot;correct&quot;) { Correctans(); } else { Incorrectans(); } }); onEvent(&quot;buttonTR&quot;, &quot;click&quot;, function( ) { if (ans2 === &quot;correct&quot;) { Correctans(); } else { Incorrectans(); } }); onEvent(&quot;buttonBL&quot;, &quot;click&quot;, function( ) { if (ans3 === &quot;correct&quot;) { Correctans(); } else { Incorrectans(); } }); onEvent(&quot;buttonBR&quot;, &quot;click&quot;, function( ) { if (ans4 === &quot;correct&quot;) { Correctans(); } else { Incorrectans(); } }); } function Randomans() { ans = randomNumber(0, 3); if (ans === 0) { ans1 = &quot;correct&quot;; ans2 = &quot;incorrect&quot;; ans3 = &quot;incorrect&quot;; ans4 = &quot;incorrect&quot;; } else if (ans === 1) { ans2 = &quot;correct&quot;; ans1 = &quot;incorrect&quot;; ans3 = &quot;incorrect&quot;; ans4 = &quot;incorrect&quot;; } else if (ans === 2) { ans3 = &quot;correct&quot;; ans1 = &quot;incorrect&quot;; ans2 = &quot;incorrect&quot;; ans4 = &quot;incorrect&quot;; } else { ans4 = &quot;correct&quot;; ans1 = &quot;incorrect&quot;; ans2 = &quot;incorrect&quot;; ans3 = &quot;incorrect&quot;; } } function Showbuttons() { setScreen(&quot;screenQuestions&quot;); showElement(&quot;buttonTL&quot;); showElement(&quot;buttonTR&quot;); showElement(&quot;buttonBL&quot;); showElement(&quot;buttonBR&quot;); showElement(&quot;boxQuestions&quot;); setPosition(&quot;buttonTL&quot;, 6, 275, 150, 70); setPosition(&quot;buttonTR&quot;, 164, 275, 150, 70); setPosition(&quot;buttonBL&quot;, 6, 353, 150, 70); setPosition(&quot;buttonBR&quot;, 164, 353, 150, 70); setPosition(&quot;boxQuestions&quot;, 30, 30, 260, 130); } function Showstart() { setScreen(&quot;screenStart&quot;); showElement(&quot;buttonStart&quot;); showElement(&quot;textTitle&quot;); } function Hidestart() { hideElement(&quot;buttonStart&quot;); hideElement(&quot;textTitle&quot;); } function Hidebuttons() { hideElement(&quot;buttonTL&quot;); hideElement(&quot;buttonTR&quot;); hideElement(&quot;buttonBL&quot;); hideElement(&quot;buttonBR&quot;); hideElement(&quot;boxQuestions&quot;); } function Questions() { if (socialCredit === 0) { setText(&quot;boxQuestions&quot;, &quot;Heads or Tails?&quot;); setText(&quot;buttonTL&quot;, &quot;Heads&quot;); setText(&quot;buttonTR&quot;, &quot;Tails&quot;); setText(&quot;buttonBL&quot;, &quot;Both&quot;); setText(&quot;buttonBR&quot;, &quot;Neither&quot;); var x = randomNumber(0, 1); if (x === 0) { ans1 = &quot;correct&quot;; } else if (x === 1) { ans2 = &quot;correct&quot;; } Questioncheck(); } else if (socialCredit === 15) { Randomans(); onEvent(&quot;buttonContinue&quot;, &quot;click&quot;, function() { hideElement(&quot;buttonContinue&quot;); Showbuttons(); setText(&quot;boxQuestions&quot;, &quot;Pick a number 1 - 4&quot;); setText(&quot;buttonTL&quot;, &quot;1&quot;); setText(&quot;buttonTR&quot;, &quot;2&quot;); setText(&quot;buttonBL&quot;, &quot;3&quot;); setText(&quot;buttonBR&quot;, &quot;4&quot;); }); } else if (socialCredit === 30) { Randomans(); onEvent(&quot;buttonContinue&quot;, &quot;click&quot;, function() { hideElement(&quot;buttonContinue&quot;); Showbuttons(); setText(&quot;boxQuestions&quot;, &quot;Which is correct?&quot;); setText(&quot;buttonTL&quot;, &quot;This one&quot;); setText(&quot;buttonTR&quot;, &quot;This one&quot;); setText(&quot;buttonBL&quot;, &quot;This one&quot;); setText(&quot;buttonBR&quot;, &quot;This one&quot;); }); } else { setScreen(&quot;screenVicroy&quot;); } } Showstart(); Hidebuttons(); onEvent(&quot;buttonStart&quot;, &quot;click&quot;, function( ) { Showbuttons(); Hidestart(); Questions(); }); } Code(); | Create Task Planning | Sprint backlog | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2022/09/10/Week_3_Review_Ticket.html",
            "relUrl": "/markdown/review_ticket/2022/09/10/Week_3_Review_Ticket.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post78": {
            "title": "Week 3 - Create Task Planning",
            "content": "Requirements: . Code Analysis: (4.A) Clearly state program&#39;s purpose, functionality, inputs, and outputs (written response) | Video showing program functioning (CAN NOT BE SCREENSHOTS) Input | Program functionality | Output | . | . | Data Abstraction: (3.B) Two segments: Data storage (list) | Stored data being used as part of fulfilling the program&#39;s purpose | . | Identify the name of the list | Describe the data within the list and how it relates to the program | . | Managing Complexity: (3.C) Program code segment that uses a list to simplify otherwise needlessly complex code (like the python quiz for loop) | Explain how the list simplifies the code, and how to code it would be coded differently without the list (written) | . | Procedural Abstraction: (3.B) Use abstraction to simplify programs A procedure with at least one parameter that affects the functionality of the procedure | Show where the procedure is being called | . | Describe the function of the procedure and how it simplifies the program | . | Algorithm Implementation: (2.B) An algorithm including... Sequencing | Selection | Iteration | . | Explain the steps of the algorithm with great detail | . | Testing: (4.C) Describe two calls to the procedure. Each call must pass a different argument that cause a different segment of code in the algorithm to execute. | Describe the condition being tested by each call to the procedure. | Identify the result of each call. | . | . Collaboration Rules: . 2 students working on the same program Pair programming | Dividing a complex program into different parts | . | Giving feedback | Providing debugging assistance | Citing code from a peer &quot;A collaborative peer&quot; to protect anonymity | . | . Planning: TETRIS . Concern: I have started this with javascript for the flask website but is it possible to use python instead for flask? | Requirements: Purpose: To entertain? idk | Functionality: | List: different shapes and colors, use a randomizer to pull from lists | Input: user key inputs: arrow keys, spacebar | Procedure: shape-selection procedure that randomizes the shape and then the color. | Output: blocks on screen and stuff | Algorithm: To check for the positions of each block and if each row is filled | . | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/markdown/2022/09/10/Create_Task_Planning.html",
            "relUrl": "/jupyter/markdown/2022/09/10/Create_Task_Planning.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post79": {
            "title": "Week 3 - AppLab Planning",
            "content": "AppLab Planning - RNG Test . Plans: Russian roulette? | Coin flip? | A “quiz” that uses random functions to randomize the correct answer | . | Progress: Tried to make a list for the questions but decided not to because I’m not that familiar with Java. | Made basic title and question screens, and a “Start” button to switch from one to the other. Made a 50/50 question for heads or tails, with two other answers that are always wrong. | Added questions and started to work on an answer randomization system that assigns a number from 0-3 to the variable “x”, and the correct answer would correspond to one of the 4 possible values for x. | Implemented the questions to the screen using setScreen commands and made a sort of recursive loop for setting the questions and verifying the answer. Also added victory and failure screens. | Added a score tracker (social credit) at the bottom of the screen that increases by 15 for each correct answer. The questions use an “if” function to check the value of the score, and sets the text to the proper question based on it. | | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2022/09/10/AppLab_Planning.html",
            "relUrl": "/markdown/2022/09/10/AppLab_Planning.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post80": {
            "title": "Loops, Dictionaries, and Lists",
            "content": "For Loop Test . This algorithm loops the given block of code for a known number of cycles. In this case it is twice because we have appended two dictionaries to the list. . InfoDb = [] # Data structure with keys and values # Append to list a Dictionary of key/values related to a person and their hobbies InfoDb.append({ &quot;FirstName&quot;: &quot;Aiden&quot;, &quot;LastName&quot;: &quot;Huynh&quot;, &quot;DOB&quot;: &quot;May 12&quot;, &quot;Residence&quot;: &quot;Escondido&quot;, &quot;Email&quot;: &quot;ah5993909@gmail.com&quot;, &quot;Hobbies&quot;: [&quot;Gaming&quot;, &quot;Video Editing&quot;] }) # Append a 2nd dictionary InfoDb.append({ &quot;FirstName&quot;: &quot;Avinh&quot;, &quot;LastName&quot;: &quot;Huynh&quot;, &quot;DOB&quot;: &quot;December 27&quot;, &quot;Residence&quot;: &quot;Escondido&quot;, &quot;Email&quot;: &quot;avinhahuynh@gmail.com&quot;, &quot;Hobbies&quot;: [&quot;Gaming&quot;, &quot;Streaming&quot;] }) # Prints all of the dictionary values def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # comma adds space between two values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t adds an indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print() # Loop algorithm def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Aiden Huynh Residence: Escondido Birth Day: May 12 Hobbies: Gaming, Video Editing Avinh Huynh Residence: Escondido Birth Day: December 27 Hobbies: Gaming, Streaming . While Loop Test . This algorithm only loops while a certain condition is met. In this case, it will only loop while the variable &quot;i&quot; is less than the number of items in the list given by the len command. The way we make this function is by adding one to &quot;i&quot; at the end of each loop, making it increase by one for each cycle until eventually becoming equal to the number of items in the list, thus ending the loop. . InfoDb = [] # Data structure with keys and values # Append to list a Dictionary of key/values related to a person and their hobbies InfoDb.append({ &quot;FirstName&quot;: &quot;Aiden&quot;, &quot;LastName&quot;: &quot;Huynh&quot;, &quot;DOB&quot;: &quot;May 12&quot;, &quot;Residence&quot;: &quot;Escondido&quot;, &quot;Email&quot;: &quot;ah5993909@gmail.com&quot;, &quot;Hobbies&quot;: [&quot;Gaming&quot;, &quot;Video Editing&quot;] }) # Append a 2nd dictionary InfoDb.append({ &quot;FirstName&quot;: &quot;Avinh&quot;, &quot;LastName&quot;: &quot;Huynh&quot;, &quot;DOB&quot;: &quot;December 27&quot;, &quot;Residence&quot;: &quot;Escondido&quot;, &quot;Email&quot;: &quot;avinhahuynh@gmail.com&quot;, &quot;Hobbies&quot;: [&quot;Gaming&quot;, &quot;Streaming&quot;] }) # Prints all of the dictionary values def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # comma adds space between two values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t adds an indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print() # While Loop -&gt; While a specified condition is met (i &lt; len(InfoDb)), it will loop def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output Aiden Huynh Residence: Escondido Birth Day: May 12 Hobbies: Gaming, Video Editing Avinh Huynh Residence: Escondido Birth Day: December 27 Hobbies: Gaming, Streaming . Recursive Loop Test . Functions pretty much the same as the above while loop, except it runs itself within the loop to add 1 to i. . InfoDb = [] # Data structure with keys and values # Append to list a Dictionary of key/values related to a person and their hobbies InfoDb.append({ &quot;FirstName&quot;: &quot;Aiden&quot;, &quot;LastName&quot;: &quot;Huynh&quot;, &quot;DOB&quot;: &quot;May 12&quot;, &quot;Residence&quot;: &quot;Escondido&quot;, &quot;Email&quot;: &quot;ah5993909@gmail.com&quot;, &quot;Hobbies&quot;: [&quot;Gaming&quot;, &quot;Video Editing&quot;] }) # Append a 2nd dictionary InfoDb.append({ &quot;FirstName&quot;: &quot;Avinh&quot;, &quot;LastName&quot;: &quot;Huynh&quot;, &quot;DOB&quot;: &quot;December 27&quot;, &quot;Residence&quot;: &quot;Escondido&quot;, &quot;Email&quot;: &quot;avinhahuynh@gmail.com&quot;, &quot;Hobbies&quot;: [&quot;Gaming&quot;, &quot;Streaming&quot;] }) # Prints all of the dictionary values def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # comma adds space between two values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t adds an indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print() # Recursive Loop -&gt; keeps incrementing on each call (n+1) until exit condition is met def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Aiden Huynh Residence: Escondido Birth Day: May 12 Hobbies: Gaming, Video Editing Avinh Huynh Residence: Escondido Birth Day: December 27 Hobbies: Gaming, Streaming . Reversed List . GList = [ [&quot;Apple&quot;, &quot;1.32&quot;], [&quot;Orange&quot;, &quot;1.45&quot;], [&quot;Banana&quot;, &quot;0.62&quot;], [&quot;Strawberry&quot;, &quot;0.11&quot;], [&quot;Blueberry&quot;, &quot;0.02&quot;], [&quot;Pineapple&quot;, &quot;2.18&quot;], [&quot;Watermelon&quot;, &quot;4.98&quot;], [&quot;Kiwi&quot;, &quot;1.07&quot;], [&quot;Mango&quot;, &quot;1.32&quot;], [&quot;Grape&quot;, &quot;0.03&quot;] ] # Reverses the list GList.reverse() print(GList) . [[&#39;Grape&#39;, &#39;0.03&#39;], [&#39;Mango&#39;, &#39;1.32&#39;], [&#39;Kiwi&#39;, &#39;1.07&#39;], [&#39;Watermelon&#39;, &#39;4.98&#39;], [&#39;Pineapple&#39;, &#39;2.18&#39;], [&#39;Blueberry&#39;, &#39;0.02&#39;], [&#39;Strawberry&#39;, &#39;0.11&#39;], [&#39;Banana&#39;, &#39;0.62&#39;], [&#39;Orange&#39;, &#39;1.45&#39;], [&#39;Apple&#39;, &#39;1.32&#39;]] . Randomized List . import random # Imports various commands for randomization # List of fruits and their prices GList = [ [&quot;Apple&quot;, &quot;1.32&quot;], [&quot;Orange&quot;, &quot;1.45&quot;], [&quot;Banana&quot;, &quot;0.62&quot;], [&quot;Strawberry&quot;, &quot;0.11&quot;], [&quot;Blueberry&quot;, &quot;0.02&quot;], [&quot;Pineapple&quot;, &quot;2.18&quot;], [&quot;Watermelon&quot;, &quot;4.98&quot;], [&quot;Kiwi&quot;, &quot;1.07&quot;], [&quot;Mango&quot;, &quot;1.32&quot;], [&quot;Grape&quot;, &quot;0.03&quot;] ] # Randomizes (shuffles) the list random.shuffle(GList) print(GList) . [[&#39;Strawberry&#39;, &#39;0.11&#39;], [&#39;Mango&#39;, &#39;1.32&#39;], [&#39;Orange&#39;, &#39;1.45&#39;], [&#39;Watermelon&#39;, &#39;4.98&#39;], [&#39;Grape&#39;, &#39;0.03&#39;], [&#39;Banana&#39;, &#39;0.62&#39;], [&#39;Blueberry&#39;, &#39;0.02&#39;], [&#39;Kiwi&#39;, &#39;1.07&#39;], [&#39;Pineapple&#39;, &#39;2.18&#39;], [&#39;Apple&#39;, &#39;1.32&#39;]] . Random Grocery List Generator . Uses lists and a loop to generate a specified number of fruits and their respective prices, along with the sum of all of the prices. . import random # List of fruits and their prices GList = [ [&quot;Apple&quot;, &quot;1.32&quot;], [&quot;Orange&quot;, &quot;1.45&quot;], [&quot;Banana&quot;, &quot;0.62&quot;], [&quot;Strawberry&quot;, &quot;0.11&quot;], [&quot;Blueberry&quot;, &quot;0.02&quot;], [&quot;Pineapple&quot;, &quot;2.18&quot;], [&quot;Watermelon&quot;, &quot;4.98&quot;], [&quot;Kiwi&quot;, &quot;1.07&quot;], [&quot;Mango&quot;, &quot;1.32&quot;], [&quot;Grape&quot;, &quot;0.03&quot;] ] print(&quot;Input the desired number of fruits (esc to cancel):&quot;) fruitCount = input() # Prompts user on the desired amount of fruits # k defines the number of fruits to pull, and by setting that equal to the input(), we pull only the amount desired by the user selectedPairs = random.choices(GList, k=int(fruitCount)) # int() is used because k must be an integer, did not do this in line 18 because input() must be a string to be printed print(&quot;You selected &quot;+fruitCount+&quot; fruits:&quot;) # This section defines the first term as the fruit and second as the corresponding price, allowing us to use each part separately for pricePair in selectedPairs: fruit = pricePair[0] price = pricePair[1] print(fruit+&quot;: $&quot;+price) # Calculates the sum of the prices n = float(price) sum = sum+n total = round(sum, 2) print(&quot;Your total is: $&quot;+str(total)) sum = 0 . Input the desired number of fruits (esc to cancel): You selected 10 fruits: Strawberry: $0.11 Apple: $1.32 Strawberry: $0.11 Blueberry: $0.02 Grape: $0.03 Apple: $1.32 Pineapple: $2.18 Strawberry: $0.11 Mango: $1.32 Banana: $0.62 Your total is: $7.14 . Quiz using lists . Basic Python Quiz .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/markdown/2022/09/05/dictionaries-test.html",
            "relUrl": "/jupyter/markdown/2022/09/05/dictionaries-test.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post81": {
            "title": "Week 2 - Data Abstraction & HTML Fragments",
            "content": "Week 2 Review Ticket - Data Abstraction &amp; HTML Fragments . Data Abstraction For Loop Test | With Loop Test | Recursive Loop | Reversed List | Randomized List | Randomized Grocery List (Application of lists and other stuff) | Test with lists (from Week 1) | | &quot;Actually Important Table&quot; Time Box on Home Page (Click for code) Code for table . &lt;html&gt; &lt;head&gt; &lt;style&gt; table { font-family: arial, sans-serif; border-collapse: collapse; width: 100%; } td, th { border: 1px solid #dddddd; text-align: left; padding: 8px; } tr:nth-child(even) { background-color: #dddddd; } tr:nth-child(odd) { background-color: #ffffff; } &lt;/style&gt; &lt;/head&gt; &lt;table&gt; &lt;tr&gt; &lt;th&gt;Week&lt;/th&gt; &lt;th&gt;Review Ticket&lt;/th&gt; &lt;th&gt;Points&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;0&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://aidenhuynh.github.io/CS_Swag/markdown/2022/09/03/Week_0_Hacks.html&quot;&gt;Week 0 - Review Ticket&lt;/a&gt;&lt;/td&gt; &lt;td&gt;Tools and Setup&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://aidenhuynh.github.io/CS_Swag/markdown/2022/09/04/Week_1_Hacks.html&quot;&gt;Week 1 - Review Ticket&lt;/a&gt;&lt;/td&gt; &lt;td&gt;Intro to Python, Bash, and Fastpages Frontend Development&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://aidenhuynh.github.io/CS_Swag/markdown/2022/09/05/Week_2_Review_Ticket.html&quot;&gt;Week 2 - Review Ticket&lt;/a&gt;&lt;/td&gt; &lt;td&gt;Dictionaries, Lists, Loops, and HTML Fragments&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;3&lt;/td&gt; &lt;td&gt;incomplete&lt;/td&gt; &lt;td&gt;AppLab Planning/Blogging, AppLab Creation, Plan for end of Tri project&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/html&gt; . | Remote theme change Before: Very unreadable because I think that&#39;s kind of funny. After: I actually really like these changes, however they get rid of the top bars for searching, tags, and the about me. Also, the images that are too large (for example, on my Week 0 Hacks) get stretched or squished to fit. Then again, I also think this is kind of funny. | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2022/09/05/Week_2_Review_Ticket.html",
            "relUrl": "/markdown/review_ticket/2022/09/05/Week_2_Review_Ticket.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post82": {
            "title": "Week 1 - Intro to Python, Bash, and Fastpages Frontend Development",
            "content": "Week 1 Review Ticket - Intro to Python, Bash, and Fastpages . Bash Hacks | My Python Quiz (using lists) | Fastpages Frontend Development _notebook file | _post with image (it&#39;s at the bottom) | _docx file | Edited &quot;About me&quot; section | | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2022/09/04/Week_1_Hacks.html",
            "relUrl": "/markdown/review_ticket/2022/09/04/Week_1_Hacks.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post83": {
            "title": "Week 1 - Bash Hacks",
            "content": "Week 1 - Bash Hacks . A conditional command can help to verify the versions of programs and tools | To verify Anaconda and its installed version, conda list can be used | git add will download the needed files from the repository, git commit will commit to the repository, and git push will push the changes to the repository. | Scripts can be run to automate various tasks such as the installation of programs (like a .exe file). | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2022/09/04/Week_1_Bash.html",
            "relUrl": "/markdown/2022/09/04/Week_1_Bash.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post84": {
            "title": "Basic Python Quiz",
            "content": "import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 6 correct = 0 firstQ = False print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) while firstQ == False: rsp = question_with_response(&quot;Are you ready to take a test?&quot;) rsp.lower() if rsp == &quot;yes&quot;: print(getpass.getuser() +&quot;: yes&quot;) print(&quot;Great!&quot;) firstQ = True elif rsp == &quot;no&quot;: print(getpass.getuser() +&quot;: no&quot;) print(&quot;Too bad!&quot;) firstQ = True else: print(&quot;It&#39;s a yes or no question.&quot;) questionsList = [ [&quot;What command is used to include other functions that were previously developed?&quot;, &quot;import&quot;], [&quot;What command is used to evaluate correct or incorrect response in this example?&quot;, &quot;if&quot;], [&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;, &quot;expression&quot;], [&quot;What command is used to define functions?&quot;, &quot;def&quot;], [&quot;What are two or more lines of code called?&quot;, &quot;sequence&quot;], [&quot;What command is used to show text on your screen?&quot;, &quot;print&quot;] ] for QAPair in questionsList: question = QAPair[0] answer = QAPair[1] rsp = question_with_response(question) rsp.lower() if rsp == answer: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) quotient=correct/questions percentage=round((quotient * 100), 2) print(getpass.getuser()+&quot;, you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) print(&quot;That&#39;s&quot;, percentage,&quot;%!&quot;) percentList = [ [100,&quot;Perfect!&quot;], [90,&quot;Great!&quot;], [80,&quot;Nice!&quot;], [70,&quot;Could be better&quot;], [60,&quot;Needs improvement&quot;], ] for numbersPair in percentList: numbers = numbersPair[0] note = numbersPair[1] if numbers + 10 &gt; percentage &gt;= numbers: print(note) if 60 &gt; percentage &gt; 0: print(&quot;Skill issue?&quot;) elif percentage ==0: print(&quot;Very cool!!&quot;) # I am so cool . Hello, Aiden running /Users/Aiden/opt/anaconda3/bin/python You will be asked 6 questions. Question: Are you ready to take a test? Aiden: yes Great! Question: What command is used to include other functions that were previously developed? def is incorrect! Question: What command is used to evaluate correct or incorrect response in this example? is incorrect! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? is incorrect! Question: What command is used to define functions? is incorrect! Question: What are two or more lines of code called? is incorrect! Question: What command is used to show text on your screen? is incorrect! Aiden, you scored 0/6 That&#39;s 0.0 %! Very cool!! .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/markdown/2022/09/04/Python_Quiz.html",
            "relUrl": "/jupyter/markdown/2022/09/04/Python_Quiz.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post85": {
            "title": "Psychology Ch 9 Corrections",
            "content": "Q # Question &amp; Analysis Why? . E . X . A . M . P . L . E . | Question: . What did Lev Vygotsky state about children’s learning? . Correct Answer (write it out, not just the letter!): . Social contact is essential to intellectual development . Why the correct answer is right (content based explanation): . Vygotsky’s theory about the zone of proximal development indicates that children learn from mentors or coaches. . Why your answer was wrong (re-word the q to make your wrong ans right): . Q: What did Albert Bandura suggest about the way children learn? . A: He said that children learn through observational learning, or imitation. . If your wrong answer cannot be made correct, just explain: . Children learn by imitating others was my incorrect choice, but Vygotsky is not the one who says this, this is more along the lines of what Albert Bandura’s theories suggest. . Textbook page you referenced for your explanation: Chapter 1 Sec 2 (pg. 15) . | Choose one: . Didn’t study . Read question wrong . Absent when taught . Never understood concept . Other (specify) . | . | Question: . Which of the following techniques used by professional therapists are highly likely to promote the construction of false memories? . Correct Answer (write it out, not just the letter!): . Hypnosis, imagination-enhancing techniques, and drug-induced recall. . Why the correct answer is right (content based explanation): . All of these techniques can implant false memories. Those with vivid imaginations were found to be more susceptible to “imagination inflation,” where repeatedly imagining nonexistent events creates false memories. Therefore, enhancing imagination would increase the amount of false memories. Drug-induced recall and hypnosis have been criticized heavily by psychologists, to the point of being agreed upon as unreliable by several large organizations. . Why your answer was wrong (re-word the q to make your wrong ans right): . What psychotherapy practice(?) used by professional therapists are highly likely to promote the construction of false memories? . If your wrong answer cannot be made correct, just explain: . Textbook page you referenced for your explanation: . 383, 388 . | Choose one: . Didn’t study . Read question wrong . Absent when taught . Never understood concept . Other . (Answer said “all of the above, but only two were above so I just chose one”) . | . | | | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/2022/09/04/Psychology-Ch-9-Corrections.html",
            "relUrl": "/2022/09/04/Psychology-Ch-9-Corrections.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post86": {
            "title": "First Jupyter Post",
            "content": "import getpass swag = &quot;what&#39;s up gamers&quot; print(swag) def cool(sample): print(sample) ans = input() return ans rsp = cool(&quot;Blog: Say something cool&quot;) if rsp == &quot;something cool&quot;: print(getpass.getuser()+&quot;: &quot;+rsp) print(&quot;Blog: haha very clever 😐&quot;) else: print(getpass.getuser()+&quot;: &quot;+rsp) print(&quot;Blog: haha yeah that is pretty cool!&quot;) . what&#39;s up gamers Blog: Say something cool Aiden: poggers .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/2022/09/03/first.html",
            "relUrl": "/jupyter/2022/09/03/first.html",
            "date": " • Sep 3, 2022"
        }
        
    
  
    
        ,"post87": {
            "title": "Week 0 Review Ticket - Tools and Setup",
            "content": "Week 0 Review Ticket - Tools and Setup . My GitHub | FastPages Blog | My First Markdown/HTML Post | My First Jupyter Post | Proof of IDE (VSCode) | My Insights | bruh | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2022/09/03/Week_0_Hacks.html",
            "relUrl": "/markdown/2022/09/03/Week_0_Hacks.html",
            "date": " • Sep 3, 2022"
        }
        
    
  
    
        ,"post88": {
            "title": "First Post?! (with markdown)",
            "content": "Swag! . This is my first post (wowzers!) . list of things that i know i have to do for next week currently but will probably drastically change as the week progresses but I don’t know how to make something more useful than a table so this is what we get for now . Class Monday Tuesday Whensday Thursday FriDay . BC | labor day | just check the calendar man | – | learning check probably | – | . US history! | labor day | this class doesnt do homework lol | – | leanring rhceck peboablty |   | . Am ;pt | labor day | Thesis and parachute! | – | – | lit circle read 20pg/day :() | . Psycholololology | labor day | notso npts | nots notes | uh oh testing time D: | idk | . CS P wit mort | labor day | i have | np odea | wjat o, doing | - | . (thanks to Dash for showing me how to make a table with markdown) .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2022/09/02/iamdash.html",
            "relUrl": "/markdown/2022/09/02/iamdash.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post89": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Enter bits below: . | Submit | . | . Plus/Minus Binary Octal Hexadecimal Decimal . | 00000000 | 0 | 0 | 0 | . | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  
    
        ,"post90": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "😂😂😂 WHO DID THIS 😂😂😂",
          "content": "I am Aiden Huynh (pronounced “win”), creator of this website. Yep. I did this. SAMPLE TEXT .",
          "url": "https://aidenhuynh.github.io/CS_Swag/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  

  

  

  

  
  

  
      ,"page17": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://aidenhuynh.github.io/CS_Swag/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}