{
  
    
        "post0": {
            "title": "Week 24 Review Ticket",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Runtime Links Backend | Frontend | . | Technical Accomplishments A LOT of garbage checking through test() function and alerts | Utilize GET, PUT, PATCH, and DELETE methods for full CRUD (This took most of my time) | Use of localStorage in conjunction with database | Tons of features for optimizing user experience | Search bar | Garbage checking | Favoriting system with options to show only favorites or clear all favorites | When editing, automatically focus on text box with event listeners for Enter key on input and Escape key to revert changes | . Frontend dev stuff (actually doing stuff that fits my role) | Site-wide theme applied and edited to match website | Navbar that darkens on hover | Stars darken on hover, stars, Xs, and editable text changes cursor to indicate that they are interactive | Placeholders to show template for the adding box and placeholders to show what editable text was originally | . . | Create Performance Task Video | Written response | . | Github Statistics | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2023/03/26/Week_24_Hacks.html",
            "relUrl": "/markdown/review_ticket/2023/03/26/Week_24_Hacks.html",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Create Performance Task",
            "content": "Video . Written Portion . 3a) . 3ai) . This program is intended to help users like small businesses easily and quickly find information about items they have in storage to maintain stock. . 3aii) . The user searches for pencils and different items from the list matching that name are returned on the table with varying data about them. . 3aiii) . The user inputs “Pencils” into the searchbar and only the matching items that were in the table are outputted to the updated table. . 3b) . 3bi) . var data = [ { &quot;id&quot;:1, &quot;date&quot;:&quot;01-05-2023&quot;, &quot;action&quot;:&quot;Shipped&quot;, &quot;item&quot;:&quot;Pencils&quot;, &quot;quantity&quot;:&quot;1500&quot;, }, { &quot;id&quot;:2, &quot;date&quot;:&quot;02-07-2023&quot;, &quot;action&quot;:&quot;Delivered&quot;, &quot;item&quot;:&quot;Pens&quot;, &quot;quantity&quot;:&quot;1000&quot;, }, { &quot;id&quot;:3, &quot;date&quot;:&quot;02-02-2023&quot;, &quot;action&quot;:&quot;Packaged&quot;, &quot;item&quot;:&quot;Markers&quot;, &quot;quantity&quot;:&quot;300&quot;, }, { &quot;id&quot;:4, &quot;date&quot;:&quot;01-15-2023&quot;, &quot;action&quot;:&quot;In Transit&quot;, &quot;item&quot;:&quot;Highlighters&quot;, &quot;quantity&quot;:&quot;100&quot;, }, { &quot;id&quot;:5, &quot;date&quot;:&quot;01-05-2023&quot;, &quot;action&quot;:&quot;Shipped&quot;, &quot;item&quot;:&quot;Pencils&quot;, &quot;quantity&quot;:&quot;1500&quot;, }, { &quot;id&quot;:6, &quot;date&quot;:&quot;02-07-2023&quot;, &quot;action&quot;:&quot;Delivered&quot;, &quot;item&quot;:&quot;Pens&quot;, &quot;quantity&quot;:&quot;1000&quot;, }, { &quot;id&quot;:7, &quot;date&quot;:&quot;02-02-2023&quot;, &quot;action&quot;:&quot;Packaged&quot;, &quot;item&quot;:&quot;Markers&quot;, &quot;quantity&quot;:&quot;300&quot;, }, { &quot;id&quot;:8, &quot;date&quot;:&quot;01-15-2023&quot;, &quot;action&quot;:&quot;In Transit&quot;, &quot;item&quot;:&quot;Highlighters&quot;, &quot;quantity&quot;:&quot;100&quot;, }, { &quot;id&quot;:9, &quot;date&quot;:&quot;01-05-2023&quot;, &quot;action&quot;:&quot;Shipped&quot;, &quot;item&quot;:&quot;Pencils&quot;, &quot;quantity&quot;:&quot;1500&quot;, } ] . 3bii) . searchBar.addEventListener(&quot;keyup&quot;, function() { search(dataList) } ) . 3biii) . The list being used in section 3bii is called dataList . 3biv) . dataList contains dictionaries corresponding to different items and their properties, including their name, the associated action, the date in which this action occurred, and the quantity of the item. . 3bv) . dataList helps manage complexity because it allows the algorithm (shown in section 3ci), search(list) to compare the input to the names of every item in the list in one loop rather than making individual if statements for every single dictionary inside the list. This is especially useful for when there are a much greater number of items, because without the list, this would require an insane amount of if statements in order to check each item. . 3c) . 3ci) . function search(list) { document.getElementById(&#39;bruh&#39;).innerHTML = &quot; &lt;tr&gt; &lt;th style=&#39;width:auto&#39;&gt;&lt;/th&gt; &lt;th style=&#39;width:15%&#39;&gt;Date&lt;/th&gt; &lt;th style=&#39;width:15%&#39;&gt;Item&lt;/th&gt; &lt;th style=&#39;width:13%&#39;&gt;Action&lt;/th&gt; &lt;th style=&#39;width:auto; text-align:right&#39;&gt;Quantity&lt;/th&gt; &lt;th&gt;&lt;/th&gt; &lt;/tr&gt; &quot; results = [] input = document.getElementById(&#39;searchBar&#39;).value.toLowerCase() if (input == &quot;&quot; || input == null) { getItems(dataList) } else { for (let i = 0; i &lt; list.length; i++) { item = list[i][&quot;item&quot;].toLowerCase() if (item.includes(input) == true) { results.push(list[i]) } } if (results.length == 0) { document.getElementById(&#39;bruh&#39;).innerHTML = &quot; &lt;tr&gt; &lt;th style=&#39;width:auto&#39;&gt;&lt;/th&gt; &lt;th style=&#39;width:15%&#39;&gt;Date&lt;/th&gt; &lt;th style=&#39;width:15%&#39;&gt;Item&lt;/th&gt; &lt;th style=&#39;width:13%&#39;&gt;Action&lt;/th&gt; &lt;th style=&#39;width:auto; text-align:right&#39;&gt;Quantity&lt;/th&gt; &lt;th&gt;&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td colspan=&#39;5&#39;&gt;&lt;i&gt;No results found.&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt; &quot; getItems(dataList) } else { getItems(results) } } } . 3cii) . searchBar.addEventListener(&quot;keyup&quot;, function() { search(dataList) } ) . 3ciii) . The procedure search(list) takes the input from the search bar and compares it to each element in the list parameter and takes all that match and replaces the data in the table with these matches. . 3civ) . The procedure first sets changes the HTML of the table (this is referred to as bruh in my code) to be nothing but the header, then creates an empty list called results for the items that pass the check and also creates a variable called input which is just the value of the search bar input. The next part is the algorithm, which first checks if the search bar is empty, in which it just returns the whole list. If the search bar is not empty, it iterates through each dictionary inside of the list parameter. If the value of the item key includes the input variable, then the dictionary is appended to the results list, otherwise, the algorithm simply moves on to the next dictionary in the list, and repeats this process until each dictionary in list has been checked. After, the algorithm checks if the length of results is zero, to account for there being no matches to the search. In this case, all of the data is displayed again with a note that says there were no matches. For when the length of results is not zero, a row is created and added to the innerHTML of the table for each item in results. . 3d) . 3di) . First call: Typing “pencils” into the search bar . Second call: Typing “cars” into the search bar . 3dii) . The first call is testing for when the search matches an item in the list. . The second call is testing for when the search does not match an item in the list. . 3diii) . The first call causes the table to show only rows of items called “Pencils”. . The second call causes the table to show every item in the list with a note at the top that says that there were no matches. .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/projects/2023/03/26/CPT.html",
            "relUrl": "/markdown/projects/2023/03/26/CPT.html",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "MCQ Test 3 Reflection",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Score: 44/50 . . Corrections . Q2: Compromising a user’s personal privacy . Which of the following has the greatest potential for compromising a user’s personal privacy? Original answer: | The Internet Protocol (IP) address of the user’s computer | . Correct answer: | A group of cookies stored by the user’s Web browser | . Explanation | Cookies may include tons of data about the user, including usernames and passwords to accounts, whereas the IP Address does not have information relating to the user. | . . Q28: Remove first and last two characters of string . Consider the following procedures for string manipulation. Procedure Call Explanation . concat(str1, str2) | Returns a single string consisting of str1 followed by str2. For example, concat(&quot;key&quot;, &quot;board&quot;) returns &quot;keyboard&quot;. | . substring(str, start, length) | Returns a substring of consecutive characters from str, starting with the character at position start and containing length characters. The first character of str is located at position 1. For example, substring(&quot;delivery&quot;, 3, 4) returns &quot;live&quot;. | . len(str) | Returns the number of characters in str. For example, len(&quot;pizza&quot;) returns 5. | . Original answer: | newString ← substring(oldString, 3, len(oldString) - 2) | tempString ← substring(oldString, 3, len(oldString) - 2) newString ← substring(tempString, 1, len(tempString) - 2) | . Correct answer: | newString ← substring(oldString, 3, len(oldString) - 4) | tempString ← substring(oldString, 3, len(oldString) - 2) newString ← substring(tempString, 1, len(tempString) - 2) | . Explanation | The original answer is incorrect because it will only remove the first two characters of the string. The correct answer is right because the substring with second parameter of 3 makes it so the first 2 letters are removed, then the third parameter removes the last 2 by ending at the length of the string minus 4, because 4 characters are removed in total. | . . Q40: Move robot back to starting place . The following grid contains a robot represented as a triangle, which is initially in the bottom-left square of the grid and facing the top of the grid. The robot can move into a white or a gray square but cannot move into a black region. The following code segment implements an algorithm that moves the robot from its initial position to the gray square and facing the top of the grid. When the robot reaches the gray square, it turns around and faces the bottom of the grid. Which of the following changes, if any, should be made to the code segment to move the robot back to its original position in the bottom-left square of the grid and facing toward the bottom of the grid? Original answer: | Interchange the ROTATE_RIGHT and the ROTATE_LEFT blocks. | . Correct answer: | No change is needed; the algorithm is correct as is. | . Explanation | With the original answer, the robot would leave the boundaries. I honestly don&#39;t even know why I picked that because the correct answer is so obviously correct. | . . Q41: Using binary search on list of genetic codes . A large number of genetic codes are stored as binary values in a list. Which one of the following conditions must be true in order for a researcher to obtain the correct result when using a binary search algorithm to determine if a given genetic code is in the list? Original answer: | The genetic codes must be converted from binary to decimal numbers. | . Correct answer: | The list must be sorted based on the genetic code values. | . Explanation | Numerical base does not matter in binary search, as long as they are sorted. | . . Q49: Crowd Flow Simulation . A city planner is using simulation software to study crowd flow out of a large arena after an event has ended. The arena is located in an urban city. Which of the following best describes a limitation of using a simulation for this purpose? Original answer: | The model used by the simulation software cannot be modified once the simulation has been used. | . Correct answer: | The model used by the simulation software often omits details so that it is easier to implement. | . Explanation | Modification is one of the benefits of simulations so I have no idea why I picked this. However, simulations lack complete accuracy because they do not account for every possible factor and thus they are not completely detailed. | . . Q50: Which algorithm runs in a reasonable time . A computer scientist is analyzing four different algorithms used to sort a list. The table below shows the number of steps each algorithm took to sort lists of different sizes. List Size Number of Stepsfor Algorithm A Number of Stepsfor Algorithm B Number of Stepsfor Algorithm C Number of Stepsfor Algorithm D . 1 | 10 | 2 | 1 | 1 | . 2 | 20 | 4 | 2 | 4 | . 3 | 30 | 8 | 6 | 9 | . 4 | 40 | 16 | 24 | 16 | . 5 | 50 | 32 | 120 | 25 | . Based on the values in the table, which of the algorithms appear to run in reasonable time? Select two answers. Original answer: | Algorithm B | Algorithm C | . Correct answer: | Algorithm A | Algorithm D | . Explanation | Misunderstood the question. A and D increase in steps the slowest and thus require less steps than the other two algorithms | . .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/hacks/2023/03/07/mcq3.html",
            "relUrl": "/markdown/hacks/2023/03/07/mcq3.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Unit 3 Sections 5-7",
            "content": "Lesson Overview: 3.5 - Boolean Expressions . Here we will focus on: basics of Booleans | its relationship with binary | relational operators | Logical Operators | . | . What is a boolean? . A data type with two possible values: true or false | . Boolean and Binary . So similar yet so different. . Boolean math and binary notation both use the same two ciphers: 1 and 0. | However, please note that Boolean quantities are restricted to a singlular bit (can only be either 1, or 0) | On the otherhand, binary numbers may be composed of many bits adding up in place-weighted form to any finite value, or size | . Must Knows . A Boolean value is either TRUE or FALSE | The AP Exam will provide you with a reference sheet with the operators below. | . . A few ways these operators could be used... | . . Relational Operators in action . How could you use operators to determine if the average of 5 grades is greater than 80? | . With the grades below, use a boolean expression to determine if the average grade is above an 80 and print the result (True or False) | Try it in as few steps as possible! | Be creative! There are obviously TONS of different practical solutions | . gradeList = [90, 65, 60, 75, 95] averageGrade = sum(gradeList)/len(gradeList) if averageGrade &gt; 80: print(&quot;The average grade is: &quot; + averageGrade + &quot;%&quot;) else: print(&quot;The average grade is below 80%.&quot;) . The average grade is below 80%. . The versatility of relational operators: . print(&quot;100 == 100:&quot;,100==100) print(&quot;Hello == Adios:&quot;,&quot;greeting&quot;==&quot;farewell&quot;) print(&quot;Hello != Adios:&quot;,&quot;greeting&quot;!=&quot;farewell&quot;) print(&quot;Hello == Hola:&quot;,&quot;greeting&quot;==&quot;greeting&quot;) print(&quot;5&gt;=4:&quot;, 5&gt;=4) print (&#39;&#39;) # Notice that relational operators can even work on lists! # For lists, the relational operator compares each respective component until an answer is derived print(&quot;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]:&quot;, [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]) print(&quot;[1,2,3,5] &gt; [1,2,3,4]:&quot;, [1,2,3,5] &gt; [1,2,3,4]) print(&quot;[1,2,3,5] &lt; [1,2,3,4]:&quot;, [1,2,3,5] &lt; [1,2,3,4]) print(&quot;[1,2,3,5] == [1,2,3,4]:&quot;, [1,2,3,5] == [1,2,3,4]) . 100 == 100: True Hello == Adios: False Hello != Adios: True Hello == Hola: True 5&gt;=4: True [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]: False [1,2,3,5] &gt; [1,2,3,4]: True [1,2,3,5] &lt; [1,2,3,4]: False [1,2,3,5] == [1,2,3,4]: False . Logical Operators! . These types of operators don&#39;t necessarily deal with equivalent/non-equivalent values, but they rather work on operands to produce a singular boolean result . AND : returns TRUE if the operands around it are TRUE | OR : returns TRUE if at least one operand is TRUE | NOT : returns TRUE if the following boolean is FALSE | . Turn the following arithmetic phrases into either True or False statements as indicated USING LOGICAL OPERATORS . print(&quot;1 &gt; 2 or 5 &lt; 12:&quot;, 1 &gt; 2 or 5 &lt; 12) # Output TRUE using OR ^ # Output FALSE using NOT print(&quot;24 &gt; 8:&quot;, not 24 &gt; 8) # Output FALSE using AND print(&quot;10 &gt; 20:&quot;, 10 &gt; 20 and 20 &lt; 10) . 1 &gt; 2 or 5 &lt; 12: True 24 &gt; 8: False 10 &gt; 20: False . Lesson Overview: 3.6 - Conditionals . Focusing on Selection . Selection: uses a condition that evaluates to true or false . Selection determines which part of an algorithm are executed based on a condition being true or false . Algorithm is a finite set of instructions that accomplish a specific task . Conditional Statements . Also known as &quot;if statements&quot; . Can be seen as if statements or if blocks . . Can also be seen as if else statements or if else-blocks . x = 20 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) . x is greater than y . x = 20 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) else: print(&quot;x is not greater than y&quot;) . x is greater than y . Participation . -Calculate the total sum of two numbers, if it is equal to 200, print 200, if otherwise, print the sum. . num1 = 100 num2 = 150 sum = num1 + num2 # you could just do # print(sum) # because if it&#39;s 200 it&#39;ll print 200 anyways lol if sum == 200: print(200) # or just print(sum)... else: print(sum) . 250 . Lesson Overview - 3.7 Nested Conditionals . Nested conditional statements consist of conditional statements within other conditional statements | Utilizes &quot;if else&quot; statements within &quot;if else&quot; statements | . Basics of a nested conditional: | . Block Coding Visual of Nested Conditionals: | Example Psuedocode of Nested Conditional Statements | . Analyzing Code Walkthrough . Psuedocode to the left, block code to the right | Approach the problem by going through each condition one at a time . Decide which ones are false to skip and which ones are true to execute | . | You Try: . | . score = 82 if (score &gt;= 90) { console.log(&quot;You got an A, congrats!&quot;) } else { if (score &gt;= 75) { console.log(&quot;Please come to retake up to a 90 next week at tutorial!&quot;) } else { console.log(&quot;You have detention!&quot;) } } . protein = 25 carbs = 36 sugar = 11 if (carbs &gt;= 55 || protein &lt;= 20 || sugar &gt;= 15) { console.log(&quot;Your lunch is too unhealthy, please pick a new one&quot;) } else { if (carbs &lt; 35 || protein &lt; 25) { console.log (&quot;This lunch is alright but try to add some more carbs or protein&quot;) } else { if (sugar &gt;= 11) { console.log (&quot;Looks great but lets see if we can cut down on sugar, we don&#39;t want diabetes!&quot;) } else { console.log (&quot;Amazing, you created a healthy lunch!!!&quot;) } } } . Writing Nested Code Activity . Write a program that fits these conditions using nested conditionals: If a person has at least 8 hours, they are experienced | If a person is experienced their salary is 90k, if they have ten hours or above their salary 150k | If a person is inexperienced their salary is always 50k | print the salary of the person at the end and whether they are experienced or not | . | var hrs = 10 var salary = &quot;&quot; var experienced = true if (hrs &gt;= 10) { salary = &quot;150k&quot; } else if (hrs &gt;= 8) { salary = &quot;90k&quot; } else { salary = &quot;50k&quot; experienced = false } console.log(&quot;This person has... n&quot; + &quot;Salary: &quot; + salary + &quot; n&quot; + &quot;Experience: &quot; + experienced) . This person has... Salary: 150k Experience: true . Hacks Assignments: . Conditionals: . Write a program that fits these conditions using nested conditionals: If the product is expired, print &quot;this product is no good&quot; | If the cost is above 50 dollars, and the product isn&#39;t expired, print &quot;this product is too expensive&quot; | If the cost is more than 25 dollars but under 50, and the product isn&#39;t expired, print &quot;this is a regular product&quot; | If the cost is under 25 dollars, print &quot;this is a cheap product&quot; | . | . product = {&quot;expired&quot;:false, &quot;cost&quot;:10} if (product[&quot;expired&quot;] == true) { console.log(&quot;This product is no good!!!!!!!&quot;) } else { if (product[&quot;cost&quot;] &gt; 50) { console.log(&quot;THis product is too expensive!11111&quot;) } else if (product[&quot;cost&quot;] &gt; 25) { console.log(&quot;this product normal&quot;) } else { console.log(&quot;cheap&quot;) } } . cheap . Boolean/Conditionals: . Create a multiple choice quiz that ... uses Boolean expressions | uses Logical operators | uses Conditional statements | prompts quiz-taker with multiple options (only one can be right) | has at least 3 questions | . | Points will be awarded for creativity, intricacy, and how well Boolean/Binary concepts have been intertwined | . qAndA = { &quot;question&quot; : [&quot;What language was this quiz coded in?&quot;, &quot;sus amognsu&quot;, &quot;what do you think of kanye&quot;], &quot;answers&quot; : [[&quot;python&quot;,&quot;english&quot;,&quot;java&quot;,&quot;javascript&quot;], [&quot;among us&quot;,&quot;sussy baka&quot;,&quot;among among&quot;,&quot;agmosnus&quot;], [&quot;great&quot;,&quot;ok&quot;,&quot;meh&quot;,&quot;no good&quot;]], &quot;correct&quot; : [&quot;a&quot;, &quot;b&quot;, &quot;d&quot;], &quot;letters&quot; : [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;] } totalQs = len(qAndA[&quot;question&quot;]) i = 0 score = 0 while i != totalQs: qAnswered = False currentQ = qAndA[&quot;question&quot;][i] print(currentQ + &quot; n&quot;) n = 0 while n &lt; 4: print(str(qAndA[&quot;letters&quot;][n]) + &quot;: &quot; + str(qAndA[&quot;answers&quot;][i][n])) n += 1 ans = input(currentQ) ans.lower() print(&quot;&quot;) while qAnswered == False: if ans == &quot;a&quot; or &quot;b&quot; or &quot;c&quot; or &quot;d&quot;: if ans == qAndA[&quot;correct&quot;][i]: score += 1 print(&quot;correct!11111&quot;) else: print(&quot;NO&quot;) qAnswered = True else: print(&quot;Enter a valid letter option (a, b, c, or d)&quot;) print(&quot;you score is: &quot; + str(score) + &quot; n&quot;) i += 1 . What language was this quiz coded in? a: python b: english c: java d: javascript correct!11111 you score is: 1 sus amognsu a: among us b: sussy baka c: among among d: agmosnus correct!11111 you score is: 2 what do you think of kanye a: great b: ok c: meh d: no good correct!11111 you score is: 3 .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/booleans",
            "relUrl": "/jupyter/booleans",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Data Compression",
            "content": "Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. - Clouds Impression . Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Python Libraries and Concepts used for Jupyter and Files/Directories . Introduction to displaying images in Jupyter notebook . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? | What are the command you use in Windows terminal to access files? | What are some of the major differences? | . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? | How does the meta data source and label relate to Unit 5 topics? | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? | . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;../images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpeg&quot;}, {&#39;source&#39;: &quot;VectorStock&quot;, &#39;label&#39;: &quot;smiley&quot;, &#39;file&#39;: &quot;smiley.jpeg&quot;}, ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . Translate first 3 letters of your name to Base64. &quot;Aid&quot; -&gt; &quot;65 105 100&quot; -&gt; 01000001 01101001 01100100 -&gt; 010000010110100101100100 -&gt; 010000 010110 100101 100100 -&gt; 16 22 37 36 -&gt; QWlk | . | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? Watching a video on YouTube and the video stops to load more frames. | . | From your consumer experience, what effects have you experienced from buffering? Irritation from having to wait a long time for loading. | . | How do these effects apply to images? Trying to view a very large image causes the entire page to freeze for a bit. | . | . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? | Describe Grey Scale algorithm in English or Pseudo code? | Describe scale image? What is before and after on pixels in three images? | Is scale image a type of compression? If so, line it up with College Board terms described? | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;../images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpeg&quot;}, {&#39;source&#39;: &quot;VectorStock&quot;, &#39;label&#39;: &quot;Smiley&quot;, &#39;file&#39;: &#39;smiley.jpeg&#39;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- original image -- . grey image - . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- original image -- . grey image - . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- original image -- . grey image - . - meta data -- Smiley VectorStock JPEG RGB Original size: (941, 1080) Scaled size: (320, 367) -- original image -- . grey image - . . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | numpy | base64 | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/compression",
            "relUrl": "/jupyter/compression",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Word Hunt Solver",
            "content": "",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/projects/2023/02/19/WordHuntSolver.html",
            "relUrl": "/markdown/projects/2023/02/19/WordHuntSolver.html",
            "date": " • Feb 19, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Week 22 Review Ticket",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Big Idea 5.5 | Big Idea 5.6 | Week Plans Make an API | Connect API to frontend | Make editing system | Make basic user system | | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2023/02/13/Week_22_Hacks.html",
            "relUrl": "/markdown/review_ticket/2023/02/13/Week_22_Hacks.html",
            "date": " • Feb 13, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Week 22 | Peer Grading",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Hackssssssss 🐍🐍🐍🐍 . CPT Planning FE/BE | Frontend demo | Localstorage object used for favoriting | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2023/02/09/peergrading.html",
            "relUrl": "/markdown/2023/02/09/peergrading.html",
            "date": " • Feb 9, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Big Idea 5.6",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Big Idea 5.6: Safe Computing . Notes . PII: Personal Identifiable Information General knowledge: Name, email, picture, education, state of residence | Linkedin | . | Safety practices Multi-factor authentication | Encryption Symmetric: One key used to encrypt and decrypt | Asymmetric: Public and private keys to prevent unauthorized use | . | . | Harms of the internet Malware/viruses | Phishing | . | . Hacks . PII is on all of my projects as they all link to my github which has my full name as the username (aidenhuynh) | I feel that PII is beneficial and harmful because I fear about my personal information being leaked to bad people online, but it also makes it easier for employers and college admissions to see my accomplishments. | A good password could be a randomly generated string of at least 8 characters to make it harder to be guessed or memorized by hackers. A bad password contains words or personal information, few characters and no symbols or numbers. | Symmetric encryption has the user input a key to both hide and unhide their passwords into code. Asymmetric encryption has the user input a public key to encrypt their data and a private key to decrypt it | We added security settings to encrypt our data in the AWS servers to prevent attacks | Personally, I have never fallen for a phishing scheme because I’ve grown up being very cautious of this because my parents told me to be. However, I know several friends who have fallen for things like this, for example, people input their instagram account data for more followers, but end up getting their accounts stolen. Other examples include free currencies in games that take your passwords. |",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/techtalk/2023/02/08/safecomputing.html",
            "relUrl": "/markdown/techtalk/2023/02/08/safecomputing.html",
            "date": " • Feb 8, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Big Idea 5.5",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Big Idea 5.5: Legal and Ethical Concerns . License Types Creative Commons MIT License: Requires authors to be credited, closed source. | Open Source GPL License: Publicly available for all purposes except making closed source versions | | Open source = Public, closed source = private | Open Source seems best because I don’t intend to profit off of my garbage code | Using GNU General Public License v3.0 because it allows for people to use the code for private and commercial use, but we still get credited. | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/techtalk/2023/02/08/lawsandethics.html",
            "relUrl": "/markdown/techtalk/2023/02/08/lawsandethics.html",
            "date": " • Feb 8, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Big Idea 5.4",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Big Idea 5.4: Crowdsourcing . We could use crowdsourcing to gather data of the most effective ways to help students. For example, if we asked what method of studying students prefer, we could make a program to enhance the efficiency of that progress in order to benefit the most students possible. If the answer was flashcards, we could code flashcards, if practice tests, then make practice tests, and etc. | . | Our project could definitely use some crowdsourcing because it solely relies on user data and we could use some sample data to test our tables with. | During night at the museum, I will observe which projects attract the biggest crowds, because these projects will most likely be most interesting to the highest amount of students so that I can know what I can code in the future to benefit the most people possible. | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/techtalk/2023/02/01/crowdsourcing.html",
            "relUrl": "/markdown/techtalk/2023/02/01/crowdsourcing.html",
            "date": " • Feb 1, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Big Idea 5.3",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Big Idea 5.3: Computing Bias . Group Discussion . Age difference between users of social media platforms TikTok mostly used by 10-19 year olds (32.5% of users) and least used by 50+ year olds (7.1%) | Facebook mostly used by 25-34 year olds (23.7%) and least used by 13-17 year olds (3.9%) I wouldn’t say that these platforms exclude certain groups, but rather are simply better fit for the respective groups. TikTok is more popular because the younger generations benefit from more fast-paced video media that can be quickly and easily consumed | Facebook is more popular with the older generations because the fast paced media in TikTok is too densely packed with information to be fully understood (fluid intelligence begins to drop off) | . | . | . | Virtual assistants have primarily female voices because women are more prototypically seen as caring for others and in assistant roles in workplaces. This is problematic because it further enforces gender roles that push women into roles that make them seem inferior to men (assisting men) | This may be more beneficial for business because following this stereotype may cause more satisfaction among users because it is what they are useful | . | Algorithms that influence my decisions: YouTube: Recommends me videos that alter my opinions (movie/game reviews) | Recommends videos that affect my mood Things I dislike more likely to get interaction (comments) | . | . | Google: Search algorithm gives me information that may or may not be credible | . | . | . Video: HP computers are racist . The owner probably doesn’t think it’s intentional but plays it off as more of a joke If they seriously thought this was a problem they would have a much more serious tone than laughing about it | . | This was likely caused by a lack of testing for people of color because it perfectly follows the white person’s face. Probably more white people available in the workplace for testing it | Could be fixed by using a more representative pool of testers | . | This is harmful because it excludes a group of people from fully utilizing the features of the device Not intended though, as HP wouldn’t exclude a group because that would be detrimental to their image and business. Yes it should be fixed for the above reasons | . | . | . Conclusion . It is imperative that computing bias is minimized for all applications for several reasons. For one, computer bias affects the profitability of a program because making a program unusable or less optimized for a certain group reduces the possible amount of consumers and therefore reduces the possible profit. Additionally, if users find out about a difference in program performance between certain groups of people, there will be backlash from consumers that will also harm profits, even if the error was unintentional. Aside from profits, this is also important from a moral perspective because it is simply common sense to not exclude groups of people based on factors like race, as seen in the HP computer video. .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/techtalk/2023/02/01/computingbias.html",
            "relUrl": "/markdown/techtalk/2023/02/01/computingbias.html",
            "date": " • Feb 1, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Week 21 Review Ticket",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Big Idea 5.3 | Big Idea 5.4 | My contributions I need to wait for us to have the API done until I can make my search bar and favoriting code so in the mean time I am making the website more appealing by changing the themes and stuff. To-do: Make submenu boxes on the left darken when hovered over | Experiment with different color schemes | Make the main table with data and search bar | | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2023/02/01/Week_21_Hacks.html",
            "relUrl": "/markdown/review_ticket/2023/02/01/Week_21_Hacks.html",
            "date": " • Feb 1, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Week 20 Review Ticket",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . CollegeBoard MC Test #2 | Big Ideas 5.1 and 5.2 | Project Features | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2023/01/25/Week_20_Hacks.html",
            "relUrl": "/markdown/review_ticket/2023/01/25/Week_20_Hacks.html",
            "date": " • Jan 25, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "1/24 Project Features",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . My Contributions . A search bar to quickly find item names in the table Algorithm/procedure that iterates through the API (list) of item names then selects ones that match the input of the search bar. | . | A way to “favorite” items in the table and to only show favorited items in the table Saved in localstorage so they remain favorited for the user localStorage is an object (OOP!) | . | . | . CollegeBoard Requirements/Coding Plan . Row # Requirements Comments . Row 1 | input | Text input in the search bar | . output | New table rows | . functionality | Change the table to match search | . describes the overall purpose of the program. | Provide an easy and quick way to find specific items | . describes what functionality of the program is demonstrated in the video. | Replaces table data with rows based on search | . describes the input and output of the program demonstrated in the video. | Text input and new rows | . Row 2 | one that shows how data has been stored in this list (or other collection type). | Create new list by indexing the API of items | . one that shows the data in this same list being used as part of fulfilling the program’s purpose. | Being in a list allows for an algorithm to easily iterate through and select needed data | . identifies the name of the variable representing the list being used in this response. | probably gonna be like itemList or something | . describes what the data contained in this list is representing in the program. | Data represents the name of the stored items | . Row 3 | includes a program code segment that shows a list being used to manage complexity in the program. | a for loop that checks each item in the list | . explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | The list allows for an algorithm to index through each item with a for loop, which would be more complicated without this algorithm because you would have to individually input each string which would become horrible if the list contained a lot of items. | . Row 4 | one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. | search(input) where input is the value of the text box | . one showing where the student-developed procedure is being called. | onKeyPress event | . describes what the identified procedure does and how it contributes to the overall functionality of the program. | I&#39;ve described the algorithm like 3 times already you get the idea | . Row 5 | sequencing | Compares input to an item in the list then adds that item to a new list if it passes | . iteration | checks each item in the list | . selection | if the item matches the search (if the string of the item name includes the search value) then it gets added to a new list, if not then nothing happens to it | . explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | The algorithm starts by creating an empty list then uses a for loop that iterates through the list of item names. It first checks if the item name includes the value from the search, and if it returns true, then that item is appended to the new list then it repeats this check for the next item in the list. If this returns false, it immediately moves to the next item. After each item in the list had been indexed, it runs another procedure that changes the table data based on an array parameter, which here we use the new list so that it only uses data of items that matched the search. | . Row 6 | describes the condition(s) being tested by each call to the procedure. | search input &quot;boxes&quot; | . identifies the result of each call. | returns all rows of the table of boxes | . Video Features . Input: searched item | Output: new table rows | Functionality: change table to match search input | Plan: Search the word “boxes” and the table will have only matching items | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2023/01/24/projectfeatures.html",
            "relUrl": "/markdown/2023/01/24/projectfeatures.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Big Idea 5.1 and 5.2 Blog",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Big Idea 5.1: Beneficial and Harmful Effects . Notes from lecture . Drones can be used for good, like search and rescue, but can also be used in bad ways like as military weapons | ChatGPT is disruptive Disruptive: Changes the way that people act | Concerns artists, Google (because less searching -&gt; less ads), schools, etc. | May return biased information, as it only considers one perspective | . | . Benefits and Harms of our Project . Benefit Harm . Easier organization for consumers | Quickly find items in storage for consumers | Log-in ensures that storage can not be manipulated by outsiders | . | (Currently) unprotected information that can be used in malicious ways (planning a theft) | . | . Note: I tried very hard to change the text color inside here but I can’t do that without changing the sass file for the entire fastpages theme (which I don’t want to do) so tough luck I guess. . Big Idea 5.2: Digital Divide . Notes from lecture . Our school provides chromebooks but in poorer communities that isn’t an option | Google has access to tons of free software that we don’t have | . Pros and Cons of Internet Blockers . Pros Cons . Prevents hackers from stealing private information | Prevents access to harmful websites (malware and such) | . | Blocks needed resources sometimes (youtube, thousands of things in CS, etc.) | Slower internet speeds | . | . Digital Divide Concerns . The fact that we have access to materials that others don’t isn’t ideal because it makes it harder for those without resources to succeed. However, this is why it must be our mission as more fortunate people to help the less fortunate. This can be achieved through more technological advancement, donation, and other means. | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2023/01/24/benefitsandharms.html",
            "relUrl": "/markdown/2023/01/24/benefitsandharms.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "MCQ Test 2 Reflection",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Score: 47/50 . . Question #28 . . I chose C and D because I thought that it wasn’t A and B. It actually is A because it will follow a diagonal path to the square. . Question #29 . . Very simple question I just miscounted because I was in a rush. . Question #41 . . D is the correct answer because (1, 10) = 2 represents when it equals 20% of the voters. C is wrong is wrong because it includes 20% and 10%. .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2023/01/24/CollegeBoardMCs.html",
            "relUrl": "/markdown/2023/01/24/CollegeBoardMCs.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "Week 19 Review Ticket",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Create Task grading | Database Hacks Our project could use a sign-in to verify if a user should be allowed to add data to the API (so that random people can&#39;t just come in and spam add or remove actual needed information) | API Hacks I simply do not have the brain power for this right now. | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2023/01/23/Week_19_Hacks.html",
            "relUrl": "/markdown/review_ticket/2023/01/23/Week_19_Hacks.html",
            "date": " • Jan 23, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "Week 19 - Create Task Grading Hacks 3",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Performance Task #1 . Row # Score Explanation Comments . 1 | 1/1 | Video shows: input output functionality Written response includes: describes the overall purpose of the program. describes what functionality of the program is demonstrated in the video. describes the input and output of the program demonstrated in the video. | Criteria met, nothing to say | . 2 | 0/1 | written response includes two program code segments: one that shows how data has been stored in this list (or other collection type). one that shows the data in this same list being used as part of fulfilling the program’s purpose. written response also includes: identifies the name of the variable representing the list being used in this response. describes what the data contained in this list is representing in the program. | Criteria met except for showing data being used | . 3 | 0/1 | written response includes: includes a program code segment that shows a list being used to manage complexity in the program. explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | Does not need a list for first part. Second part is actually also not met because while it is explained how to write otherwise, it does not manage complexity. | . 4 | 1/1 | written response includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. written response also includes: describes what the identified procedure does and how it contributes to the overall functionality of the program. | Actually not met because it does not explain the procedure&#39;s contribution to the overall project | . 5 | 1/1 | written response includes an algorithm with: sequencing iteration selection written response also includes: explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | criteria are met | . 6 | 1/1 | written response includes describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. describes the condition(s) being tested by each call to the procedure. identifies the result of each call. | criteria are met | . Overall: 4/6 | . Actual: 3/6 | . Performance Task #2 . Row # Score Explanation Comments . 1 | 1/1 | Video shows: input output functionality Written response includes: describes the overall purpose of the program. describes what functionality of the program is demonstrated in the video. describes the input and output of the program demonstrated in the video. | all criteria are met | . 2 | 1/1 | written response includes two program code segments: one that shows how data has been stored in this list (or other collection type). one that shows the data in this same list being used as part of fulfilling the program’s purpose. written response also includes: identifies the name of the variable representing the list being used in this response. describes what the data contained in this list is representing in the program. | all criteria are met | . 3 | 1/1 | written response includes: includes a program code segment that shows a list being used to manage complexity in the program. explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | all criteria are met | . 4 | 1/1 | written response includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. written response also includes: describes what the identified procedure does and how it contributes to the overall functionality of the program. | all criteria are met | . 5 | 1/1 | written response includes an algorithm with: sequencing iteration selection written response also includes: explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | all criteria are met | . 6 | 1/1 | written response includes describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. describes the condition(s) being tested by each call to the procedure. identifies the result of each call. | all criteria are met | . Overall: 6/6 | . Actual: 6/6 | . &lt;/table&gt; . Performance Task #3 . Row # Score Explanation Comments . 1 | 1/1 | Video shows: input output functionality Written response includes: describes the overall purpose of the program. describes what functionality of the program is demonstrated in the video. describes the input and output of the program demonstrated in the video. | all criteria are met | . 2 | 1/1 | written response includes two program code segments: one that shows how data has been stored in this list (or other collection type). one that shows the data in this same list being used as part of fulfilling the program’s purpose. written response also includes: identifies the name of the variable representing the list being used in this response. describes what the data contained in this list is representing in the program. | | . 3 | 0/1 | written response includes: includes a program code segment that shows a list being used to manage complexity in the program. explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | Does not explain how the code would be written differently | . 4 | 0/1 | written response includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. written response also includes: describes what the identified procedure does and how it contributes to the overall functionality of the program. | Procedure has no parameter(s). I missed that the procedure is described inaccurately in saying that it changes the screen which it does not. | . 5 | 0/1 | written response includes an algorithm with: sequencing iteration selection written response also includes: explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | Lacks iteration. I missed that the explanation did not include how states are selected with index values. | . 6 | 0/1 | written response includes describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. describes the condition(s) being tested by each call to the procedure. identifies the result of each call. | None of the criteria are met. | . Overall: 2/6 | . Actual: 1/6 | . Performance Task #4 . Row # Score Explanation Comments . 1 | 1/1 | Video shows: input output functionality Written response includes: describes the overall purpose of the program. describes what functionality of the program is demonstrated in the video. describes the input and output of the program demonstrated in the video. | all criteria are met | . 2 | 1/1 | written response includes two program code segments: one that shows how data has been stored in this list (or other collection type). one that shows the data in this same list being used as part of fulfilling the program’s purpose. written response also includes: identifies the name of the variable representing the list being used in this response. describes what the data contained in this list is representing in the program. | all criteria are met | . 3 | 1/1 | written response includes: includes a program code segment that shows a list being used to manage complexity in the program. explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | all criteria are met | . 4 | 1/1 | written response includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. written response also includes: describes what the identified procedure does and how it contributes to the overall functionality of the program. | all criteria are met | . 5 | 1/1 | written response includes an algorithm with: sequencing iteration selection written response also includes: explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | all criteria are met | . 6 | 1/1 | written response includes describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. describes the condition(s) being tested by each call to the procedure. identifies the result of each call. | all criteria are met (NOT) i missed that NONE of the criteria are met. | . Overall: 6/6 | . Actual: 5/6 | . Reflection: . I’ve noticed that it’s a lot easier to be accurate in grading for projects that meet all the requirements. I never give less points than the actual because I only miss when small things aren’t there as opposed to missing when they are there. .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2023/01/22/createtaskgrading3.html",
            "relUrl": "/markdown/2023/01/22/createtaskgrading3.html",
            "date": " • Jan 22, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "Week 18 Review Ticket",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . OOP Hacks | Create Task grading | OOP in project I used the localStorage object (show vscode) | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2023/01/17/Week_18_Hacks.html",
            "relUrl": "/markdown/review_ticket/2023/01/17/Week_18_Hacks.html",
            "date": " • Jan 17, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "Model and Object-Oriented Programming",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ... @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . Class and Object Code . # Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface) # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; # tester method to print users def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;) u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, password=&#39;123nick&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, password=&#39;123eli&#39;) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, password=&#39;123hedy&#39;) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u = tester(users, u.uid, &quot;123qwerty&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . Test 1, find user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$42O...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$YBQ...&#34; * name: &#34;Alexander Graham Bell&#34;, id: &#34;lex&#34;, psw: &#34;sha256$xVs...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$A5H...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$qlh...&#34; Test 2, change user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$42O...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$YBQ...&#34; * name: &#34;John Mortensen&#34;, id: &#34;jm1021&#34;, psw: &#34;sha256$djy...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$A5H...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$qlh...&#34; Test 3, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$42OvHN1vGBL5OE6k$e41f474e6037e0c51711d4247e59f11ad1240eedeafd4f0e94ff8df3979254d7&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$YBQujtqgOVzrg0pw$d52bd1e50bccdbdbd5a18213792e9c9ef9f87ff30e9d0c6240c284c02697e57b&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$djy5z29DVXe4ex3s$7aa66283772b2b98c9c77f5ee71ba6ef711dcf16f1d205bc3d802bafcae1b422&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$A5HAdCb7BSgkFUqp$060e45fe78f0bdd9240aa412826ded96130c9c6d9dcb81d61d6beaa7b52d68dd&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$qlhvgNGYM1d5bMkN$2acf54901a98f170a146a60d0c8ceb361f68d8de290e86add9a1030da1c4ee94&#34;}] Test 4, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$42OvHN1vGBL5OE6k$e41f474e6037e0c51711d4247e59f11ad1240eedeafd4f0e94ff8df3979254d7&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$YBQujtqgOVzrg0pw$d52bd1e50bccdbdbd5a18213792e9c9ef9f87ff30e9d0c6240c284c02697e57b&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$djy5z29DVXe4ex3s$7aa66283772b2b98c9c77f5ee71ba6ef711dcf16f1d205bc3d802bafcae1b422&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$A5HAdCb7BSgkFUqp$060e45fe78f0bdd9240aa412826ded96130c9c6d9dcb81d61d6beaa7b52d68dd&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$qlhvgNGYM1d5bMkN$2acf54901a98f170a146a60d0c8ceb361f68d8de290e86add9a1030da1c4ee94&#34;}] . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . Start Code for Hacks . from datetime import date import json def calculateAge(dob): today=date.today() return today.year - dob.year - ((today.month, today.day) &lt; (dob.month, dob.day)) class student: def __init__(self, name, dob, classOf, game): self._name = name self._game = game self._dob = dob self._classOf = classOf self._age = calculateAge(dob) @property def name(self): return self._name @name.setter def name(self, name): self._name = name @property def game(self): return self._game @game.setter def game(self, game): self._game = game @property def dob(self): return self._dob @dob.setter def dob(self, dob): self._dob = dob self._age = calculateAge(dob) @property def dob(self): return self._dob def set_dob(self, dob): self._dob = dob self._age = calculateAge(dob) @property def age(self): calculateAge(self._dob) @property def classOf(self): return self._classOf @classOf.setter def classOf(self, classOf): self._classOf = classOf def __str__(self): return f&#39;name: &quot;{self.name}&quot;, dob: &quot;{self.dob}&quot;, classOf: &quot;{self.classOf}, game: &quot;{self.game}, age: &quot;{self._age}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, dob={self._dob}, classOf={self._classOf}, game: &quot;{self.game}, age: &quot;{self._age}&quot;)&#39; def tester2(students, name): result = None for i in students: if i.name == name: print(&quot;* &quot;, end=&quot;&quot;) result = i print(str(i)) return result if __name__ == &quot;__main__&quot;: u1 = student(name=&#39;Aiden Huynh&#39;, game=&#39;GGST&#39;, dob=date(2006, 5, 12), classOf=&#39;2024&#39;) u2 = student(name=&#39;Jeffrey Lee&#39;, game=&#39;Genshin Impact&#39;, dob=date(2005, 12, 27), classOf=&#39;2023&#39;) u3 = student(name=&#39;Luke Angelini&#39;, game=&#39;League of Legends&#39;, dob=date(2005, 7, 29), classOf=&#39;2023&#39;) u4 = student(name=&#39;Jagger Klein&#39;, game=&#39;Lego Star Wars&#39;, dob=date(2005, 9, 18), classOf=&#39;2023&#39;) u5 = student(name=&#39;James Armstrong&#39;, game=&#39;Fortnite&#39;, dob=date(2006, 3, 28), classOf=&#39;2024&#39;) students = [u1, u2, u3, u4, u5] print(&quot;Test 1, find user 3&quot;) stu = tester2(students, u3.name) print(&quot;Test 2, change user 3&quot;) stu.name = &quot;Avinh Huynh&quot; stu.set_dob(date(1993,12,27)) stu = tester2(students, stu.name) print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([student.__dict__ for student in students]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(student) for student in students]) print(json_string) . Test 1, find user 3 name: &#34;Aiden Huynh&#34;, dob: &#34;2006-05-12&#34;, classOf: &#34;2024, game: &#34;GGST, age: &#34;16&#34; name: &#34;Jeffrey Lee&#34;, dob: &#34;2005-12-27&#34;, classOf: &#34;2023, game: &#34;Genshin Impact, age: &#34;17&#34; * name: &#34;Luke Angelini&#34;, dob: &#34;2005-07-29&#34;, classOf: &#34;2023, game: &#34;League of Legends, age: &#34;17&#34; name: &#34;Jagger Klein&#34;, dob: &#34;2005-09-18&#34;, classOf: &#34;2023, game: &#34;Lego Star Wars, age: &#34;17&#34; name: &#34;James Armstrong&#34;, dob: &#34;2006-03-28&#34;, classOf: &#34;2024, game: &#34;Fortnite, age: &#34;16&#34; Test 2, change user 3 name: &#34;Aiden Huynh&#34;, dob: &#34;2006-05-12&#34;, classOf: &#34;2024, game: &#34;GGST, age: &#34;16&#34; name: &#34;Jeffrey Lee&#34;, dob: &#34;2005-12-27&#34;, classOf: &#34;2023, game: &#34;Genshin Impact, age: &#34;17&#34; * name: &#34;Avinh Huynh&#34;, dob: &#34;1993-12-27&#34;, classOf: &#34;2023, game: &#34;League of Legends, age: &#34;29&#34; name: &#34;Jagger Klein&#34;, dob: &#34;2005-09-18&#34;, classOf: &#34;2023, game: &#34;Lego Star Wars, age: &#34;17&#34; name: &#34;James Armstrong&#34;, dob: &#34;2006-03-28&#34;, classOf: &#34;2024, game: &#34;Fortnite, age: &#34;16&#34; Test 3, make a dictionary . TypeError Traceback (most recent call last) /Users/Aiden/CS_Swag/_notebooks/2023-01-10-object_and_model_programming.ipynb Cell 7 in &lt;cell line: 79&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/Aiden/CS_Swag/_notebooks/2023-01-10-object_and_model_programming.ipynb#W6sZmlsZQ%3D%3D?line=93&#39;&gt;94&lt;/a&gt; stu = tester2(students, stu.name) &lt;a href=&#39;vscode-notebook-cell:/Users/Aiden/CS_Swag/_notebooks/2023-01-10-object_and_model_programming.ipynb#W6sZmlsZQ%3D%3D?line=95&#39;&gt;96&lt;/a&gt; print(&#34;Test 3, make a dictionary&#34;) &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/Aiden/CS_Swag/_notebooks/2023-01-10-object_and_model_programming.ipynb#W6sZmlsZQ%3D%3D?line=96&#39;&gt;97&lt;/a&gt; json_string = json.dumps([student.__dict__ for student in students]) &lt;a href=&#39;vscode-notebook-cell:/Users/Aiden/CS_Swag/_notebooks/2023-01-10-object_and_model_programming.ipynb#W6sZmlsZQ%3D%3D?line=97&#39;&gt;98&lt;/a&gt; print(json_string) &lt;a href=&#39;vscode-notebook-cell:/Users/Aiden/CS_Swag/_notebooks/2023-01-10-object_and_model_programming.ipynb#W6sZmlsZQ%3D%3D?line=99&#39;&gt;100&lt;/a&gt; print(&#34;Test 4, make a dictionary&#34;) File ~/opt/anaconda3/lib/python3.9/json/__init__.py:231, in dumps(obj, skipkeys, ensure_ascii, check_circular, allow_nan, cls, indent, separators, default, sort_keys, **kw) 226 # cached encoder 227 if (not skipkeys and ensure_ascii and 228 check_circular and allow_nan and 229 cls is None and indent is None and separators is None and 230 default is None and not sort_keys and not kw): --&gt; 231 return _default_encoder.encode(obj) 232 if cls is None: 233 cls = JSONEncoder File ~/opt/anaconda3/lib/python3.9/json/encoder.py:199, in JSONEncoder.encode(self, o) 195 return encode_basestring(o) 196 # This doesn&#39;t pass the iterator directly to &#39;&#39;.join() because the 197 # exceptions aren&#39;t as detailed. The list call should be roughly 198 # equivalent to the PySequence_Fast that &#39;&#39;.join() would do. --&gt; 199 chunks = self.iterencode(o, _one_shot=True) 200 if not isinstance(chunks, (list, tuple)): 201 chunks = list(chunks) File ~/opt/anaconda3/lib/python3.9/json/encoder.py:257, in JSONEncoder.iterencode(self, o, _one_shot) 252 else: 253 _iterencode = _make_iterencode( 254 markers, self.default, _encoder, self.indent, floatstr, 255 self.key_separator, self.item_separator, self.sort_keys, 256 self.skipkeys, _one_shot) --&gt; 257 return _iterencode(o, 0) File ~/opt/anaconda3/lib/python3.9/json/encoder.py:179, in JSONEncoder.default(self, o) 160 def default(self, o): 161 &#34;&#34;&#34;Implement this method in a subclass such that it returns 162 a serializable object for ``o``, or calls the base implementation 163 (to raise a ``TypeError``). (...) 177 178 &#34;&#34;&#34; --&gt; 179 raise TypeError(f&#39;Object of type {o.__class__.__name__} &#39; 180 f&#39;is not JSON serializable&#39;) TypeError: Object of type date is not JSON serializable .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/oop",
            "relUrl": "/jupyter/oop",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post21": {
            "title": "Week 18 - Create Task Grading Hacks 2",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Performance Task #1 . Row # Score Explanation . 1 | 0/1 | Video shows: input output functionality Written response includes: describes the overall purpose of the program. describes what functionality of the program is demonstrated in the video. describes the input and output of the program demonstrated in the video. | . 2 | 1/1 | written response includes two program code segments: one that shows how data has been stored in this list (or other collection type). one that shows the data in this same list being used as part of fulfilling the program’s purpose. written response also includes: identifies the name of the variable representing the list being used in this response. describes what the data contained in this list is representing in the program. | . 3 | 0/1 | written response includes: includes a program code segment that shows a list being used to manage complexity in the program. explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | . 4 | 1/1 | written response includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. written response also includes: describes what the identified procedure does and how it contributes to the overall functionality of the program. | . 5 | 0/1 | written response includes an algorithm with: sequencing iteration selection written response also includes: explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | . 6 | 1/1 | written response includes describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. describes the condition(s) being tested by each call to the procedure. identifies the result of each call. | . Overall: 3/6 | . Actual: 1/6 | . Performance Task #2 . Row # Score Explanation . 1 | 1/1 | Video shows: input output functionality Written response includes: describes the overall purpose of the program. describes what functionality of the program is demonstrated in the video. describes the input and output of the program demonstrated in the video. | . 2 | 1/1 | written response includes two program code segments: one that shows how data has been stored in this list (or other collection type). one that shows the data in this same list being used as part of fulfilling the program’s purpose. written response also includes: identifies the name of the variable representing the list being used in this response. describes what the data contained in this list is representing in the program. | . 3 | 1/1 | written response includes: includes a program code segment that shows a list being used to manage complexity in the program. explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | . 4 | 1/1 | written response includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. written response also includes: describes what the identified procedure does and how it contributes to the overall functionality of the program. | . 5 | 1/1 | written response includes an algorithm with: sequencing iteration selection written response also includes: explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | . 6 | 1/1 | written response includes describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. describes the condition(s) being tested by each call to the procedure. identifies the result of each call. | . Overall: 6/6 | . Actual: 6/6 | . Performance Task #3 . Row # Score Explanation . 1 | 0/1 | Video shows: input output functionality Written response includes: describes the overall purpose of the program. describes what functionality of the program is demonstrated in the video. describes the input and output of the program demonstrated in the video. | . 2 | 1/1 | written response includes two program code segments: one that shows how data has been stored in this list (or other collection type). one that shows the data in this same list being used as part of fulfilling the program’s purpose. written response also includes: identifies the name of the variable representing the list being used in this response. describes what the data contained in this list is representing in the program. | . 3 | 1/1 | written response includes: includes a program code segment that shows a list being used to manage complexity in the program. explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | . 4 | 1/1 | written response includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. written response also includes: describes what the identified procedure does and how it contributes to the overall functionality of the program. | . 5 | 1/1 | written response includes an algorithm with: sequencing iteration selection written response also includes: explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | . 6 | 1/1 | written response includes describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. describes the condition(s) being tested by each call to the procedure. identifies the result of each call. | . Overall: 5/6 | . Actual: 5/6 | . Performance Task #4 . Row # Score Explanation . 1 | 1/1 | Video shows: input output functionality Written response includes: describes the overall purpose of the program. describes what functionality of the program is demonstrated in the video. describes the input and output of the program demonstrated in the video. | . 2 | 1/1 | written response includes two program code segments: one that shows how data has been stored in this list (or other collection type). one that shows the data in this same list being used as part of fulfilling the program’s purpose. written response also includes: identifies the name of the variable representing the list being used in this response. describes what the data contained in this list is representing in the program. | . 3 | 0/1 | written response includes: includes a program code segment that shows a list being used to manage complexity in the program. explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | . 4 | 1/1 | written response includes two program code segments: one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. one showing where the student-developed procedure is being called. written response also includes: describes what the identified procedure does and how it contributes to the overall functionality of the program. | . 5 | 1/1 | written response includes an algorithm with: sequencing iteration selection written response also includes: explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | . 6 | 0/1 | written response includes describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. describes the condition(s) being tested by each call to the procedure. identifies the result of each call. | . Overall: 4/6 | . Actual: 3/6 | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2023/01/10/createtaskgrading2.html",
            "relUrl": "/markdown/2023/01/10/createtaskgrading2.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post22": {
            "title": "Week 17 Review Ticket",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Ideation of reunion project * Input: Search bar * Purpose: To provide users with assistance in finding needed crafting recipes when playing older versions of Minecraft. * Output: Desired Minecraft recipes * Recipes all stored in a list of dictionaries called *craftables* * Manages complexity by allowing procedures to iterate through the list rather than having to check each item in separate lines (for example, the search bar checks the whole craftables list, rather than checking each item in craftables one by one) * The procedure named *createRow* takes three parameters and is used to create the crafting grids for specific items. The parameters are &quot;list&quot; (a list of item recipes; *craftables* or a returned list from the search procedure), &quot;index&quot; (index of the desired item in the list), and &quot;rowNum&quot; (which row to create with the procedure, 0-2). It returns html code to be added to the innerHTML of the table body. * Procedure is called when adding a recipe to the table through another procedure, *getRecipes* * An algorithm is used in the search bar procedure, called *search*, with a for loop to iterate through each item in the list parameter and check if that item&#39;s name contains the input within the search bar/text box. If the input is in the item&#39;s name, that item is appended to an empty list (*results*). After each item in the list parameter has been checked, the procedure checks if the length of *results* is 0, and if it is, the table is reconstructed to have just the header and a row that says that no results are found. If the length of *results* is greater than zero, the procedure runs *getRecipes(results)* to rebuild the table but only with the items in *results*. * This function is called when a key is pressed in the text box. * Also checks if the search bar&#39;s value is null or blank, at which it just runs *getRecipes(craftables)* for the full list of recipes | Team work * Roles decided * Main theme for reunion project decided (Minecraft and related games) | Create task grading | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2023/01/08/week_17_hacks.html",
            "relUrl": "/markdown/review_ticket/2023/01/08/week_17_hacks.html",
            "date": " • Jan 8, 2023"
        }
        
    
  
    
        ,"post23": {
            "title": "Week 17 - Create Task Grading Hacks",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Performance Task #1 . Row # Score Explanation . 1 | 1/1 | Video clearly showed input as described by written response. Purpose and output clearly met. | . 2 | 1/1 | Named list with multiple elements, which contributes to purpose as shown in code segment where it is used. | . 3 | 1/1 | Explains how the list makes coding easier and gives an example of how the code would look without the example. | . 4 | 1/1 | Procedure of at least one parameter has function described and how it contributes to the program purpose. | . 5 | 1/1 | Algorithm is described as in row 4, and steps are clear enough for replication. | . 6 | 1/1 | Calls return different values and are described. | . Overall: 6/6 | . Actual: 4/6 | . For Row 1: The function of the program is described rather than the purpose | For Row 3: List does not manage complexity, as strings could just be used. I believe complexity is referring to simplifying the code, not the coding process. | . Performance Task #2 . Row # Score Explanation . 1 | 1/1 | Purpose, input, output described and shown. | . 2 | 1/1 | Describes a named list and the data in it. Shows this list contributing to the purpose. | . 3 | 1/1 | Explains how the list simplifies the code and also shows how the code would be different without the list. | . 4 | 1/1 | Procedure with at least one parameter is shown being called and contribution to purpose is clear | . 5 | 1/1 | Algorithm&#39;s steps clearly listed and functions as described in row 4. | . 6 | 1/1 | Calls return different values and are described. | . Overall: 6/6 | . Actual: 6/6 | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2023/01/05/createtaskgrading.html",
            "relUrl": "/markdown/2023/01/05/createtaskgrading.html",
            "date": " • Jan 5, 2023"
        }
        
    
  
    
        ,"post24": {
            "title": "Unit 3 Sections 17-18",
            "content": "Do Now!!! . Set up your notebook by either wgetting the lesson or tracking it by your own (We would recommend wgetting since there are some fill in the blanks!) | wget here: https://raw.githubusercontent.com/mmaxwu/Tri2-GroupFastpages/master/_notebooks/2022-12-dd-lesson.ipynb | . 3.17: Algorithm Efficiency . Purpose: . The purpose of this lesson is to help students understand how to make an efficient program and optimize it and understand its importance to the CSP curriculum. . What is Algorithmic Efficiency? . What is Algorithmic Efficiency? The ability of an algorithm to solve a problem in an efficient way | An efficient algorithm solves a problem quickly and with a minimum amount of resources, such as time and memory. | . | How do we determine if an algorithm is efficient or not? One way we can do this is by determining the time complexity of the algorithm | Another way is through space complexity | . | . Traveling Merchant Problem Hacks: . What did you and your team discuss? (record below) . An heuristic solution is an approach to a problem that produces a solution that isn&#39;t necessarily optimal but can be used when normal methods take forever | . Describe the method used to solve the traveling merchant problem. (record below) . Go to closest unvisited city. . 3.18: Undecidable Problems . Purpose: . The purpose of this lesson is to introduce students to the concept of undecidable problems in computer science and to explain why these problems are important. . Key vocabulary: . Decision problem | Decidable problem | Undecidable problem | . Decision Problem . A decision problem is a problem in computer science and mathematics that can be solved by a yes-no answer, also known as a binary answer. In other words, a decision problem is a problem for which there are only two possible outputs:&quot;yes&quot; or &quot;no&quot;. There are two types of decision problems that Collegeboard goes over: . Decidable Problems | Undecidable Problems | . A decidable problem is a problem in computer science and mathematics for which an algorithm can be created that can always produce a correct answer or solution. In other words, a decidable problem is a problem for which there exists an algorithm that can be used to determine whether a given input is a valid solution or not. . An undecidable problem problem is a problem in computer science and mathematics for which it is impossible to create an algorithm that can always provide a correct answer or solution. This means that it is not possible for an algorithm to always determine whether a given input is a valid solution to an undecidable problem. . Decidable Problems . A decidable problem is an algorithm that can always have an output of yes or no given any input. It is always correct. . Example of a Decidable Problem . The procedure below tests to see if a number is divisible by 13. If it is, it returns true. If it isn&#39;t, it returns false. . def divideThirteen(number): if number % 13 == 0: return True else: return False print(divideThirteen(26)) print(divideThirteen(30)) . Undecidable Problems . An Example of a Forever Running Code . The code keeps adding 1 to the variable number until number is no longer an integer(This is not the python data type &quot;integer&quot;, it&#39;s the integer in number theory). However, there is no end to this code, making the computer run forever. There is no halt to the code. . i = 0 number = 1 def integerTest(n): # Testing if the number is an integer if n%1 ==0: return True else: return False # Using while loop to keep searching an a non-integer above 1. Note that the computer runs forever. while i == 0: number += 1 if integerTest(number) == False: i +=1 print(&quot;Done&quot;) . The Halting Problem . The halting problem is an example of an undecidable problem. It states that it is not always possible to correctly determine whether a code halts or runs forever. . There is no way to write an algorithm to analyze and determine whether a body of code can run forever or not. . Halting Problem Example: . HaltChecker analyzes the program, program P, and its input, input I. If program P halts with input I, HaltChecker returns an output of &quot;halts&quot;. If program P doesn&#39;t halt(runs forever) with input I, HaltChecker returns an output of &quot;never&quot;. For example, in the code where it tests if variable number, the code runs forever, so HaltChecker returns an output of “never”. | Then, we add another algorithm called Reverser which reverses HaltChecker&#39;s output. So, if &quot;never&quot; is the output of HaltChecker, then the output of Reverser is “halts”. It&#39;s also the same the other way around: if HaltChecker has an output of &quot;halts&quot;, then Reverser has an output of “never”. | We combine these algorithms into one entire body of code. | Since Reverser is the algorithm at the end, hence giving the ultimate output, notice how it prints &quot;never&quot; when in fact there is an end(As proved by HaltChecker), and how it also prints &quot;halts&quot; when there is in fact is no end to the code(Also proved by HaltChecker). As a result, HaltChecker is inaccurate and this is an undecidable problem. | . This Diagram Sums up the Entire Process in the Bulleted List: . Credits of diagram and example to Khan Academy . FAQ . Q: If Reverser is causing the problem, why not remove it? | A: Removing Reverser will remove the problems, however, we are looking for ways which create the problem of not outputting a correct result. One example is enough to prove that it is an undecidable problem since it proves that the code is not completely accurate. | . Extra Things to Notice . Note that while a computer may take a long time to run a section of code, it does not mean that the computer is going to run forever. | Humans are able to solve some undecidable problems. The entire Halting Problem example was to prove that computers cannot solve undecidable problems. | . Hacks . Come up with one situation in which a computer runs into an undecidable problem. Explain why it is considered an undecidable problem. . Dividing by zero (mort copied me) . Here&#39;s another because mort: recursive loop with the wrong inequality sign (&lt; instead of &gt; or vice versa) . 3.17 Homework . Your homework for Algorithmic Efficiency is pretty simple. . Use the 1st code below and graph it (Desmos, TI Inpire Cas, e.t.c), change the x value only! | Label the number of loops done as x and the time (microseconds) to find the index as y | Connect the points | Do the same thing with the 2nd code | Compare the two graphs and explain which one of the two is more efficient and why (min. 2 sentences) | Insert images of the graph either in your blog or on review ticket | import time def linear_search(lst, x): start_time = time.perf_counter_ns() # records time (nanoseconds) for i in range(len(lst)): # loops through the entire list if lst[i] == x: # until the x value we are looking for is found end_time = time.perf_counter_ns() # records time again total_time = (end_time - start_time) // 1000 # subtracts last recorded time and first recorded time print(&quot;Found element after {} loops in {} microseconds&quot;.format(i+1, total_time)) # prints the results return &quot;Your number was found at&quot;, i end_time = time.perf_counter_ns() # records the time again total_time = (end_time - start_time) // 1000 # subtracts last recorded time and first recorded time print(&quot;Element not found after {} loops in {} microseconds&quot;.format(len(lst), total_time)) # prints the results return &quot;Your number wasn&#39;t found :(&quot; lst = list(range(1, 10001)) # list with numbers 1-10000 xvals = [0, 10, 100, 500, 1000, 5000, 10000, 15000] for x in xvals: linear_search(lst, x) # runs procedure . The fact that it does not work is not my problem. . import time def binary_search(lt, x): start_time = time.perf_counter_ns() # starts timer low = 0 # sets the lower side mid = 0 # sets mid value high = len(lt) -1 # sets the higher side num_loops = 0 # number of loops the search undergoes to find the x value while low&lt;=high: # Loop ran until mid is reached num_loops += 1 # adds one loop each time process is repeated mid = (low + high) // 2 # takes the lowest and highest possible numbers and divides by 2 and rounds to closest whole # if lt[mid] == x: end_time = time.perf_counter_ns() # records time total_time = (end_time - start_time) // 1000 # time in microseconds print(&quot;Element found after {} loops in {} microseconds&quot;.format(num_loops, total_time)) # prints the results return mid # returns the index value elif lt[mid] &gt; x: # if mid was higher than x value, then sets new highest value as mid -1 high = mid -1 elif lt[mid] &lt; x: low = mid + 1 # if mid was lower than x, sets the new low as mid + 1 end_time = time.perf_counter_ns() total_time = (end_time - start_time) // 1000 print(&quot;Element not found after {} loops in {} microseconds&quot;.format(num_loops, total_time)) # prints the results return &quot;Your number wasn&#39;t found :(&quot; lt = list(range(1, 10001)) # list with numbers 1-10000 x = 149 # replace with an integer between 1 and 10000 (I suggest big numbers like 500, 2000, so on) binary_search(lt, x) # runs procedure . 3.18 Homework: . Use the Jupyter notebook to write an algorithm that solves a decidable problem. You can use math or whatever else you would like to do. | Write code to get the computer to run forever. Check this example if you need help, but please come up with your own idea. | Homeworks, hacks, and classwork(filled in blanks) for both 3.17 and 3.18 are due on Thursday at 9:00 pm. -0.1 points for each day late. . # infinite calculator unsolved = True while unsolved == True: num1 = input(&quot;Enter a number&quot;) operator = input(&quot;Enter an operator (+, -, *, /, **, %&quot;) num2 = input(&quot;Enter another number&quot;) unsolved = False if num1.isnumeric() == True and num2.isnumeric() == True: num1 = float(num1) num2 = float(num2) if operator == &quot;+&quot;: print(str(num1) + &quot; + &quot; + str(num2) + &quot;= &quot; + str(num1 + num2)) # unsolved = False elif operator == &quot;-&quot;: print(str(num1) + &quot; - &quot; + str(num2) + &quot;= &quot; + str(num1 - num2)) # unsolved = False elif operator == &quot;*&quot;: print(str(num1) + &quot; * &quot; + str(num2) + &quot;= &quot; + str(num1 * num2)) # unsolved = False elif operator == &quot;/&quot;: print(str(num1) + &quot; / &quot; + str(num2) + &quot;= &quot; + str(num1 / num2)) # unsolved = False elif operator == &quot;**&quot;: print(str(num1) + &quot; ** &quot; + str(num2) + &quot;= &quot; + str(num1 ** num2)) # unsolved = False elif operator == &quot;%&quot;: print(str(num1) + &quot; % &quot; + str(num2) + &quot;= &quot; + str(num1 % num2)) # unsolved = False else: print(&quot;Invalid operator type, try again&quot;) else: print(&quot;Invalid numbers, try again&quot;) . 1.0 + 1.0= 2.0 10.0 / 4.0= 2.5 Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again Invalid numbers, try again .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/efficiency",
            "relUrl": "/jupyter/efficiency",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "3.16 Lesson",
            "content": "First Order of Business: Get your notebook . Open a terminal in vscode, run command: cd _notebooks, type &#39;wget&#39; and paste this link into said terminal and run it . | Take notes wherever you please, but you will be graded on participating . | . So, what is a simulation anyway? . A simulation is a tested scenario used for viewing results/outputs to prepare for them in real world situations . | These can be used for games like dice rolling, spinners, etc . | These can be used for practical things such as building structures, testing car crashes, and other things before engaging in them in the real world . | These simulations can have the option of obeying real world physics (Gravity, collision) or they can go against these norms since this is a fictitious scenario, and couldn&#39;t happen in real life . | . Big Question . Which of the following simulations could be the LEAST useful? . | A retailer trying to identify which products sold the most . | A restaurant determining the efficiency of robots | An insurance company studying the rain impact of cars | A sports bike company studying design changes to their new bike design | . If you guessed a bike company, you&#39;re wrong, because the retail simulation was the right answer. Simulating robots in food service, sudying rain impact on vehicles, and new bike design can contribute a lot more to society in comparison to seeing what products sell more than others. | . Next Big Question . If you were making a simulation for making a new train station, which of the following would be true about this simulation? . It could reveal potential problems/safety issues before construction starts | It cannot be used to test the train station in different weather | Simulation will add high costs to projects | Simulation is not needed because this train station already exists | . Potential Saftey was the right answer, because you need somewhere to test the safety and ethicness of what you&#39;re about to do before you start building it. Otherwise, let&#39;s just say you&#39;ll have a special plaque for FBI&#39;s Most Wanted | . Simulation 1: . Both programs below do the same thing. Given a height and a weight, they calculate how long it will take for a object to fall to the ground in a vacuum subjected to normal Earth levels of gravity. . However, the second one is a simulation. It calculates the distance the object has fallen every 0.1 seconds. This is useful for if you wanted a visual representation of a falling object, which pure math can&#39;t do as smoothly. . height = float(input(&quot;height in meters?&quot;)) weight = input(&quot;weight in pounds?&quot;) stuff = (2 * (height / 9.8))**(1/2) print(&quot;It will take&quot;, stuff,&quot;seconds for an object that weighs&quot;,weight,&quot;pounds&quot;,&quot;to fall &quot;,height,&quot;meters in a vacuum&quot;) . t = 0 g = 0 d = 0 false = True while false: t = t + 0.1 d = 9.8 / 2 * (t**2) if d &gt;= height: false = False #print(d) # if you want to print the distance every time it calculates it. Too long to output to a terminal, but this could be useful to display graphically. #print(t) print(t) print(d) . Simulation 2: . This simulation is made in order to simulate movement on a 2d plane vs a 3d plane. . | How it works: we have multiple variables, if statements and equations under a while command in order to randomy generate steps on a 2d plane. Once it reaches the set destination, it will say that the man made it home after x amount of steps. . | For the 3D plane, it takes a lot longer due to how big and open the 3d environment is, so there are more if statements in the 3d plane . | . (explain further) . import random x = 0 y = 0 nights = 0 turn = 0 stopped = 0 turns = [] while (nights &lt; 100): step = random.randrange(4) if step == 0: x = x+1 if step == 1: x = x-1 if step == 2: y = y+1 if step == 3: y = y-1 turn = turn + 1 if x == 0 and y == 0: nights = nights + 1 print(&quot;The Man Has Made It Home After &quot;, turn, &quot;Turns&quot;) turns.append(turn) turn = 0 if turn/1000 % 1000 == 0 and x + y != 0: print(&quot;(&quot;, x,y, &quot;)&quot;) if (turn &gt; 10000000): stopped = stopped + 1 turn = 0 x = 0 y = 0 nights = nights + 1 print(&quot;Caped&quot;) average = sum(turns) / len(turns) print(&quot;Avaerage&quot;, average, &quot;Ones that when&#39;t too long &quot;, stopped) . import random x = 0 y = 0 z = 0 nights = 0 turn = 0 stopped = 0 turns = [] while (nights &lt; 100): #rando movement step = random.randrange(6) if step == 0: x = x+1 if step == 1: x = x-1 if step == 2: y = y+1 if step == 3: y = y-1 if step == 4: z = z+1 if step == 5: z = z-1 #Turn counter turn = turn + 1 #Goal check if x == 0 and y == 0 and z == 0: nights = nights + 1 print(&quot;The Bird Has Made It Home After &quot;, turn, &quot;Turns&quot;) turns.append(turn) turn = 0 if turn/1000 % 1000 == 0 and x + y + z != 0: print(&quot;(&quot;, x,y, &quot;) &quot;,&quot;| &quot;, z) #Too long Stoper if (turn &gt; 10000000): stopped = stopped + 1 turn = 0 x = 0 y = 0 z = 0 nights = nights + 1 print(&quot;Caped&quot;) average = sum(turns) / len(turns) print(&quot;Avaerage&quot;, average,&quot;Ones that when&#39;t too long &quot;, stopped) . Simulations in the wild . Simulations are used extremely frequently in real life applications. One of the most common examples of simulations are video games. A games physics engine can accurately simulate objects colliding . Another example is Blender, the software used in 3d animations class, here at Del Norte. Blender is made up of many small simulations, but one big one it uses is simulating the way light bounces off of and interacts with objects. . HW !!! . Create a simulation. It can be anything, just has to simulate something. . Some ideas: . Two objects colliding | Gravity on other planets | . AND . Find an example of a simulation in a software/game you use, screenshot, and explain how it is a simulation . Hacks . Other simulation: Gacha Games . I used to play gacha games (I know at least one of you know what they are), and pulling in gacha games simulates drawing from a real-world gachapon machine, but rather than selecting randomly from a pool a set number of rewards (set number of toys in machine), this is simulated by changing the odds of pulling certain rewards (good things are 0.0000001% chance because capitalism). . Simple Projectile Motion Simulator . Finds the distance in meters that a projectile will travel before hitting the ground (assuming the projectile is launched onto a level plane, and that there are no resistant forces present) given an initial velocity, an initial height, and an angle. . import math qList = {&quot;vi&quot;:&quot;What is your initial velocity? (in meters per second)&quot;, &quot;theta&quot;:&quot;At what angle is the projectile being fired (0 degrees to 90 degrees)&quot;, &quot;yi&quot;:&quot;From what initial height is the projectile being launched?&quot; } g = 9.8 # Gravity = 9.8 m/s^2 print(qList[&quot;vi&quot;]) initialVelocity = float(input(qList[&quot;vi&quot;])) print(str(initialVelocity) + &quot;m/s n&quot;) print(qList[&quot;theta&quot;]) angle = float(input(qList[&quot;theta&quot;])) print(str(angle) + &quot; degrees n&quot;) print(qList[&quot;yi&quot;]) initialHeight = float(input(qList[&quot;yi&quot;])) print(str(initialHeight) + &quot;m n&quot;) radians = angle * math.pi / 180 # Quadratic equation (I know the math can be simplified but I am lazy.) t1 = ((initialVelocity * math.sin(radians)) + ((initialVelocity * math.sin(radians))**2 - (4 * (-.5 * g) * initialHeight))**(1/2))/(2 * 0.5 * g) t2 = ((initialVelocity * math.sin(radians)) - ((initialVelocity * math.sin(radians))**2 - (4 * (-.5 * g) * initialHeight))**(1/2))/(2 * 0.5 * g) if t1 &gt; 0: x = initialVelocity * math.cos(radians) * t1 print(&quot;The projectile will travel &quot; + str(x) + &quot;m&quot;) elif t2 &gt; 0: x = initialVelocity * math.cos(radians) * t2 print(&quot;The projectile will travel &quot; + str(x) + &quot;m&quot;) else: print(&quot;Something went wrong!&quot;) . What is your initial velocity? (in meters per second) 5.0m/s At what angle is the projectile being fired (0 degrees to 90 degrees) 45.0 degrees From what initial height is the projectile being launched? 5.0m The projectile will travel 5.067874680438394m . &quot;Proof&quot; that it works using another simulation from pHet (University of Colorado): . .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/simulations",
            "relUrl": "/jupyter/simulations",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Unit 3 Sections 5-7",
            "content": "Lesson Overview: 3.5 - Boolean Expressions . Here we will focus on: basics of Booleans | its relationship with binary | relational operators | Logical Operators | . | . What is a boolean? . A data type with two possible values: true or false | . Boolean and Binary . So similar yet so different. . Boolean math and binary notation both use the same two ciphers: 1 and 0. | However, please note that Boolean quantities are restricted to a singlular bit (can only be either 1, or 0) | On the otherhand, binary numbers may be composed of many bits adding up in place-weighted form to any finite value, or size | . Must Knows . A Boolean value is either TRUE or FALSE | The AP Exam will provide you with a reference sheet with the operators below. | . . A few ways these operators could be used... | . . Relational Operators in action . How could you use operators to determine if the average of 5 grades is greater than 80? | . With the grades below, use a boolean expression to determine if the average grade is above an 80 and print the result (True or False) | Try it in as few steps as possible! | Be creative! There are obviously TONS of different practical solutions | . gradeList = [90, 65, 60, 75, 95] averageGrade = sum(gradeList)/len(gradeList) if averageGrade &gt; 80: print(&quot;The average grade is: &quot; + averageGrade + &quot;%&quot;) else: print(&quot;The average grade is below 80%.&quot;) . The average grade is below 80%. . The versatility of relational operators: . print(&quot;100 == 100:&quot;,100==100) print(&quot;Hello == Adios:&quot;,&quot;greeting&quot;==&quot;farewell&quot;) print(&quot;Hello != Adios:&quot;,&quot;greeting&quot;!=&quot;farewell&quot;) print(&quot;Hello == Hola:&quot;,&quot;greeting&quot;==&quot;greeting&quot;) print(&quot;5&gt;=4:&quot;, 5&gt;=4) print (&#39;&#39;) # Notice that relational operators can even work on lists! # For lists, the relational operator compares each respective component until an answer is derived print(&quot;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]:&quot;, [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]) print(&quot;[1,2,3,5] &gt; [1,2,3,4]:&quot;, [1,2,3,5] &gt; [1,2,3,4]) print(&quot;[1,2,3,5] &lt; [1,2,3,4]:&quot;, [1,2,3,5] &lt; [1,2,3,4]) print(&quot;[1,2,3,5] == [1,2,3,4]:&quot;, [1,2,3,5] == [1,2,3,4]) . 100 == 100: True Hello == Adios: False Hello != Adios: True Hello == Hola: True 5&gt;=4: True [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]: False [1,2,3,5] &gt; [1,2,3,4]: True [1,2,3,5] &lt; [1,2,3,4]: False [1,2,3,5] == [1,2,3,4]: False . Logical Operators! . These types of operators don&#39;t necessarily deal with equivalent/non-equivalent values, but they rather work on operands to produce a singular boolean result . AND : returns TRUE if the operands around it are TRUE | OR : returns TRUE if at least one operand is TRUE | NOT : returns TRUE if the following boolean is FALSE | . Turn the following arithmetic phrases into either True or False statements as indicated USING LOGICAL OPERATORS . print(&quot;1 &gt; 2 or 5 &lt; 12:&quot;, 1 &gt; 2 or 5 &lt; 12) # Output TRUE using OR ^ # Output FALSE using NOT print(&quot;24 &gt; 8:&quot;, not 24 &gt; 8) # Output FALSE using AND print(&quot;10 &gt; 20:&quot;, 10 &gt; 20 and 20 &lt; 10) . 1 &gt; 2 or 5 &lt; 12: True 24 &gt; 8: False 10 &gt; 20: False . Lesson Overview: 3.6 - Conditionals . Focusing on Selection . Selection: uses a condition that evaluates to true or false . Selection determines which part of an algorithm are executed based on a condition being true or false . Algorithm is a finite set of instructions that accomplish a specific task . Conditional Statements . Also known as &quot;if statements&quot; . Can be seen as if statements or if blocks . . Can also be seen as if else statements or if else-blocks . x = 20 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) . x is greater than y . x = 20 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) else: print(&quot;x is not greater than y&quot;) . x is greater than y . Participation . -Calculate the total sum of two numbers, if it is equal to 200, print 200, if otherwise, print the sum. . num1 = 100 num2 = 150 sum = num1 + num2 # you could just do # print(sum) # because if it&#39;s 200 it&#39;ll print 200 anyways lol if sum == 200: print(200) # or just print(sum)... else: print(sum) . 250 . Lesson Overview - 3.7 Nested Conditionals . Nested conditional statements consist of conditional statements within other conditional statements | Utilizes &quot;if else&quot; statements within &quot;if else&quot; statements | . Basics of a nested conditional: | . Block Coding Visual of Nested Conditionals: | Example Psuedocode of Nested Conditional Statements | . Analyzing Code Walkthrough . Psuedocode to the left, block code to the right | Approach the problem by going through each condition one at a time . Decide which ones are false to skip and which ones are true to execute | . | You Try: . | . score = 82 if (score &gt;= 90) { console.log(&quot;You got an A, congrats!&quot;) } else { if (score &gt;= 75) { console.log(&quot;Please come to retake up to a 90 next week at tutorial!&quot;) } else { console.log(&quot;You have detention!&quot;) } } . protein = 25 carbs = 36 sugar = 11 if (carbs &gt;= 55 || protein &lt;= 20 || sugar &gt;= 15) { console.log(&quot;Your lunch is too unhealthy, please pick a new one&quot;) } else { if (carbs &lt; 35 || protein &lt; 25) { console.log (&quot;This lunch is alright but try to add some more carbs or protein&quot;) } else { if (sugar &gt;= 11) { console.log (&quot;Looks great but lets see if we can cut down on sugar, we don&#39;t want diabetes!&quot;) } else { console.log (&quot;Amazing, you created a healthy lunch!!!&quot;) } } } . Writing Nested Code Activity . Write a program that fits these conditions using nested conditionals: If a person has at least 8 hours, they are experienced | If a person is experienced their salary is 90k, if they have ten hours or above their salary 150k | If a person is inexperienced their salary is always 50k | print the salary of the person at the end and whether they are experienced or not | . | var hrs = 10 var salary = &quot;&quot; var experienced = true if (hrs &gt;= 10) { salary = &quot;150k&quot; } else if (hrs &gt;= 8) { salary = &quot;90k&quot; } else { salary = &quot;50k&quot; experienced = false } console.log(&quot;This person has... n&quot; + &quot;Salary: &quot; + salary + &quot; n&quot; + &quot;Experience: &quot; + experienced) . This person has... Salary: 150k Experience: true . Hacks Assignments: . Conditionals: . Write a program that fits these conditions using nested conditionals: If the product is expired, print &quot;this product is no good&quot; | If the cost is above 50 dollars, and the product isn&#39;t expired, print &quot;this product is too expensive&quot; | If the cost is more than 25 dollars but under 50, and the product isn&#39;t expired, print &quot;this is a regular product&quot; | If the cost is under 25 dollars, print &quot;this is a cheap product&quot; | . | . product = {&quot;expired&quot;:false, &quot;cost&quot;:10} if (product[&quot;expired&quot;] == true) { console.log(&quot;This product is no good!!!!!!!&quot;) } else { if (product[&quot;cost&quot;] &gt; 50) { console.log(&quot;THis product is too expensive!11111&quot;) } else if (product[&quot;cost&quot;] &gt; 25) { console.log(&quot;this product normal&quot;) } else { console.log(&quot;cheap&quot;) } } . cheap . Boolean/Conditionals: . Create a multiple choice quiz that ... uses Boolean expressions | uses Logical operators | uses Conditional statements | prompts quiz-taker with multiple options (only one can be right) | has at least 3 questions | . | Points will be awarded for creativity, intricacy, and how well Boolean/Binary concepts have been intertwined | . qAndA = { &quot;question&quot; : [&quot;What language was this quiz coded in?&quot;, &quot;sus amognsu&quot;, &quot;what do you think of kanye&quot;], &quot;answers&quot; : [[&quot;python&quot;,&quot;english&quot;,&quot;java&quot;,&quot;javascript&quot;], [&quot;among us&quot;,&quot;sussy baka&quot;,&quot;among among&quot;,&quot;agmosnus&quot;], [&quot;great&quot;,&quot;ok&quot;,&quot;meh&quot;,&quot;no good&quot;]], &quot;correct&quot; : [&quot;a&quot;, &quot;b&quot;, &quot;d&quot;], &quot;letters&quot; : [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;] } totalQs = len(qAndA[&quot;question&quot;]) i = 0 score = 0 while i != totalQs: qAnswered = False currentQ = qAndA[&quot;question&quot;][i] print(currentQ + &quot; n&quot;) n = 0 while n &lt; 4: print(str(qAndA[&quot;letters&quot;][n]) + &quot;: &quot; + str(qAndA[&quot;answers&quot;][i][n])) n += 1 ans = input(currentQ) ans.lower() print(&quot;&quot;) while qAnswered == False: if ans == &quot;a&quot; or &quot;b&quot; or &quot;c&quot; or &quot;d&quot;: if ans == qAndA[&quot;correct&quot;][i]: score += 1 print(&quot;correct!11111&quot;) else: print(&quot;NO&quot;) qAnswered = True else: print(&quot;Enter a valid letter option (a, b, c, or d)&quot;) print(&quot;you score is: &quot; + str(score) + &quot; n&quot;) i += 1 . What language was this quiz coded in? a: python b: english c: java d: javascript correct!11111 you score is: 1 sus amognsu a: among us b: sussy baka c: among among d: agmosnus correct!11111 you score is: 2 what do you think of kanye a: great b: ok c: meh d: no good correct!11111 you score is: 3 .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/booleans",
            "relUrl": "/jupyter/booleans",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Unit 3 Sections 12-13",
            "content": "Calling Procedures . Slide 1: . A procedure is a named group of programming instructions that may have parameters and return values. | Procedures are referred to by different names, such as method or function, depending on the programing language. | Parameters are input values of a procedure. Arguments specify the values of the parameters when procedure is called. | A procedure call interrupts the sequential execution of statements causing the program to execute the statements within the procedure before continuing. One the last statement in the procedure (or a return statement) has executed, flow or control is returned to the point immediately following where the procedure was called. | . Slide 2: . When calling procedures, it&#39;s important to take notice to whether it returns data, or a block of statements. | If the procedure just returns a block of statements, you call the procedure by referring to the procedure name, and inputting the arguments. | If the procedure returns some sort of data like a boolean or value, then you will assign that value to a variable | . Slide 3: . Assume the Temperature outside is Fahrenheit. | The procedure convertFahrenheit is intended to convert from Fahrenheit to Celsius. | Convert the following psuedocode to python | . def convertFahrenheit(temperature): celsius = (temperature - 32) * 5/9 return celsius outsideTemp = int(input(&#39;what is the temperature outside?&#39;)) convertFahrenheit(outsideTemp) . 22.22222222222222 . Developing Procedures . Slide 8: . Picking a ___ name is important in case you revisit the code later on (separate words with capitals) There are 2 different types of procedures- ones that return a value and those that simply execute a block of statements Steps of developing procedure: picking a useful name, thinking of parameters (what data does the procedure need to know), making a flowchart or writing procedure in pseudocode, and actually developing the procedure. . Slide 9: . In this example, a teacher is writing a program that will replace the grade on a previous quiz if the new grade is better than the previous. . What would be a good name for this procedure? | What parameters do we need for this procedure? | Try writing this procedure out in python based on the given pseudocode | . def retakeGrader(currentPoints, quizGrade, questions): print(&#39;Your original grade was: &#39; + str(grade) + &#39;%&#39;) currentGrade = currentPoints / questions currentGrade = currentGrade * 100 if currentGrade &gt; quizGrade: quizGrade = currentGrade print(&#39;Your new grade is: &#39; + str(quizGrade) + &#39;%&#39;) else: print(&#39;Your grade did not change&#39;) pts = int(input(&#39;How many points did you get? (on the retake)&#39;)) grade = int(input(&#39;What was your original grade? (percent)&#39;)) qs = int(input(&#39;How many questions were on the retake?&#39;)) retakeGrader(pts, grade, qs) . Your original grade was: 80% Your new grade is: 90.0% . Procedural Abstraction . One type of abstraction is procedural abstraction which provides a name for a process and allows a procedure to be used only knowing what it does and not how it does it | This is very helpful in managing complexity in a program | Subdivision of a program into separate subprograms is called modularity | A procedural abstraction may extract shared features to generalize functionality instead of duplicating code. This allows for program reuse, which helps manage complexity | . Complexity Example . One of the biggest advantages of procedural abstraction is managing complexity. . Think about the process of simplifying the code? What do you think the advantage of the code segment on the left is? . Code Segment 1 Code Segment 2 . ROTATE_LEFT() | detourLeft() | . MOVE_FORWARD()|turnCorner()| ROTATE_RIGHT |MOVE_FORWARD()| MOVE_FORWARD()|MOVE_FORWARD()| MOVE_FORWARD() ROTATE_RIGHT() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() MOVE_FORWARD MOVE_FORWARD() . Hacks . Write a python procedure about something which can help you in school, for example the teacher’s function we spoke about earlier. | Points will be awarded based on creativity and functionality | 0.1 points will be deducted for late submissions | Submit the notes with all blanks filled in (scored out of 0.5 points) and the python procedure (scored out of 0.5 points) by Monday 12/12 at 11:59 PM. | . a = &#39;&#39; vf = &#39;&#39; vi = &#39;&#39; t = &#39;&#39; x = &#39;&#39; qList = {&#39;want&#39;:&#39;What is the desired value? n(a, vf, vi, t, or x)&#39;, &#39;a&#39;:&#39;What is the acceleration? n(if unknown, input &quot;?&quot;)&#39;, &#39;vf&#39;:&#39;What is the final velocity? n(if unknown, input &quot;?&quot;)&#39;, &#39;vi&#39;:&#39;What is the initial velocity? n(if unknown, input &quot;?&quot;)&#39;, &#39;t&#39;:&#39;What is the change in time? n(if unknown, input &quot;?&quot;)&#39;, &#39;x&#39;:&#39;What is the change in position? n(if unknown, input &quot;?&quot;)&#39;} def floatConverter(var): if var == &quot;?&quot;: return(var) else: return float(var) def aSolve(vf, vi, t, x): if vf == &#39;?&#39;: return 2*(x - vi * t)/t**2 elif t == &#39;?&#39;: return (vf**2 - vi**2)/(2 * x) elif vi == &#39;?&#39;: return 2*(x - ((2 * x)-(vf * t)))/t**2 elif x == &#39;?&#39;: return (vf**2 - vi**2)/(2 * x) else: return &quot;Unsolvable&quot; def vfSolve(a, vi, t, x): if a == &#39;?&#39;: return ((2*x)/t)-vi elif vi == &#39;?&#39;: return (x-((1 / 2) * a * t ** 2))/t + a * t elif t == &#39;?&#39;: print(&quot;Note: This is the absolute value; remember to check directionality.&quot;) return (vi**2+2*a*x)**(1/2) elif x == &#39;?&#39;: return vi + a * t else: return &quot;Unsolvable&quot; def viSolve(a, vf, t, x): if a == &#39;?&#39;: return (2 * x) / t - vf elif vf == &#39;?&#39;: return (x-(.5*a*t**2))/t elif t == &#39;?&#39;: print(&quot;Note: This is the absolute value; remember to check directionality.&quot;) return (vf**2-2*a*x)**(1/2) elif x == &#39;?&#39;: return vf - a * t else: return &quot;Unsolvable&quot; def xSolve(a, vf, vi, t): if a == &#39;?&#39;: return t * (vf+vi)/t elif vf == &#39;?&#39;: return vi*t+.5*a*(t**2) elif vi == &#39;?&#39;: return t * (2*vf - a * t)/2 elif t == &#39;?&#39;: return (vf**2 - vi**2)/(2*a) else: return &quot;Unsolvable&quot; def tSolve(a, vf, vi, x): if a == &#39;?&#39;: return (2*x)/(vi+vf) elif vf == &#39;?&#39;: return ((vi**2+2*a*x)**(1/2)-vi)/a # idk if this works 100% of the time but oh well boo hoo cry about it elif vi == &#39;?&#39;: return (vf -(vf**2-2*a*x)**(1/2))/a # also dont know elif x == &#39;?&#39;: return (vf - vi)/a else: return &quot;Unsolvable&quot; def kinematicCalculator(want): if want == &#39;a&#39;: vf = floatConverter(input(qList[&#39;vf&#39;])) vi = floatConverter(input(qList[&#39;vi&#39;])) t = floatConverter(input(qList[&#39;t&#39;])) x = floatConverter(input(qList[&#39;x&#39;])) return aSolve(vf, vi, t, x) elif want == &#39;vf&#39;: a = floatConverter(input(qList[&#39;a&#39;])) vi = floatConverter(input(qList[&#39;vi&#39;])) t = floatConverter(input(qList[&#39;t&#39;])) x = floatConverter(input(qList[&#39;x&#39;])) return vfSolve(a, vi, t, x) elif want == &#39;vi&#39;: a = floatConverter(input(qList[&#39;a&#39;])) vf = floatConverter(input(qList[&#39;vf&#39;])) t = floatConverter(input(qList[&#39;t&#39;])) x = floatConverter(input(qList[&#39;x&#39;])) return viSolve(a, vf, t, x) elif want == &#39;t&#39;: a = floatConverter(input(qList[&#39;a&#39;])) vf = floatConverter(input(qList[&#39;vf&#39;])) vi = floatConverter(input(qList[&#39;vi&#39;])) x = floatConverter(input(qList[&#39;x&#39;])) return tSolve(a, vf, vi, x) elif want == &#39;x&#39;: a = floatConverter(input(qList[&#39;a&#39;])) vf = floatConverter(input(qList[&#39;vf&#39;])) vi = floatConverter(input(qList[&#39;vi&#39;])) t = floatConverter(input(qList[&#39;t&#39;])) return xSolve(a, vf, vi, t) else: print(&#39;Please input a valid variable. n(a, vf, vi, t, or x)&#39;) want = input(&#39;What is the desired value? n(a, vf, vi, t, or x)&#39;) print(want + &quot; = &quot; + str(kinematicCalculator(want))) # I will convert this to javascript at another time to make a user-friendly version, but for now, this works. . t=1.4285714285714286 .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/procedures",
            "relUrl": "/jupyter/procedures",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Week 15 - Team Grades",
            "content": "Week 15 Grades . . Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Lesson Aiden Jeffrey Luke James Jagger . Sections 5-7 | 0.95/1 | 0.95/1 | 0.85/1 | 0.35/1 | 0.95/1 | . Section 8-10 | 1/1 | 0.75/1 | 0.7/1 | 0.5/1 | 0.9/1 | . Total | 1.95/2 | 1.7/2 | 1.55/2 | 0.85/2 | 1.85/2 | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2022/12/07/team_grades.html",
            "relUrl": "/markdown/2022/12/07/team_grades.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "3.9 and 3.11 Lesson",
            "content": "First Things First: WGET . wget allows you to essentially clone someone elses file on Github into a directory of your choosing You are able to edit your own copy of the file without affecting the original | . | . Here&#39;s a quick how-to . Open your VSCode terminal (Terminal &gt; New Terminal) . | Navigate to your Fastpages Blog using cd . | Navigate to the _notebooks directory in your Fastpages . | Copy and paste this into the terminal: wget https://raw.githubusercontent.com/Azeem-Khan1/TripleAJ/master/_notebooks/2022-12-06-lessonComplete.ipynb . | You&#39;re all set! you can use this copy of our notebook to help you take notes and participate during the lesson . Please raise your hand if you are having trouble with wget and we will come around and help you | . | Note: if you have a separate notebook that you take notes on and you also want to do your practice in that notebook, you can copy and paste cells from this notebook by left clicking next to any markdown or code cell (indicating that it is selected), do ctl+c or cmd+c, and go to the desired notebook and do ctl+v or cmd+v (if that doesn&#39;t work, try just c and v with no ctl or cmd) | . 3.9 Part 1 . The lesson will start off with introducing what algorithms are and what they do, moreover, what their significance is. . 3.9 Lesson 1 has the objective to teach the student of the outcome of similar algorithmic concepts and similar algorithms. In this lesson, you will see different ways on how algorithms are developed. . Lesson 1 | Defining Algorithms . What is an algorithm? An algorithm is a process or set of rules to be followed through CODE. There are set limitations, this is what makes algorithms fun, you can your imagination and create whatever you wan with your own instructions! . Algorithms can be written in different ways and still accomplish the same tasks . | Algorithms that appear similar can yield different side effects or results. . | Some conditional statements can be written as the same as Boolean expressions (VICE VERSA) . | Different algorithms can be developed or use to solve the same problem. . | . Example 1 | What happens if we test the algorithm with different outputs? . The pseudocode above is translated to python for you. . Record what your outputs are when you enter 95 degrees F, does the algorithm yield the same result? . The conditional below is nested . temp = int(input(&quot;Select a temperature from 0 to 99 degrees F&quot;)) if (temp &gt;= 90): print(&quot;It&#39;s too hot outside!&quot;) else: if (temp &gt;= 65): print(&quot;Sure I will play outside!&quot;) else: print(&quot;It is too cold outside!&quot;) # Input 54 and then 95, what do you notice? . It&#39;s too hot outside! . temp = int(input(&quot;Select a temperature from 0 to 99 degrees F&quot;)) if (temp &gt;= 90): print(&quot;It&#39;s too hot outside!&quot;) if (temp &gt;= 65): print(&quot;Sure I will play outside!&quot;) if (temp &lt; 65): print(&quot;It is too cold outside!&quot;) # Input 54 and then Input 95, what do you notice? . It&#39;s too hot outside! Sure I will play outside! . NOW RECORD with another output . Record what your outputs are when you enter 54, does the algorithm yield the same result this time? . *Now use 95 as an input for the two code blocks above. . Even though an algorithm&#39;s code can look the same, you have to be careful, they can always yield different results. When constructing algorithms you want to make sure that your code corresponds with what you want as your output. You set the limit of your code and you decide what the code&#39;s output is. . Conditionals vs. Booleans . The condition and instructions are what differ, that&#39;s where the magic happens. The condition is a boolean expression when an expression outputs either true or false. Boolean values are another type of data type in programming languages, and they can only ever hold true or false. . Exercise . Learning how to utilize conditionals and booleans are important for developing algorithms. Use this exercise to help you. . Can either Boolean expression on the right replace the conditional on the left? Assume isWeekday and isHoliday are Boolean variables. . *NOTE = you can edit the variables to check the conditions needed! . IsHoliday = False IsWeekday = True if IsHoliday: driveWork = True else: if IsWeekday: driveWork = True else: driveWork = False print(driveWork) . Logically thinking about conditionals and booleans . Now the problem may seem confusing, but the best way to develop an algorithm is to think about all the possible results that can be potentially be outputted. . So if IsHoliday is set to true, then driveWork is automatically equal to false and it does not matter what value of isWeekday is. This must mean that one of the conditionals must be NOT IsHoliday. . In the case that lets say IsHoliday is set to false, then the variable for weekday needs to be checked. If it&#39;s true then driveWork is true, if it&#39;s false then driveWork is false. This must mean that the other conditional isWeekday. . Combining both conditionals, you get option 2, which is not IsHoliday and IsWeekday. This is why option 2 is right! . Example 3 | Conditionals vs Booleans . The following algorithms are intended to sum the odd numbers from 1-9. Which algorithms work as intended? . Below, I have translated the block code into python, import this to your jupyter notebook and record the result. What do you notice? . First block . sum = 1 counter = 3 #iteration var = 0 while (var &lt; 4): #while the var is &lt;= 4, it executes those commands, once it exceeds it hits the else command sum = sum + counter counter = counter + 2 var = var + 1 # now go through the whole thing 4 times, this is an iteration, a vital part of algorithms. else: print(sum) . 25 . Second block . sum = 0 counter = 9 #iteration while (counter &gt;= 1): sum = sum + counter counter = counter - 2 print(sum) . 25 . When we start our initializing left sum as 1 counter as 3 we had no iterations yet. Remember we&#39;re going to have to repeat this four times because the block code prompts us to repeat 4 times, so we iterate. So as we go through and follow what the block gives us. . So you see that the sum does work, it does sum up the odd numbers from 1-9 . Now lets look at the right block. . Sum is set to 0 Counter is set to 9 We must repeat until the counter &lt; 1 is true. . So we keep adding until -1, that is when the counter &lt; 1 is true, so we stop . So why is it important to understand that algorithms can be written in different ways and still accomplish the same task? . An algorithm is beautiful that way, just because you think of solving a problem differently, doesn&#39;t mean your wrong, . 3.9 Part 2 . Flowcharts . Flowcharts can help you visualize the functionality of an algorithm . | They are a good way to double check whether or not your algorithm is achieving its purpose . | . How To Set Up A Flowchart . label the start point . | Define any and all variables you may need . | Consider the first question you want the algorithm to ask . | Write what you want the algorithm to do if the answer to that question is yes (or true) . | Write what you want the algorithm to do if the answer to that question is no (or false) . Steps 3-5 are the steps to creating code that uses a process called selection (you can convert the question from step 3 to a conditional if-statement in code) | . | Write out all necessary steps for the algorithm to function properly . | You may want your algorithm to iterate some steps until a condition is met . You can write the steps that need to be repeated, then draw an arrow from the last step to a step above that contains a conditional statement | . | determine a way to reach the end goal | Selection vs. Iteration . Selection: . A process used in algorithms where a conditional if-statement leads to one of two outcomes . Outcome 1: if the conditional statement is true, something will happen . | Outcome 2: if the conditional statement is false, something else will happen . | Ex: see Example A . | . | . | Iteration . A process used in algorithms that allows certain things to happen until a condition is satisfied . Once the condition is satisfied, then an outcome is produced . | This can take the form of a for-loop, while-loop, and/or if-statement . | . | . | . Example A . Consider this situation: . You are shopping for your favorite food at your favorite supermarket . | You see that there is a sale on wheat products for 35% off . | There is another sale on produce for 20% off . | These sales are mutually exclusive . | Tax on all items is 8% . | . | Your TASK: . Create a flowchart for an algorithm that can be used to calculate the cost of your favorite item | . | . Example A Possible Solution (using Selection) . 3.9 Part 3 . For Algorithms How to combine and/or modify an existing algorithm. | . | . Benefits of combining algorithms can reduce development time, testing time, and simplify the identification of errors. | . | . Example in Class . Rules . step/rule 1: start with any positive integer | step/rule 2: if the preceding term is even; divide by 2 | step/rule 3: if the preceding term is odd; multiply by 3 and add 1 | step/rule 4: repeat steps until you arrive at 1 | fact: the sequence should ALWAYS end up at 1 if repeated. | . Algorithm to Start (Determining Whether a Number is Even or Odd) . print(&quot;choose value for x&quot;) varx=int(input(&quot;Enter any positive Integer&quot;)) print(varx) while varx != 1: if (varx %2 == 0): varx /= 2 else: varx = varx * 3 + 1 print(varx) # Run this cell to see how it works . choose value for x 32 16.0 8.0 4.0 2.0 1.0 . How can we modify this code to match our goal . Hint: uses arithmetic operations | Hint: look at the steps of the equation and try and modify it to fit them | Must display all numbers used in it | . Solution . Step 1 . steps/rules 2 &amp; 3. | . print(&quot;choose value for x&quot;) varx=int(input(&quot;Enter any positive Integer&quot;)) if (varx %2 == 0): varx == varx/2 # Change print to the function else: varx == varx * 3 + 1 # Change print to the function print(varx) . Step 2 . step/rule 4; here we add the loop | . print(&quot;choose value for x&quot;) varx=int(input(&quot;Enter any positive Integer&quot;)) while varx != 1: if (varx %2 == 0): varx = varx/2 # Change print to the function else: varx = varx * 3 + 1 # Change print to the function print(varx) . Step 3 . Display all values throughout the algorithm | . print(&quot;choose value for x&quot;) varx=int(input(&quot;Enter any positive Integer&quot;)) print(varx) while varx != 1: if (varx %2 == 0): varx = varx/2 print(varx) # add Display else: varx = varx * 3 + 1 print(varx) # add Display print(varx) # Final # Should be 1 every time . Takeaways . You can use code you&#39;ve previously wrote in order to make a project easier. | Breaking algorithms down into steps can make things easier and more simple. | . Hacks . create another algorithm using a famous mathematical algorithm such as the &quot;collatz conjecture.&quot; and explain your steps in a post on a blog. | . 3.11 Binary Search . Goals/Objectives: . detirmine number of iterations required to find vlue in data set. | explain requirements for binary search | . What is Binary Search? . Binary search is a search algorithm that finds the position of a target value within a sorted array. Binary search compares the target value to the middle element of the array. | An algorithm for iterating to find a value inside a data set | . About Binary Search: . Binary Search Algorithm starts in the middle of a data set of numbers and eliminates half the data. This process reapeats until the desired value is found or until all elements have been eliminated. | In order to use binary search effectivly and properly, data must be stored in order | COLLEGE BOARD INDEX STARTS AT 1 NOT 0 | . Think about how you would you would try to find a certain number in this set. . (IMAGE HERE) . One way would be to line up the numbers and count them individually untill you find the desired value. . When working with large data sets with lots of numbers, methods like these wont work . Instead, a Binary Search would be more effective. | . (IMAGE HERE) . Here we can see the numbers are set in an increasing order. Setting numbers in an increasing or decreasing is needed for a binary search . Binary search is started with the middle number first Middle number is found by taking the higest index number plus the lowest and divided by two | . | Binary Search can be represented using a tree as shown below | . (IMAGE HERE) . . Heres an easy way to put it: . binary search fidns the desired element by continuously chopping the search area in half | say the element you are looking for is &#39;f&#39; | . [a b c d e f g h] . We would start in the middle at element &#39;d&#39; | becuase our target is greater than d we will eliminate everything left of &#39;d&#39; including &#39;d&#39; (chopping it in half) . [e f g h] is what now remains . again we would &#39;chop in half&#39; | say we iterate through &#39;g&#39; and &#39;h&#39;, our desired element is still not found so we would eliminate &#39;g; and &#39;h&#39; and continue the process | . [e f] . now we are down to 2 elements | &#39;chopping in half&#39; will give us our desired element | . [f] . | . def BinarySearch(array, x, low, high): # Repeat until the pointers low and high meet each other while low &lt;= high: mid = low + (high - low)//2 # find the middle (taking the higest index number plus the lowest and divided by two) if array[mid] == x: # if desired number is the middle is found return desired number (middle number) return mid elif array[mid] &lt; x: low = mid + 1 else: high = mid - 1 return -1 array = [3, 4, 5, 6, 7, 8, 9] x = 4 result = BinarySearch(array, x, 0, len(array)-1) if result != -1: print(&quot;Element is present at index &quot; + str(result)) else: print(&quot;Not found&quot;) . Element is present at index 1 . We have created a function called binary_search() function which takes two arguments - a list to be sorted and a number to be searched. . | We have declared two variables to store the lowest and highest values in the list. The lowest is assigned initial value to 0, the highest to len(list1) 1 and mid as 0. . | Next, we have declared the while loop with the condition that the lowest is equal and smaller than the highest. The while loop will iterate if the number has not been found yet. . | In the while loop, we find the mid value and compare the index value to the number we are searching for. . | If the value of the mid-index is smaller than n, we increase the mid value by 1 and assign it to the low. The search moves to the left side. . | Otherwise, if the value of mid index is larger than n, we decrease the mid value by 1 and assign it to the high. The search moves to the right side. . | If the n is equal to the mid value then return mid. . | This will happen until the low is equal and smaller than the high. . | If we reach at the end of the function, then the element is not present in the list. We return -1 to the calling function. . | . . Hacks . Using my example above and steps below, create your own iteration using binary search . Steps . Compare x with the middle element. | If x matches with the middle element, we return the mid index. | Else if x is greater than the mid element, then x can only lie in the right (greater) half subarray after the mid element. Then we apply the algorithm again for the right half. | Else if x is smaller, the target x must lie in the left (lower) half. So we apply the algorithm for the left half. | . Homework Assignment (DUE FRIDAY 12/09 BY 5:00 PM) . Consider this situation: . You&#39;re playing a short game using a random number generator from 1 to 20 . On each turn, a player will generate 3 random numbers . | They get to keep the highest number that they generate as their score . | . | . | . Your TASK: . Create a flowchart that can be used to write an algorithm that calculates a player&#39;s score after a turn . NOTE: Don&#39;t forget the syntax for Flowcharts! (each shape represents an action) . | Try to implement selection and/or iteration in your algorithm . | Please do this using Google Drawing. It can be found in your Google Drive if you click New &gt; More &gt; Google Drawings . | . | Write the working algorithm in Python . Make sure to initialize / define any variables you may need . | Add comments to your code! . | . | How to submit: . Make a shareable link to your Flowchart with commenting access through Google Drive&#39;s &quot;Share&quot; feature . | Make a comment with the link at the top of the code block that holds your algorithm (use # for comments in Python) . | Submit a link to your algorithm (with the commented link to Flowchart) in the comment/issue found on the schedule . | Grading . DUE FRIDAY 12/09 BY 5:00 PM . | LATE PENALTY: -0.2 . | You will be graded based on: . how functional your algorithm is . | how well your Flowchart is organized . | . | . If something comes up, feel free to DM us on Slack . Flowchart . This isn&#39;t an algorithm thanks to max() . Working code . import random def roll(n): rollsList = [] while n &gt; 0: rollsList.append(random.randint(1,20)) n -= 1 print(rollsList) return max(rollsList) roll(3) # If you want me to do this with binary search (intentional obsolescence), lmk . [1, 18, 3] . 18 .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/algorithms",
            "relUrl": "/jupyter/algorithms",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Lists and Iteration",
            "content": "Lists . What are lists? . Lists: a sequence of variables . we can use lists to store multiple items into one variable | used to store collections of data | changeable, ordered, allow duplicates | . List examples in Python, JavaScript, and Pseudocode. . fruits = [&quot;apple&quot;, &quot;grape&quot;, &quot;strawberry&quot;] print (fruits) . const fruits = [&quot;apple&quot;, &quot;grape&quot;, &quot;strawberry&quot;]; . fruits ← [apple, grape, strawberry] . More list examples . brands = [&quot;nike&quot;, &quot;adidas&quot;, &quot;underarmour&quot;] #string numbers = [1, 2, 3, 4, 5] #integer truefalse = [True, False, True] #boolean . Lists are just one of four collection data types in Python . Tuple: collection that is ordered, unchangeable, allows duplicates | Set: collection that is unordered, unchangeable, doesn&#39;t allow duplicates | Dictionary: collection that is ordered, changeable, doesn&#39;t allow duplicates | . Terms . Index: a term used to sort data in order to reference to an element in a list (allows for duplicates) | Elements: the values in the list assigned to an index | . fruits = [&quot;apple&quot;, &quot;grape&quot;, &quot;strawberry&quot;] index = 1 print (fruits[index]) . Methods in Lists . Method Definition Example . append() | adds element to the end of the list | fruits.append(&quot;watermelon&quot;) | . index() | returns the index of the first element with the specified value | fruits.index(&quot;apple&quot;) | . insert() | adds element at given position | fruits.insert(1, &quot;watermelon&quot;) | . remove() | removes the first item with the specified value | fruits.remove(&quot;strawberry&quot;) | . reverse() | reverses the list order | fruits.reverse() | . sort() | sorts the list | fruits.sort() | . count() | returns the amount of elements with the specified value | fruits.count(&quot;apple&quot;) | . copy() | returns a copy of the list | fruits.copy() | . clear() | removes the elements from the list | fruits.clear() | . sports = [&quot;football&quot;, &quot;hockey&quot;, &quot;baseball&quot;, &quot;basketball&quot;] # change the value &quot;soccer&quot; to &quot;hockey&quot; print (sports) . [&#39;football&#39;, &#39;hockey&#39;, &#39;baseball&#39;, &#39;basketball&#39;] . sports = [&quot;football&quot;, &quot;soccer&quot;, &quot;baseball&quot;, &quot;basketball&quot;, &quot;golf&quot;] # add &quot;golf&quot; as the 3rd element in the list print (sports) . [&#39;football&#39;, &#39;soccer&#39;, &#39;baseball&#39;, &#39;basketball&#39;, &#39;golf&#39;] . Try this . Determine the output of the code segment | . . This will output &quot;unusual&quot;, &quot;bold&quot;, &quot;away&quot; . Iteration . stuff . title:Iteration HW- toc: true | comments: true | categories: [iteration] | tags: [iteration] | . First, what not to do . Iteration is important for your time and sanity . print(&quot;alpha&quot;) print(&quot;bravo&quot;) print(&quot;charlie&quot;) print(&quot;delta&quot;) print(&quot;echo&quot;) print(&quot;foxtrot&quot;) print(&quot;golf&quot;) print(&quot;hotel&quot;) print(&quot;india&quot;) print(&quot;juliett&quot;) print(&quot;kilo&quot;) print(&quot;lima&quot;) print(&quot;mike&quot;) print(&quot;november&quot;) print(&quot;oscar&quot;) print(&quot;papa&quot;) print(&quot;quebec&quot;) print(&quot;romeo&quot;) print(&quot;sierra&quot;) print(&quot;tango&quot;) print(&quot;uniform&quot;) print(&quot;victor&quot;) print(&quot;whiskey&quot;) print(&quot;x-ray&quot;) print(&quot;yankee&quot;) print(&quot;zulu&quot;) #please help me . Coding all of these individually takes a lot of unnecessary time, how can we shorten this time? . Iteration . Iteration is the repetition of a process or utterance applied to the result or taken from a previous statement. There&#39;s a lot of types of iteration though, what to use? How do we apply iteration to lists? . Some methods include using a &quot;for loop&quot;, using a &quot;for loop and range()&quot;, using a &quot;while loop&quot;, and using comprehension . Lists, tuples, dictionaries, and sets are iterable objects. They are the &#39;containers&#39; that store the data to iterate. . Each of these containers are able to iterate with the iter() command. . There are 2 types of iteration:definite and indefinite. Definite iteration clarifies how many times the loop is going to run, while indefinite specifies a condition that must be met . for variable in iterable: statement() . Iterator? Iterable? Iteration? . When an object is iterable it can be used in an iteration | When passed through the function iter() it returns an iterator | Strings, lists, dictionaries, sets and tuples are all examples of iterable objects. | . a = [&#39;alpha&#39;, &#39;bravo&#39;, &#39;charlie&#39;] itr = iter(a) print(next(itr)) print(next(itr)) print(next(itr)) . alpha bravo charlie . Loops . Well, above is basically just printing them again, so how do we takes these iterators into something we can make use for? | Loops take essentially what we did above and automates it, here are some examples. | . list = [&quot;Alpha&quot;, &quot;Bravo&quot;, &quot;Charlie&quot;, &quot;Delta&quot;, &quot;Echo&quot;, &quot;Foxtrot&quot;, &quot;Golf&quot;, &quot;Hotel&quot;, &quot;India&quot;, &quot;Juliett&quot;, &quot;Kilo&quot;, &quot;Lima&quot;, &quot;Mike&quot;, &quot;November&quot;, &quot;Oscar&quot;, &quot;Papa&quot;, &quot;Quebec&quot;, &quot;Romeo&quot;, &quot;Sierra&quot;, &quot;Tango&quot;, &quot;Uniform&quot;, &quot;Victor&quot;, &quot;Whiskey&quot;, &quot;X-ray&quot;, &quot;Yankee&quot;, &quot;Zulu&quot;] # using a for loop for i in list: #for item in the list, print the item print(i) . list = [&quot;Alpha&quot;, &quot;Bravo&quot;, &quot;Charlie&quot;, &quot;Delta&quot;, &quot;Echo&quot;, &quot;Foxtrot&quot;, &quot;Golf&quot;, &quot;Hotel&quot;, &quot;India&quot;, &quot;Juliett&quot;, &quot;Kilo&quot;, &quot;Lima&quot;, &quot;Mike&quot;, &quot;November&quot;, &quot;Oscar&quot;, &quot;Papa&quot;, &quot;Quebec&quot;, &quot;Romeo&quot;, &quot;Sierra&quot;, &quot;Tango&quot;, &quot;Uniform&quot;, &quot;Victor&quot;, &quot;Whiskey&quot;, &quot;X-ray&quot;, &quot;Yankee&quot;, &quot;Zulu&quot;] # Taking the length of the list lengthList = len(list) # Iteration using the amount of items in the list for i in range(lengthList): print(list[i]) . list = [&quot;Alpha&quot;, &quot;Bravo&quot;, &quot;Charlie&quot;, &quot;Delta&quot;, &quot;Echo&quot;, &quot;Foxtrot&quot;, &quot;Golf&quot;, &quot;Hotel&quot;, &quot;India&quot;, &quot;Juliett&quot;, &quot;Kilo&quot;, &quot;Lima&quot;, &quot;Mike&quot;, &quot;November&quot;, &quot;Oscar&quot;, &quot;Papa&quot;, &quot;Quebec&quot;, &quot;Romeo&quot;, &quot;Sierra&quot;, &quot;Tango&quot;, &quot;Uniform&quot;, &quot;Victor&quot;, &quot;Whiskey&quot;, &quot;X-ray&quot;, &quot;Yankee&quot;, &quot;Zulu&quot;] # Once again, taking the length of the list lengthList = len(list) # Setting the variable we are going to use as 0 i=0 # Iteration using the while loop # Argument saying WHILE a certain variable is a certain condition, the code should run while i &lt; lengthList: print(list[i]) i += 1 . Using the range() function . But wait, there&#39;s more . Need to save even more time? The above is useful for many occasions, but can get tedious fast, in this case, use range() | . x = range(5) for n in x: print(n) . 0 1 2 3 4 . Else, elif, and break . For when 1 statement isn&#39;t enough . Else:when the condition does not meet, do statement()- Elif: when the condition does not meet, but meets another condition, do statement() | Break: stop the loop | . HW Iteration . Use the list below to turn the first letter of any word (using input()) into its respective NATO phonetic alphabet word . Ex: . list -&gt; . lima india sierra tango . words = [&quot;alfa&quot;, &quot;bravo&quot;, &quot;charlie&quot;, &quot;delta&quot;, &quot;echo&quot;, &quot;foxtrot&quot;, &quot;golf&quot;, &quot;hotel&quot;, &quot;india&quot;, &quot;juliett&quot;, &quot;kilo&quot;, &quot;lima&quot;, &quot;mike&quot;, &quot;november&quot;, &quot;oscar&quot;, &quot;papa&quot;, &quot;quebec&quot;, &quot;romeo&quot;, &quot;sierra&quot;, &quot;tango&quot;, &quot;uniform&quot;, &quot;victor&quot;, &quot;whiskey&quot;, &quot;xray&quot;, &quot;yankee&quot;, &quot;zulu&quot;] inp = input().lower() output = &quot;&quot; for letter in inp: for word in words: if letter == word[0]: output += word + &quot; &quot; print(inp + &quot; -&gt; n&quot; + output) . bruh bravo romeo uniform hotel . 2D Iteration . 2D Arrays . A 2D array is simply just a list of lists. The example below is technically correct but... . keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] . Conventially 2D arrays are written like below. This is because 2D arrays are meant to be read in 2 dimensions (hence the name). Writing them like below makes them easier to visualize and understand. . keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] . Printing a 2D Array . We already know that we can&#39;t just print the matrix by calling it. We need to iterate through it to print it. . def print_matrix1(matrix): for i in range(len(matrix)): # outer for loop. This runs on i which represents the row. range(len(matrix)) is in order to iterate through the length of the matrix for j in range(len(matrix[i])): # inner for loop. This runs on the length of the i&#39;th row in the matrix (j changes for each row with a different length) print(matrix[i][j], end=&quot; &quot;) # [i][j] is the 2D location of that value in the matrix, kinda like a coordinate pair. [i] iterates to the specific row and [j] iterates to the specific value in the row. end=&quot; &quot; changes the end value to space, not a new line. print() # prints extra line. this is in the outer loop, not the inner loop, because it only wants to print a new line for each row . print(&quot;Raw matrix (list of lists): &quot;) print(keypad) print(&quot;Matrix printed using nested for loop iteration:&quot;) print_matrix1(keypad) print() . Raw matrix (list of lists): [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&#39; &#39;, 0, &#39; &#39;]] Matrix printed using nested for loop iteration 1 2 3 4 5 6 7 8 9 0 . def print_matrix2(matrix): for row in matrix: # Iterates through each &quot;row&quot; of matrix. Row is a dummy variable, it could technically be anything. It iterates through each value of matrix and each value is it&#39;s own list. in this syntax the list is stored in &quot;row&quot;. for col in row: # Iterates through each value in row. Again col, column, is a dummy variable. Each value in row is stored in col. print(col, end=&quot; &quot;) # Same as 1 print() # Same as 1 print_matrix2(keypad) . 1 2 3 4 5 6 7 8 9 0 . More Functions . Try to find another way to print the matrix. Only complete one of the two (unless you&#39;d like to do both). Below is a hint . fruit = [&quot;apples&quot;, &quot;bananas&quot;, &quot;grapes&quot;] print(fruit) print(*fruit) # Python built in function: &quot;*&quot;. Figure out what it does . [&#39;apples&#39;, &#39;bananas&#39;, &#39;grapes&#39;] apples bananas grapes . keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] def print_matrix3(matrix): for i in matrix: print(*i) print_matrix3(keypad) . 1 2 3 4 5 6 7 8 9 0 . Alternatively, find a way to print the matrix using the iter() function you already learned. Or use both! . def print_matrix4(matrix): code = &quot;your code goes here&quot; . keyboard = [[&quot;`&quot;, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;]] . Print what month you were born and how old you are by iterating through the keyboard (don&#39;t just write a string). . keyboard = [[&quot;`&quot;, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;]] print(str(keyboard[0][5]) + str(keyboard[3][9]) + str(keyboard[0][1]) + str(keyboard[0][2]) + str(keyboard[3][9]) + str(keyboard[0][2]) + str(keyboard[0][10]) + str(keyboard[0][10]) + str(keyboard[0][6]) + &quot; n&quot; + str(keyboard[0][1]) + str(keyboard[0][6])) . 5/12/2006 16 . Challenge . Change all of the letters that you DIDN&#39;T print above to spaces, &quot; &quot;, and then print the full keyboard. (the things you did print should remain in the same spot) . Alternative Challenge: If you would prefer, animate it using some form of delay so it flashes one of your letters at a time on the board in order and repeats. (this one may be slightly more intuitive) . DO NOT HARD CODE THIS. Don&#39;t make it harder on yourself, iterate through, make it abstract so it can be used dynamically. You should be able to input any string and your code should work. . . 1 6 R A H C M . If you get stuck you can just make a picture with an array and print it (I will grade based on how good it looks) . I do expect an attempt so write some code to show you tried the challenge. . keyboard = [[&quot;`&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;0&quot;, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;]] for row in keyboard: for item in row: print(item, end = &quot; &quot;) print() . ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / . keyboard = [[&quot;`&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;0&quot;, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;]] inp = input() for row in keyboard: for item in row: letterFound = True for letter in inp: if letter.lower() == item.lower(): print(letter.upper(), end = &quot; &quot;) else: letterFound = False if letterFound == False: print(&quot; &quot;, end = &quot; &quot;) print() # it kind of works:) . 1 2 3 .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/iteration",
            "relUrl": "/jupyter/iteration",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Unit 3 Sections 5-7",
            "content": "Lesson Overview: 3.5 - Boolean Expressions . Here we will focus on: basics of Booleans | its relationship with binary | relational operators | Logical Operators | . | . What is a boolean? . A data type with two possible values: true or false | . Boolean and Binary . So similar yet so different. . Boolean math and binary notation both use the same two ciphers: 1 and 0. | However, please note that Boolean quantities are restricted to a singlular bit (can only be either 1, or 0) | On the otherhand, binary numbers may be composed of many bits adding up in place-weighted form to any finite value, or size | . Must Knows . A Boolean value is either TRUE or FALSE | The AP Exam will provide you with a reference sheet with the operators below. | . . A few ways these operators could be used... | . . Relational Operators in action . How could you use operators to determine if the average of 5 grades is greater than 80? | . With the grades below, use a boolean expression to determine if the average grade is above an 80 and print the result (True or False) | Try it in as few steps as possible! | Be creative! There are obviously TONS of different practical solutions | . gradeList = [90, 65, 60, 75, 95] averageGrade = sum(gradeList)/len(gradeList) if averageGrade &gt; 80: print(&quot;The average grade is: &quot; + averageGrade + &quot;%&quot;) else: print(&quot;The average grade is below 80%.&quot;) . The average grade is below 80%. . The versatility of relational operators: . print(&quot;100 == 100:&quot;,100==100) print(&quot;Hello == Adios:&quot;,&quot;greeting&quot;==&quot;farewell&quot;) print(&quot;Hello != Adios:&quot;,&quot;greeting&quot;!=&quot;farewell&quot;) print(&quot;Hello == Hola:&quot;,&quot;greeting&quot;==&quot;greeting&quot;) print(&quot;5&gt;=4:&quot;, 5&gt;=4) print (&#39;&#39;) # Notice that relational operators can even work on lists! # For lists, the relational operator compares each respective component until an answer is derived print(&quot;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]:&quot;, [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]) print(&quot;[1,2,3,5] &gt; [1,2,3,4]:&quot;, [1,2,3,5] &gt; [1,2,3,4]) print(&quot;[1,2,3,5] &lt; [1,2,3,4]:&quot;, [1,2,3,5] &lt; [1,2,3,4]) print(&quot;[1,2,3,5] == [1,2,3,4]:&quot;, [1,2,3,5] == [1,2,3,4]) . 100 == 100: True Hello == Adios: False Hello != Adios: True Hello == Hola: True 5&gt;=4: True [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]: False [1,2,3,5] &gt; [1,2,3,4]: True [1,2,3,5] &lt; [1,2,3,4]: False [1,2,3,5] == [1,2,3,4]: False . Logical Operators! . These types of operators don&#39;t necessarily deal with equivalent/non-equivalent values, but they rather work on operands to produce a singular boolean result . AND : returns TRUE if the operands around it are TRUE | OR : returns TRUE if at least one operand is TRUE | NOT : returns TRUE if the following boolean is FALSE | . Turn the following arithmetic phrases into either True or False statements as indicated USING LOGICAL OPERATORS . print(&quot;1 &gt; 2 or 5 &lt; 12:&quot;, 1 &gt; 2 or 5 &lt; 12) # Output TRUE using OR ^ # Output FALSE using NOT print(&quot;24 &gt; 8:&quot;, not 24 &gt; 8) # Output FALSE using AND print(&quot;10 &gt; 20:&quot;, 10 &gt; 20 and 20 &lt; 10) . 1 &gt; 2 or 5 &lt; 12: True 24 &gt; 8: False 10 &gt; 20: False . Lesson Overview: 3.6 - Conditionals . Focusing on Selection . Selection: uses a condition that evaluates to true or false . Selection determines which part of an algorithm are executed based on a condition being true or false . Algorithm is a finite set of instructions that accomplish a specific task . Conditional Statements . Also known as &quot;if statements&quot; . Can be seen as if statements or if blocks . . Can also be seen as if else statements or if else-blocks . x = 20 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) . x is greater than y . x = 20 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) else: print(&quot;x is not greater than y&quot;) . x is greater than y . Participation . -Calculate the total sum of two numbers, if it is equal to 200, print 200, if otherwise, print the sum. . num1 = 100 num2 = 150 sum = num1 + num2 # you could just do # print(sum) # because if it&#39;s 200 it&#39;ll print 200 anyways lol if sum == 200: print(200) # or just print(sum)... else: print(sum) . 250 . Lesson Overview - 3.7 Nested Conditionals . Nested conditional statements consist of conditional statements within other conditional statements | Utilizes &quot;if else&quot; statements within &quot;if else&quot; statements | . Basics of a nested conditional: | . Block Coding Visual of Nested Conditionals: | Example Psuedocode of Nested Conditional Statements | . Analyzing Code Walkthrough . Psuedocode to the left, block code to the right | Approach the problem by going through each condition one at a time . Decide which ones are false to skip and which ones are true to execute | . | You Try: . | . score = 82 if (score &gt;= 90) { console.log(&quot;You got an A, congrats!&quot;) } else { if (score &gt;= 75) { console.log(&quot;Please come to retake up to a 90 next week at tutorial!&quot;) } else { console.log(&quot;You have detention!&quot;) } } . protein = 25 carbs = 36 sugar = 11 if (carbs &gt;= 55 || protein &lt;= 20 || sugar &gt;= 15) { console.log(&quot;Your lunch is too unhealthy, please pick a new one&quot;) } else { if (carbs &lt; 35 || protein &lt; 25) { console.log (&quot;This lunch is alright but try to add some more carbs or protein&quot;) } else { if (sugar &gt;= 11) { console.log (&quot;Looks great but lets see if we can cut down on sugar, we don&#39;t want diabetes!&quot;) } else { console.log (&quot;Amazing, you created a healthy lunch!!!&quot;) } } } . Writing Nested Code Activity . Write a program that fits these conditions using nested conditionals: If a person has at least 8 hours, they are experienced | If a person is experienced their salary is 90k, if they have ten hours or above their salary 150k | If a person is inexperienced their salary is always 50k | print the salary of the person at the end and whether they are experienced or not | . | var hrs = 10 var salary = &quot;&quot; var experienced = true if (hrs &gt;= 10) { salary = &quot;150k&quot; } else if (hrs &gt;= 8) { salary = &quot;90k&quot; } else { salary = &quot;50k&quot; experienced = false } console.log(&quot;This person has... n&quot; + &quot;Salary: &quot; + salary + &quot; n&quot; + &quot;Experience: &quot; + experienced) . This person has... Salary: 150k Experience: true . Hacks Assignments: . Conditionals: . Write a program that fits these conditions using nested conditionals: If the product is expired, print &quot;this product is no good&quot; | If the cost is above 50 dollars, and the product isn&#39;t expired, print &quot;this product is too expensive&quot; | If the cost is more than 25 dollars but under 50, and the product isn&#39;t expired, print &quot;this is a regular product&quot; | If the cost is under 25 dollars, print &quot;this is a cheap product&quot; | . | . product = {&quot;expired&quot;:false, &quot;cost&quot;:10} if (product[&quot;expired&quot;] == true) { console.log(&quot;This product is no good!!!!!!!&quot;) } else { if (product[&quot;cost&quot;] &gt; 50) { console.log(&quot;THis product is too expensive!11111&quot;) } else if (product[&quot;cost&quot;] &gt; 25) { console.log(&quot;this product normal&quot;) } else { console.log(&quot;cheap&quot;) } } . cheap . Boolean/Conditionals: . Create a multiple choice quiz that ... uses Boolean expressions | uses Logical operators | uses Conditional statements | prompts quiz-taker with multiple options (only one can be right) | has at least 3 questions | . | Points will be awarded for creativity, intricacy, and how well Boolean/Binary concepts have been intertwined | . qAndA = { &quot;question&quot; : [&quot;What language was this quiz coded in?&quot;, &quot;sus amognsu&quot;, &quot;what do you think of kanye&quot;], &quot;answers&quot; : [[&quot;python&quot;,&quot;english&quot;,&quot;java&quot;,&quot;javascript&quot;], [&quot;among us&quot;,&quot;sussy baka&quot;,&quot;among among&quot;,&quot;agmosnus&quot;], [&quot;great&quot;,&quot;ok&quot;,&quot;meh&quot;,&quot;no good&quot;]], &quot;correct&quot; : [&quot;a&quot;, &quot;b&quot;, &quot;d&quot;], &quot;letters&quot; : [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;] } totalQs = len(qAndA[&quot;question&quot;]) i = 0 score = 0 while i != totalQs: qAnswered = False currentQ = qAndA[&quot;question&quot;][i] print(currentQ + &quot; n&quot;) n = 0 while n &lt; 4: print(str(qAndA[&quot;letters&quot;][n]) + &quot;: &quot; + str(qAndA[&quot;answers&quot;][i][n])) n += 1 ans = input(currentQ) ans.lower() print(&quot;&quot;) while qAnswered == False: if ans == &quot;a&quot; or &quot;b&quot; or &quot;c&quot; or &quot;d&quot;: if ans == qAndA[&quot;correct&quot;][i]: score += 1 print(&quot;correct!11111&quot;) else: print(&quot;NO&quot;) qAnswered = True else: print(&quot;Enter a valid letter option (a, b, c, or d)&quot;) print(&quot;you score is: &quot; + str(score) + &quot; n&quot;) i += 1 . What language was this quiz coded in? a: python b: english c: java d: javascript correct!11111 you score is: 1 sus amognsu a: among us b: sussy baka c: among among d: agmosnus correct!11111 you score is: 2 what do you think of kanye a: great b: ok c: meh d: no good correct!11111 you score is: 3 .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/booleans",
            "relUrl": "/jupyter/booleans",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Title",
            "content": "import random # importing the &quot;random&quot; library def Dice(n): # Where “n” is the number of die rolled sum = 0 while n &gt;= 0: sum += random.randint(1, 6) n -= 1 return sum Dice(13) .",
            "url": "https://aidenhuynh.github.io/CS_Swag/2022/11/30/randomvaluessol.html",
            "relUrl": "/2022/11/30/randomvaluessol.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Unit 3 Sections 14 and 15",
            "content": "wget https://raw.githubusercontent.com/aidenhuynh/CS_Swag/master/_notebooks/2022-11-30-randomvalues.ipynb . Libraries . A library is a collection of precompiled codes that can be used later on in a program for some specific well-defined operations. | These precompiled codes can be referred to as modules. Each module contains bundles of code that can be used repeatedly in different programs. | A library may also contain documentation, configuration data, message templates, classes, and values, etc. | . Why are libraries important? . Using Libraries makes Python Programming simpler and convenient for the programmer. | One example would be through looping and iteration, as we don’t need to write the same code again and again for different programs. | Python libraries play a very vital role in fields of Machine Learning, Data Science, Data Visualization, etc. | . A few libraries that simplify coding processes: . Pillow allows you to work with images. | Tensor Flow helps with data automation and monitors performance. | Matplotlib allows you to make 2D graphs and plots. | . The AP Exam Refrence Sheet itself is a library! . Hacks: . Research two other Python Libraries NOT DISCUSSED DURING LESSON and make a markdown post, explaining their function and how it helps programmers code. . API&#8217;s . An Application Program Interface, or API, contains specific direction for how the procedures in a library behave and can be used. | An API acts as a gateway for the imported procedures from a library to interact with the rest of your code. | . Activity: Walkthrough with NumPy . Install NumPy on VSCode: Open New Terminal In VSCode: | pip3 install --upgrade pip | pip install numpy | | . REMEMBER: When running library code cells use Python Interpreter Conda (Version 3.9.12) . Example of using NumPy for arrays: . import numpy as np new_matrix = np.array([[1, 2, 3],[4, 5, 6],[7, 8, 9]]) print (new_matrix) . Example of using NumPy for derivatives: . import numpy as np # defining polynomial function var = np.poly1d([2, 0, 1]) print(&quot;Polynomial function, f(x): n&quot;, var) # calculating the derivative derivative = var.deriv() print(&quot;Derivative, f(x)&#39;=&quot;, derivative) # calculates the derivative of after # given value of x print(&quot;When x=5 f(x)&#39;=&quot;, derivative(5)) . Random Values . Random number generation (RNG) produces a random number (crazy right?) This means that a procedure with RNG can return different values even if the parameters (inputs) do not change | . | CollegeBoard uses RANDOM(A, B), to return an integer between integers A and B. RANDOM(1, 10) can output 1, 2, 3, 4, 5, 6, 7, 8, 9, or 10 | In Python, this would be random.randint(A, B), after importing Python&#39;s &quot;random&quot; library (import random) | JavaScript&#39;s works a little differently, with Math.random() returning a value between 0 and 1. To match Python and CollegeBoard, you could make a procedure like this | . | . | . CollegeBoard Example: What is the possible range of values for answ3 . Convert the following procedure to Python, then determine the range of outputs if n = 5. . PROCEDURE Dice(n) sum ← 0 REPEAT UNTIL n = 0 sum ← sum + RANDOM(1, 6) n ← n - 1 RETURN sum . import _____ # Fill in the blank def Dice(n): # Code here Dice(5) # Will output a range of __ to __ . Homework . Write a procedure that generates n random numbers, then sorts those numbers into lists of even and odd numbers (JS or Python, Python will be easier). . | Using NumPy and only coding in python cell, find the answer to the following questions: a. What is the derivative of 2x^5 - 6x^2 + 24x? b. What is the derivative of (13x^4 + 4x^2) / 2 when x = 9? . | Suppose you have a group of 10 dogs and 10 cats, and you want to create a random order for them. Show how random number generation could be used to create this random order. . | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/libraries",
            "relUrl": "/jupyter/libraries",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Robotics Scouting??!?!?!?",
            "content": "Enter team ID (be careful to enter a valid team id, code is not checking lmao) . | . Team Number Team Name School Location Sponsors Rookie Past Awards Regionals Past Rankings .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2022/11/29/Robotics_Scouting.html",
            "relUrl": "/markdown/2022/11/29/Robotics_Scouting.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Week 14 - Variables, Assignments, and Data Abstractions Hacks",
            "content": "def qAndRsp(prompt): print(&quot;Question: &quot; + prompt) msg = input(prompt) return msg questionsList = [ [&quot;What language was this coded in?&quot;, &quot;python&quot;], [&quot;Sussy&quot;, &quot;among us&quot;], [&quot;What letter comes after A in the alphabet?&quot;,&quot;b&quot;], [&quot;What is 3+4?&quot;,&quot;7&quot;], [&quot;What is my least favorite class?&quot;,&quot;csp&quot;], [&quot;aAAAAAaaaaaAaAaaAaaAAaaAAaaAaAaaa&quot;, &quot;&quot;], [&quot;I quit&quot;, &quot;ok&quot;], ] correct = 0 questions = len(questionsList) for QAPair in questionsList: question = QAPair[0] answer = QAPair[1] rsp = qAndRsp(question) rspLower = rsp.lower() if rspLower == answer: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(&quot;&quot;) quotient=correct/questions percentage=round((quotient * 100), 2) print(&quot;You scored &quot; + str(correct) +&quot;/&quot; + str(questions)) print(&quot;That&#39;s&quot;, percentage,&quot;%!&quot;) percentList = [ [100,&quot;Perfect!&quot;], [90,&quot;Great!&quot;], [80,&quot;Nice!&quot;], [70,&quot;Could be better&quot;], [60,&quot;Needs improvement&quot;], ] for numbersPair in percentList: numbers = numbersPair[0] note = numbersPair[1] if numbers + 10 &gt; percentage &gt;= numbers: print(note) if 60 &gt; percentage &gt; 0: print(&quot;Skill issue?&quot;) elif percentage ==0: print(&quot;Very cool!!&quot;) . Question: What language was this coded in? python is correct! Question: Sussy AMOGUS is incorrect! Question: What letter comes after A in the alphabet? b is correct! Question: What is 3+4? 7 is correct! Question: What is my least favorite class? CSP is correct! Question: aAAAAAaaaaaAaAaaAaaAAaaAAaaAaAaaa AAAHHHH is incorrect! Question: I quit me too is incorrect! You scored 4/7 That&#39;s 57.14 %! Skill issue? .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/vardata",
            "relUrl": "/jupyter/vardata",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Mathematical Expressions and Strings",
            "content": "What is an Algorithm? . An algorithm: a set of instructions that can accomplish a specific task. . An Algorithm Has Three Components . Sequencing: Algorithms do tasks in the order of specification. | . Selection: Helps choose two different outcomes based off a decision. | . Iteration: If a condition is true + then the code can repeat. | . Algorithms Can Be Represented in Two Ways . Flowcharts: Use shapes and arrows to represent the steps of an algorithm. | . . Pseudocode: A blend of human language and coding format. | Hacks: Jamboard Flowchart . Click on this link for a group activity . . . Arithmetic Operations . Arithmetic operations exist in most programming languages. . Basic Operations . Subtraction: . Represented by “-&quot; | . num1 = 2 - 1 . Addition: . Represented by &quot;+&quot; | . num1 = 2 + 1 . Multiplication: . Represented by “*” | . num1 = 2 * 1 . Division: . Represented by “/” | . num1 = 2 / 1 . Getting the Remainder: . Represented by “MOD” (% in python) | . num1 = 5 % 2 . Different Uses . Items can be numbers or variables. . Examples: . num1 = 10 num2 = num1 - 25 num3 = 100 * num1 num4 = num1 / num2 num5 = 9 % num4 . Order of Operations . Arithmetic operations in programming are performed in the same order as operations in mathematics: . Operations in parentheses should be done first. . | Division and multiplication should be done before addition and subtraction. . | Modulus works similar to multiplication and division. . | . Example: Evaluate num1 . num1 = 9 % 2 * ( 8 - 2 ) + 8 / ( 6 - 4 ) print(num1) . 10.0 . . . Variables . Different Ways Values are Stored in Variables . Numerical value stored in a variable . | Value of another variable stored in a variable . | Result of an operation stored in a variable . | Result of a procedure call stored in a variable . | score = 0 # 1 score = newScore # 2 score = newScore + 2 # 3 avgScore = allscores(20 + 60 + 80) # 4 . Sequencing is Important! . Changing the order of the steps changes the overall outcome + since every time the value assigned to a variable is changed + it overrides the last value which was assigned to the same variable. That is why it is important to track the value of variables + especially in code where the value is constantly changing. . num1 = 2 num2 = 4 num3 = 6 num1 = num2 + num3 # num1 is now 4 + 6 + which is 10 num2 = num1 + num3 # num2 is now (the new num1) 10 + 6 + which is 16 # output: num1 = 10 + num2 = 16 + num3 = 6 . VS . num1 = 2 num2 = 4 num3 = 6 num2 = num1 + num3 #num2 is now 8 num1 = num2 + num3 # num1 is now 14 # output: num1 = 14 + num2 = 8 + num3 = 6 . Tracking Variables . Tracking variables is a common question found on AP exams and is an important thing to keep in mind when writing any code. If the value of your variables changes a lot + not accounting for these changes can result in an unwanted outcome. . var1 = 9 var2 = 7 var3 = 2 #var = var1 + 5 #var2 = var1 - var3 #var1 = var2 #var3 = (var1 + var2) / 2 #var2 = 6 print(var1) print(var2) print(var3) . Hacks/Homework . Evaluate the variable &quot;result&quot;. . Num1 = 50 Num2 = Num1 % 9 + 15 Num3 = Num2 / Num1 + ( Num2 * 2 ) Num4 = Num3 + Num1 / 5 - 10 Result = Num4 - Num2 #its 20.4 . Num1 = 10 Num2 = Num1 % 3 * 4 Num1 = Num2 Num3 = Num1 * 3 Result = Num3 % 2 #0 . valueA = 4 valueB = 90 valueC = 17 valueB = valueC - valueA valueA = valueA * 10 if valueB &gt; 10: print(valueC) #17 . 17 . type = &quot;curly&quot; color = &quot;brown&quot; length = &quot;short&quot; type = &quot;straight&quot; hair = type + color + length print(hair) #straightbrownshort . straightbrownshort . . . Strings . What is a String? . A String: A string is a collection of characters. What is a character as character can be anything from numbers + letters + spaces + special symbols + etc. . A string is a collection of characters. What is a character as character can be anything from numbers + letters + spaces + special symbols + etc. . Certain procedures may be used with strings and they vary from programming language to language Python examples . len() to find the length of a string . lower() to convert to lowercase . etc. Pseudocode examples . len() returns the length of a string . concat() returns a string made up of the concatenated strings ex. concat(&quot;string1&quot; + &quot;string2&quot;) would return string1string2 . substring() returns the characters from the string beginning at the at the first position to the last so an example of this would be substring (&quot;abcdefghijk&quot; + 2 + 5) would print bcde (pseudocode starts at 1) . String Concatenation . What is string concatenation? . String concatenation is combining 2 or more strings to make a new strings in order to create a new string . concat() in pseudocode and varys from language to language can be used to combine to strings such as concat(&quot;cookie&quot; +&quot;monster&quot;) returns cookiemonster . Substrings . What is a substring? . A substring is a part of and already existing string. . In pseudocode substring() method is used for instance for concat(&quot;Mr.Mortenson is very handsome&quot; 1 + 2) the system would return Mr (remember that pseudocode starts at 1) . Hacks . Find the result of the following problems. Then convert the pseudocode to working python code using your knowledge of python string operators. . Problem 1 . Noun = &quot;Mr.Mortenson&quot; Adjective = &quot;handsome&quot; Adjective2 = &quot;Very&quot; Verb = &quot;is&quot; abrev = Noun[0:7] yoda = Adjective2 + &quot; &quot; + Adjective + &quot; &quot; + abrev + &quot; &quot; +Verb + &quot;.&quot; print(yoda) . Very handsome Mr.Mort is. . Problem 2 . cookie = &quot;choclate&quot; cookie2 = &quot;rasin&quot; len1 = len(cookie) / 2 len2 = len(cookie2) * 45 vote1 = str(cookie) + &quot; votes: &quot; + str(len2) vote2 = str(cookie2) + &quot; votes: &quot; + str(len1) votes = vote1 &quot; n&quot; + vote2 print(votes) . choclate votes: 225 rasin votes: 4.0 .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/mathexpressions",
            "relUrl": "/jupyter/mathexpressions",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Presentation Notes",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Variables, Assignments, and Data Abstraction * Keep variable names simple but not too vague * Spaces and dashes in variable names are improper syntax * Variable types: - Integers are numbers - Text/strings are words (not always) - Booleans are data that determine true/false * Lists can be stored in variables for easy access * Assignment operator allows programs to change values of a variable - = : Sets equal - += : Adds right to left - -= : Subtracts right from left - *= : Multiplies right by left - /= : Divides left by right * Data abstraction represents data in a useful form - Variables and lists * List = Ordered sequence of elements - Related items can be treated as a single value - Can keep adding elements - Store more elements in a single variable * Element = Individual value in a list with a unique index * Index = Way to reference the elements in a list or string using natural numbers (you can do negative in Python tho??) - AP Exam has it start at 1 * Python allows you to append lists to lists but on the AP Exam it just replaces the other list * Hacks * Grade: # Mathematical Expressions and Strings * Sequences are the order that algorithms do things * Selection chooses different outcomes from a decision * Iteration repeats code until true ![stuff](https://github.com/manigggg18/manimani/blob/master/images/12345.png?raw=true) * Remainder represented by MOD (% in python) * Follows same order of operations as regular mathematics * Numerical values can be stored in variables, as well as other variables, the results of mathematical operations, and results of procedure calls * Strings can be anything * Concatenation adds two strings (like just + in python) * substring(string, starting index, ending index) - substring(&quot;thisisabruhmoment&quot;, 8, 11) returns &quot;bruh&quot; (CollegeBoard index starts at 1) * Hacks * Grade: 0.9/1 # Boolean * If and else and else if * returns only 2 possible outputs, true or false * includes &lt;, &gt;, =, !=, etc. * Hacks * Grade: 0.95/1 # Lists &amp; Iteration * Iteration is the repetition of a process - Loops (for, while, recursive) * Matrices are complicated lol * Hacks * Grade: 1/1 # Algorithms * Algorithms are processes through code * Conditions are boolean expressions that output true or false * Binary search finds the index of specific values in a list by splitting in half the max(?) * Hacks * Grade: 0.9/1 # Procedures * Procedures are named groups of programming instructions that may have parameters and return values - Parameters are inputs like n in function(n) - return values are the outputs kind of - Also called methods and functions * Arguments specify the values of parameters * Procedure calls interrupt the sequential execution of statements to execute code within the procedure before continuing where the procedure was called * Procedures can return blocks of statements or data like booleans or values * Procedure names should be succinct - Consider input values, purpose - Start with a flowchart (NO) * Hacks * Grade: 0.75/1 # Simulations * Used to test hypothetical situations to prevent real-world consequences * Hacks * Grade: 0.8/1 # Algorithmic Efficiency * Minimize resources used (mainly time and memory) * Efficiency can be determined with time complexity or space complexity - Bubble sort better than insertion because takes less iterations * Heuristic solutions are shortcuts, not necessarily optimal but can make it faster * Hacks * Grade: 0/1 (OOPS)",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2022/11/28/notes.html",
            "relUrl": "/markdown/2022/11/28/notes.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Week 13 Review Ticket",
            "content": "Week 13 Review Ticket . Binary Hacks | Show working kernels | Show working docker | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2022/11/18/Week_13_Hacks-copy.html",
            "relUrl": "/markdown/review_ticket/2022/11/18/Week_13_Hacks-copy.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Week 11 Review Ticket",
            "content": "Week 11 Review Ticket . . Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Night at the Museum I only visited other periods of CSP and CSA (and Psych for other reasons), but I saw some pretty cool stuff, however I only took pictures before it started, of people&#39;s VSCode (because I thought it would be funny), and only took photos of two groups because I kind of forgot. Here is a picture of a phone taking a picture of someone&#39;s Dictionary website using an API. Here is a picture of a crime data website. | CollegeBoard Multiple Choice Questions Score: 45/50 Corrections: The correct answer is C because honestly I read the question too fast and flipped the &quot;&lt;&quot; If x is less than 0 (negative) then y is defined and the procedure will return &quot;True&quot;, otherwise it returns nothing. The answer is A because the application *would* need Brandon and Cynthia&#39;s usernames to find their dietary restrictions, but not of everyone on their contacts list. I don&#39;t really get this one. The answer isn&#39;t A because routing on the internet is usually dynamic, meaning that the order is not specified in advance. On this one I knew both A and D would work, but I didn&#39;t realize I was supposed to select multiple answers. The reason I went with D, however, is because it is what I would have done. | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2022/11/04/NatM_Blog.html",
            "relUrl": "/markdown/2022/11/04/NatM_Blog.html",
            "date": " • Nov 4, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Who's That Pokémon?",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . . Who&#39;s That Pokémon? . HOW TO PLAY . Press start | Choose generation of Pokémon (Gen 8 not yet fully supported by PokéAPI) | Submit Pokémon name with the button or Enter | Press Next or Enter | Repeat until all Pokémon are correct or until 3 incorrect answers | | . | . | . CLICK TO START | . A better version of the game (with global stats) can be found here . .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2022/10/20/whothatpokemon.html",
            "relUrl": "/markdown/2022/10/20/whothatpokemon.html",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "API Table",
            "content": "API Table - Pokémon . . Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . ID Pokémon Picture .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2022/10/13/API_Table.html",
            "relUrl": "/markdown/2022/10/13/API_Table.html",
            "date": " • Oct 13, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Week 7 Review Ticket",
            "content": "Week 7 Review Ticket . . Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . API: YouTube Downloader | Final Project Planning | Code Corrections | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2022/10/09/Week_7_Review_Ticket.html",
            "relUrl": "/markdown/review_ticket/2022/10/09/Week_7_Review_Ticket.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Week 7 - API Testing",
            "content": "I will add frontend to make this useable on the blog for everyone rather than just in this notebook later. . import json, requests, getpass, sys class color: BOLD = &#39; 033[91m&#39; UNDERLINE = &#39; 033[91m&#39; END = &#39; 033[0m&#39; # This doesn&#39;t really work except make things red, don&#39;t know why print(color.BOLD + &quot;YouTube Video Downloader with APIs: n&quot; + color.END) apiFound = False while apiFound == False: print(color.UNDERLINE + &quot;Enter a valid YouTube Video URL or ID:&quot; + color.END) videoURL = input(&quot;Enter a valid YouTube Video URL or ID:&quot;) videoID = videoURL[-11:] print(getpass.getuser() + &quot;: &quot; + videoURL) url = &quot;https://ytstream-download-youtube-videos.p.rapidapi.com/dl&quot; querystring = {&quot;id&quot;:videoID} headers = { &quot;X-RapidAPI-Key&quot;: &quot;e51c67fa22mshec43200baacf5b3p148027jsn10e3e84c629e&quot;, &quot;X-RapidAPI-Host&quot;: &quot;ytstream-download-youtube-videos.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) json = response.json() if json[&#39;status&#39;] == &quot;fail&quot;: print(color.BOLD + &quot; nYou have inputted an invalid YouTube ID, please try again. n&quot; + color.END) else: apiFound = True formatList = json.get(&#39;formats&#39;) qualityFound = False while qualityFound == False: print(color.UNDERLINE + &quot; nAvailable qualities:&quot; + color.END) i = 2 while i &gt;= 0: print(formatList[i][&#39;qualityLabel&#39;]) i -= 1 print(&quot;Note: 144p is &quot; + color.BOLD + &quot;AUDIO-ONLY&quot; + color.END) print(color.UNDERLINE + &quot; nEnter chosen quality (from the list):&quot; + color.END) chosenQuality = input(&quot;Enter chosen quality (from the list)&quot;) print(getpass.getuser() + &quot;: &quot; + chosenQuality) chosenQuality.lower() downloadURL = 0 if chosenQuality == formatList[0][&#39;qualityLabel&#39;]: downloadURL = 0 qualityFound = True elif chosenQuality == formatList[1][&#39;qualityLabel&#39;]: downloadURL = 1 qualityFound = True elif chosenQuality == formatList[2][&#39;qualityLabel&#39;]: downloadURL = 2 qualityFound = True else: print(color.BOLD + &quot; nThe selected resolution is not available, please try again.&quot; + color.END) print(color.UNDERLINE + &quot; nDownload link: n&quot; +formatList[downloadURL][&#39;url&#39;] + color.END + &quot; n nTo download, click on the three dots in the bottom-right then press download.&quot;) . YouTube Video Downloader with APIs: Enter a valid YouTube Video URL or ID: Aiden: https://www.youtube.com/watch?v=TApmI8YtYhc Available qualities: 144p 360p 720p Note: 144p is AUDIO-ONLY Enter chosen quality (from the list): Aiden: The selected resolution is not available, please try again. Available qualities: 144p 360p 720p Note: 144p is AUDIO-ONLY Enter chosen quality (from the list): Aiden: 720p Download link: https://rr5sn-4g5edns6.googlevideo.com/videoplayback?expire=1665633762&amp;ei=gjlHY9jRAZqy1wK45qGADQ&amp;ip=23.88.39.196&amp;id=o-AFKqeirNm7pBz-qtDw5uSZ_D3elyevEQf-n9Y6w3bR8Z&amp;itag=22&amp;source=youtube&amp;requiressl=yes&amp;mh=KX&amp;mm=31%2C29&amp;mn=sn-4g5edns6%2Csn-4g5lznez&amp;ms=au%2Crdu&amp;mv=m&amp;mvi=5&amp;pl=26&amp;initcwndbps=282500&amp;vprv=1&amp;svpuc=1&amp;mime=video%2Fmp4&amp;cnr=14&amp;ratebypass=yes&amp;dur=3.134&amp;lmt=1630135775777054&amp;mt=1665611831&amp;fvip=3&amp;fexp=24001373%2C24007246&amp;c=ANDROID&amp;txp=5311224&amp;sparams=expire%2Cei%2Cip%2Cid%2Citag%2Csource%2Crequiressl%2Cvprv%2Csvpuc%2Cmime%2Ccnr%2Cratebypass%2Cdur%2Clmt&amp;sig=AOq0QJ8wRQIgYCqH0FduYsIW4JcOIHh5xZ2r0KWTxifgEXKIWCSoUF4CIQDTRUhB15r0QljszhXWoY7-EcvgO8ejS72TmIvw8_dPkA%3D%3D&amp;lsparams=mh%2Cmm%2Cmn%2Cms%2Cmv%2Cmvi%2Cpl%2Cinitcwndbps&amp;lsig=AG3C_xAwRAIgKFiwJ7fK4qGudS8wcyOjcGxbSR1z4qxmBuROzt83OfgCIBc-Yn0sbcrF0uzKoLLreDgflqrsmbIQsu9U6_RgDMvh To download, click on the three dots in the bottom-right then press download. .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/markdown/2022/10/05/API_Test.html",
            "relUrl": "/jupyter/markdown/2022/10/05/API_Test.html",
            "date": " • Oct 5, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Making TETRIS",
            "content": "Planning . Use Javascript setInterval() for block gravity Potentially make the interval a variable that increases over time or with difficulty settings | . | . | Block saving sounds hard, do that last maybe | A list of each block type? | . Day #1 (10/4/22) . // html zone for later . var gameRunning = 0; //variables for easy difficulty changes, settings options implemented later? var time = 500; // change for initial speed in ms var acceleration = 10000; // how long it takes before increasing speed in ms function timer() { time -= 50 }; function gravity() { //gravity code poggers }; function gameStart() { // do an onclick event on html button gameRunning = 1 //change screen?}; while (gameRunning === 1) { setInterval(timer, acceleration) // every ___ milliseconds the speed will increase if (time &gt;= 10) { setInterval(gravity, time) } else { setInterval(gravity, 10) // speed caps at 10ms } }; while (gameRunning === 0) { // score screen or somethin } //ok like the timer works but it doesnt stop because i don&#39;t have a stop thing yet . 450 400 350 300 250 200 150 100 50 0 -50 -100 -150 -200 -250 -300 -350 -400 -450 -500 -550 -600 -650 -700 -750 -800 -850 -900 -950 -1000 -1050 -1100 -1150 -1200 -1250 -1300 -1350 -1400 -1450 -1500 -1550 -1600 -1650 -1700 -1750 -1800 -1850 -1900 -1950 -2000 -2050 -2100 -2150 -2200 -2250 -2300 -2350 -2400 -2450 -2500 -2550 -2600 -2650 -2700 -2750 -2800 -2850 -2900 -2950 -3000 -3050 -3100 -3150 -3200 -3250 -3300 -3350 -3400 -3450 -3500 -3550 -3600 -3650 -3700 -3750 -3800 -3850 -3900 -3950 -4000 -4050 -4100 -4150 -4200 -4250 -4300 -4350 -4400 -4450 -4500 -4550 -4600 -4650 -4700 -4750 -4800 -4850 -4900 -4950 -5000 -5050 -5100 -5150 -5200 -5250 -5300 -5350 -5400 -5450 -5500 -5550 -5600 -5650 -5700 -5750 -5800 -5850 -5900 -5950 -6000 -6050 -6100 -6150 -6200 -6250 -6300 -6350 -6400 -6450 -6500 -6550 -6600 -6650 -6700 -6750 -6800 -6850 -6900 -6950 -7000 -7050 -7100 -7150 -7200 -7250 -7300 -7350 -7400 -7450 -7500 -7550 -7600 -7650 -7700 -7750 -7800 -7850 -7900 -7950 -8000 -8050 -8100 -8150 -8200 -8250 -8300 -8350 -8400 -8450 -8500 -8550 -8600 -8650 -8700 -8750 -8800 -8850 -8900 -8950 -9000 -9050 -9100 -9150 -9200 -9250 -9300 -9350 -9400 -9450 -9500 -9550 -9600 -9650 -9700 -9750 -9800 -9850 -9900 -9950 -10000 -10050 -10100 -10150 -10200 -10250 -10300 -10350 -10400 -10450 -10500 -10550 -10600 -10650 -10700 -10750 -10800 -10850 -10900 -10950 -11000 -11050 -11100 -11150 -11200 -11250 -11300 -11350 -11400 -11450 -11500 -11550 -11600 -11650 -11700 -11750 -11800 -11850 -11900 -11950 -12000 -12050 -12100 -12150 -12200 -12250 -12300 -12350 -12400 -12450 -12500 -12550 -12600 -12650 -12700 -12750 -12800 -12850 -12900 -12950 -13000 -13050 -13100 -13150 -13200 -13250 -13300 -13350 -13400 -13450 -13500 -13550 -13600 -13650 -13700 -13750 -13800 -13850 -13900 -13950 -14000 -14050 -14100 -14150 -14200 -14250 -14300 -14350 -14400 -14450 -14500 -14550 -14600 -14650 -14700 -14750 -14800 -14850 -14900 -14950 -15000 -15050 -15100 -15150 -15200 -15250 -15300 -15350 -15400 -15450 -15500 -15550 -15600 -15650 -15700 -15750 -15800 -15850 -15900 -15950 -16000 -16050 -16100 -16150 -16200 -16250 -16300 -16350 -16400 -16450 -16500 -16550 -16600 -16650 -16700 -16750 -16800 -16850 -16900 -16950 -17000 -17050 -17100 -17150 -17200 -17250 -17300 -17350 -17400 -17450 -17500 -17550 -17600 -17650 -17700 -17750 -17800 -17850 -17900 -17950 -18000 -18050 -18100 -18150 -18200 -18250 -18300 -18350 -18400 -18450 -18500 -18550 -18600 -18650 -18700 -18750 -18800 -18850 -18900 -18950 -19000 -19050 -19100 -19150 -19200 -19250 -19300 -19350 -19400 -19450 -19500 -19550 -19600 -19650 -19700 -19750 -19800 -19850 -19900 -19950 -20000 -20050 -20100 -20150 -20200 -20250 -20300 -20350 -20400 -20450 -20500 -20550 -20600 -20650 -20700 -20750 -20800 -20850 -20900 -20950 -21000 -21050 -21100 -21150 -21200 -21250 -21300 -21350 -21400 -21450 -21500 -21550 -21600 -21650 -21700 -21750 -21800 -21850 -21900 -21950 -22000 -22050 -22100 -22150 -22200 -22250 -22300 -22350 -22400 -22450 -22500 -22550 -22600 -22650 -22700 -22750 -22800 -22850 -22900 -22950 -23000 -23050 -23100 -23150 -23200 -23250 -23300 -23350 -23400 -23450 -23500 -23550 -23600 -23650 -23700 -23750 -23800 -23850 -23900 -23950 -24000 -24050 -24100 -24150 -24200 -24250 -24300 -24350 -24400 -24450 -24500 -24550 -24600 -24650 -24700 -24750 -24800 -24850 -24900 -24950 -25000 -25050 -25100 -25150 -25200 -25250 -25300 -25350 -25400 -25450 -25500 -25550 -25600 -25650 -25700 -25750 -25800 -25850 -25900 -25950 -26000 -26050 -26100 -26150 -26200 -26250 -26300 -26350 -26400 -26450 -26500 -26550 -26600 -26650 -26700 -26750 -26800 -26850 -26900 -26950 -27000 -27050 -27100 -27150 -27200 -27250 -27300 -27350 -27400 -27450 -27500 -27550 -27600 -27650 -27700 -27750 -27800 -27850 -27900 -27950 -28000 -28050 -28100 -28150 -28200 -28250 -28300 -28350 -28400 -28450 -28500 -28550 -28600 -28650 -28700 -28750 -28800 -28850 -28900 -28950 -29000 -29050 -29100 -29150 -29200 -29250 -29300 -29350 -29400 -29450 -29500 -29550 -29600 -29650 -29700 -29750 -29800 -29850 -29900 -29950 -30000 -30050 -30100 -30150 -30200 -30250 -30300 -30350 -30400 -30450 -30500 -30550 -30600 -30650 -30700 -30750 -30800 -30850 -30900 -30950 -31000 -31050 -31100 -31150 -31200 -31250 -31300 -31350 -31400 -31450 -31500 -31550 -31600 -31650 -31700 -31750 -31800 -31850 -31900 -31950 -32000 -32050 -32100 -32150 -32200 -32250 -32300 -32350 -32400 -32450 -32500 -32550 -32600 -32650 -32700 -32750 -32800 -32850 -32900 -32950 -33000 -33050 -33100 -33150 -33200 -33250 -33300 -33350 -33400 -33450 -33500 -33550 -33600 -33650 -33700 -33750 -33800 -33850 -33900 -33950 -34000 -34050 -34100 -34150 -34200 -34250 -34300 -34350 -34400 -34450 -34500 -34550 -34600 -34650 -34700 -34750 -34800 -34850 -34900 -34950 -35000 -35050 -35100 -35150 -35200 -35250 -35300 -35350 -35400 -35450 -35500 -35550 -35600 -35650 -35700 -35750 -35800 -35850 -35900 -35950 -36000 -36050 -36100 -36150 -36200 -36250 -36300 -36350 -36400 -36450 -36500 -36550 -36600 -36650 -36700 -36750 -36800 -36850 -36900 -36950 -37000 -37050 -37100 -37150 -37200 -37250 -37300 -37350 -37400 . Day 2 (10/20/22) . After looking online at some examples of TETRIS with js, I have noticed that I would need to write a minimum of like 1,500 lines of code so I have given up on this and am now moving to do Who&#39;s That Pokemon. .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/markdown/2022/09/30/tetris-testing.html",
            "relUrl": "/jupyter/markdown/2022/09/30/tetris-testing.html",
            "date": " • Sep 30, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Week 6 - Deployment",
            "content": "Week 6 Review Ticket . . Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . CollegeBoard MCQs (1.1, 1.2, 1.3) I got a point off on 1.2 because I forgot like basic Integrated math (5*3 vs 5^3) | . AWS Deployment (curl output) (webapp) ubuntu@ip-172-31-28-68:~/Flask_Swag$ curl http://localhost:8086&lt;br/&gt; &lt;!-- Custom file for standardizing Project Data&lt;br/&gt; This HTML is setup as as a Jinja2 layout, coders use layouts for:&lt;br/&gt; ... standardization of style&lt;br/&gt; ... setting expectations for data&lt;br/&gt; ... code reuse&lt;br/&gt; --&gt;&lt;br/&gt; &lt;!DOCTYPE HTML&gt;&lt;br/&gt; &lt;html lang=&quot;en&quot;&gt;&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; &lt;br/&gt; &lt;br/&gt; &lt;br/&gt; &lt;br/&gt; &lt;head&gt;&lt;br/&gt; &lt;!-- Required meta tags --&gt;&lt;br/&gt; &lt;meta charset=&quot;utf-8&quot;&gt;&lt;br/&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;&lt;br/&gt; &lt;br/&gt; &lt;!-- JQuery CSS --&gt;&lt;br/&gt; &lt;script src=&quot;https://code.jquery.com/jquery-3.3.1.slim.min.js&quot; integrity=&quot;sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;&lt;br/&gt; &lt;!-- Bootstrap CSS --&gt;&lt;br/&gt; &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; integrity=&quot;sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;br/&gt; &lt;br/&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css&quot;&gt;&lt;br/&gt; &lt;style&gt;&lt;br/&gt; .navbar {&lt;br/&gt; position: static;&lt;br/&gt; z-index: 9999;&lt;br/&gt; }&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; &lt;/style&gt;&lt;br/&gt; &lt;br/&gt; &lt;title&gt;Nighthawk Coding | Home &lt;/title&gt;&lt;br/&gt; &lt;br/&gt; &lt;/head&gt;&lt;br/&gt; &lt;br/&gt; &lt;body&gt;&lt;br/&gt; &lt;!-- Navigation Bar from bootstrap&lt;br/&gt; This HTML is setup as a fragment allowing it to be &quot;included&quot; by other HTML files via Jinja2&lt;br/&gt; --&gt;&lt;br/&gt; &lt;nav class=&quot;navbar navbar-expand-lg navbar-light bg-light&quot;&gt;&lt;br/&gt; &lt;img src=&quot;/static/assets/ncs_logo.png&quot; width=&quot;50&quot; height=&quot;50&quot; class=&quot;d-inline-block align-center&quot; alt=&quot;&quot;&gt;&lt;br/&gt; &lt;a class=&quot;navbar-brand&quot; href=&quot;https://csp.nighthawkcodingsociety.com/&quot;&gt;Nighthawk Coding&lt;/a&gt;&lt;br/&gt; &lt;button class=&quot;navbar-toggler&quot; type=&quot;button&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#navbarNavAltMarkup&quot; aria-controls=&quot;navbarNavAltMarkup&quot; aria-expanded=&quot;false&quot; aria-label=&quot;Toggle navigation&quot;&gt;&lt;br/&gt; &lt;span class=&quot;navbar-toggler-icon&quot;&gt;&lt;/span&gt;&lt;br/&gt; &lt;/button&gt;&lt;br/&gt; &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;navbarNavAltMarkup&quot;&gt;&lt;br/&gt; &lt;div class=&quot;navbar-nav&quot;&gt;&lt;br/&gt; &lt;!-- url_for is a Jinja2 pre-processor that finds route from function name (def) --&gt;&lt;br/&gt; &lt;a class=&quot;nav-link&quot; href=/&gt;Home&lt;/a&gt;&lt;br/&gt; &lt;a class=&quot;nav-link&quot; href=/stub/&gt;Sign-Up&lt;/a&gt;&lt;br/&gt; &lt;/div&gt;&lt;br/&gt; &lt;/div&gt;&lt;br/&gt; &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;navbarNavDarkDropdown&quot;&gt;&lt;br/&gt; &lt;ul class=&quot;navbar-nav&quot;&gt;&lt;br/&gt; &lt;li class=&quot;nav-item dropdown&quot;&gt;&lt;br/&gt; &lt;a class=&quot;nav-link dropdown-toggle&quot; href=&quot;#&quot; id=&quot;navbarDarkDropdownMenuLink&quot; role=&quot;button&quot; data-bs-toggle=&quot;dropdown&quot; aria-expanded=&quot;false&quot;&gt;&lt;br/&gt; Blogs&lt;br/&gt; &lt;/a&gt;&lt;br/&gt; &lt;ul class=&quot;dropdown-menu dropdown-menu-dark&quot; aria-labelledby=&quot;navbarDarkDropdownMenuLink&quot;&gt;&lt;br/&gt; &lt;li&gt;&lt;a class=&quot;dropdown-item&quot; href=/projects/portfolio/&gt;Portfolio&lt;/a&gt;&lt;/li&gt;&lt;br/&gt; &lt;li&gt;&lt;a class=&quot;dropdown-item&quot; href=/projects/kangaroos/&gt;Kangaroos&lt;/a&gt;&lt;/li&gt;&lt;br/&gt; &lt;li&gt;&lt;a class=&quot;dropdown-item&quot; href=/projects/walruses/&gt;Dash&#39;s Blog&lt;/a&gt;&lt;/li&gt;&lt;br/&gt; &lt;li&gt;&lt;a class=&quot;dropdown-item&quot; href=/projects/aidensblog/&gt;Aiden&#39;s Blog&lt;/a&gt;&lt;/li&gt;&lt;br/&gt; &lt;/ul&gt;&lt;br/&gt; &lt;/li&gt;&lt;br/&gt; &lt;/ul&gt;&lt;br/&gt; &lt;/div&gt;&lt;br/&gt; &lt;/nav&gt;&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; &lt;!-- Start of body content specific to page --&gt;&lt;br/&gt; &lt;html&gt;&lt;br/&gt; &lt;head&gt;&lt;br/&gt; &lt;style&gt;&lt;br/&gt; html,body { height:100%; }&lt;br/&gt; .mainDiv {&lt;br/&gt; text-align: center;&lt;br/&gt; padding: 30px;&lt;br/&gt; background-color: #4d4d4dbe;&lt;br/&gt; margin: auto;&lt;br/&gt; border-radius:25px;&lt;br/&gt; width:50%;&lt;br/&gt; height:80%;&lt;br/&gt; }&lt;br/&gt; h2.titleText {&lt;br/&gt; font-family: &quot;Courier New&quot;;&lt;br/&gt; color:rgb(0, 255, 170);&lt;br/&gt; }&lt;br/&gt; .button {&lt;br/&gt; width: 100%;&lt;br/&gt; height: 15%;&lt;br/&gt; background-color: rgba(255, 255, 255, 0.9);&lt;br/&gt; border: 0px;&lt;br/&gt; border-radius:10px;&lt;br/&gt; }&lt;br/&gt; &lt;/style&gt;&lt;br/&gt; &lt;/head&gt;&lt;br/&gt; &lt;br&gt;&lt;br/&gt; &lt;div class=&quot;mainDiv&quot;&gt;&lt;br/&gt; &lt;body&gt;&lt;br/&gt; &lt;h1 style=&quot;color:rgb(0, 255, 170);text-align:center;text-align:center;font-family:&#39;Courier New&#39;&quot;&gt;title text&lt;/h1&gt; &lt;br/&gt; &lt;i style=&quot;color:rgb(212, 212, 212)&quot;&gt;this doesn&#39;t do anything yet&lt;/i&gt;&lt;br/&gt; &lt;br&gt;&lt;br/&gt; &lt;br&gt;&lt;br/&gt; &lt;br&gt;&lt;br/&gt; &lt;button class=&quot;button&quot;&gt;GAME TITLE 1&lt;/button&gt;&lt;br/&gt; &lt;br&gt;&lt;br/&gt; &lt;br&gt;&lt;br/&gt; &lt;button class=&quot;button&quot;&gt;GAME TITLE 2&lt;/button&gt;&lt;br/&gt; &lt;br&gt;&lt;br/&gt; &lt;br&gt;&lt;br/&gt; &lt;button class=&quot;button&quot;&gt;GAME TITLE 3&lt;/button&gt;&lt;br/&gt; &lt;br&gt;&lt;br/&gt; &lt;br&gt;&lt;br/&gt; &lt;button class=&quot;button&quot;&gt;GAME TITLE 4&lt;/button&gt;&lt;br/&gt; &lt;/body&gt;&lt;br/&gt; &lt;/div&gt;&lt;br/&gt; &lt;/html&gt;&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; &lt;!-- Bootstrap 5.0 Bundle with Popper --&gt;&lt;br/&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js&quot; integrity=&quot;sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;&lt;br/&gt; &lt;/body&gt;&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; &lt;script src=&quot;/static/js/three.r119.min.js&quot;&gt;&lt;/script&gt;&lt;br/&gt; &lt;script src=&quot;/static/js/vanta.birds.min.js&quot;&gt;&lt;/script&gt;&lt;br/&gt; &lt;script&gt;&lt;br/&gt; VANTA.BIRDS({&lt;br/&gt; el: &quot;body&quot;,&lt;br/&gt; mouseControls: true,&lt;br/&gt; touchControls: true,&lt;br/&gt; gyroControls: false,&lt;br/&gt; minHeight: 200.00,&lt;br/&gt; minWidth: 200.00,&lt;br/&gt; scale: 1.00,&lt;br/&gt; scaleMobile: 1.00&lt;br/&gt; })&lt;br/&gt; &lt;/script&gt; . | &lt;/ul&gt; | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2022/09/26/Week_6_Review_Ticket.html",
            "relUrl": "/markdown/review_ticket/2022/09/26/Week_6_Review_Ticket.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Week 5 - UI Starters",
            "content": "Week 5 Review Ticket . . Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Program Purpose Hacks | Submenu (above) | Java Testing (on the submenu) | Flask stuff | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2022/09/25/Week_5_Review_Ticket.html",
            "relUrl": "/markdown/review_ticket/2022/09/25/Week_5_Review_Ticket.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Submenu Test",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2022/09/25/Submenu_Test.html",
            "relUrl": "/markdown/2022/09/25/Submenu_Test.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "Week 5 - Program Purpose Hacks",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . Questions: . Do we have final project ideas for a PBL Web Project? We are thinking of making a website that contains multiple different games, something like coolmathgames.com | Each person will be making their own game, and we will assist each other along the way | . | Are we considering a project that is best for our educational purpose? In working primarily by ourselves on our own games, we will be more susceptible to running into problems, thus allowing for more learning opportunities | . | Is the project going to hold team members interest for 8 weeks? We like games, we like to code -&gt; coding + games = mega cool! | . | Does the project have potential for someone to use it beyond the 8 weeks? ie Customer or Sponsor needed? People don&#39;t really need games but it might be fun to revisit now and then | . | Does the project have potential to be used for Create Performance Task submission? My game will be Tetris, which has potential for Create Performance Task submission as it uses data abstraction in the lists of possible tetricles | . | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/markdown/2022/09/23/Program_Purpose_Hacks.html",
            "relUrl": "/jupyter/markdown/2022/09/23/Program_Purpose_Hacks.html",
            "date": " • Sep 23, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Week 5 - Java Testing",
            "content": ". Home About Me Time Box Funny picture of a bird Java Testing Java Table API . . console.log output . var bruh = &quot;cool coding&quot;; console.log(bruh); . cool coding . console.log as a Function . function print(output) { console.log(output) } print(bruh) print(&quot; &quot;) print(&quot;Can also be numbers:&quot;) print(100) . cool coding Can also be numbers: 100 . Getting Input Types . function printType(output) { console.log(&quot;This is a&quot;, typeof output+&quot;:&quot;, output); } print(&quot;You don&#39;t have to specify what type of value inputs are (string or int)&quot;) printType(&quot;Text&quot;); printType(bruh); // bruh = a string, therefore... printType(100); printType([1,2,3]); // object is generic for arrays (array = list) . You don&#39;t have to specify what type of value inputs are (string or int) This is a string: Text This is a string: cool coding This is a number: 100 This is a object: [ 1, 2, 3 ] . Coin Flipper . function coinFlip() { var flip = Math.random() if(flip &lt; &quot;0.5&quot;) { console.log(&quot;It&#39;s Heads!&quot;) } else if(flip &gt; &quot;0.5&quot;) { console.log(&quot;It&#39;s Tails!&quot;) } else { console.log(&quot;It landed on it&#39;s side!&quot;) // This is a 0.00000000000001% chance } } var coinCount = 10 while (coinCount&gt;0) { coinCount=(coinCount-1); coinFlip(); } . It&#39;s Heads! It&#39;s Tails! It&#39;s Tails! It&#39;s Tails! It&#39;s Heads! It&#39;s Heads! It&#39;s Tails! It&#39;s Tails! It&#39;s Heads! It&#39;s Tails! . Table with Java . function htmlsource() { // i could not figure out arrays return ( &quot;&lt;head&gt;&quot; + &quot;&lt;style&gt;&quot; + &quot;table, th, td, tr {&quot; + &quot;border: 1px solid #000000;&quot; + &quot;text-align: left;&quot; + &quot;padding: 8px;&quot; + &quot;}&quot; + &quot;&lt;/style&gt;&quot; + &quot;&lt;/head&gt;&quot; + &quot;&lt;table&gt;&quot; + &quot;&lt;tr&gt;&quot; + &quot;&lt;th&gt;&lt;b&gt;&quot; + &quot;Name&quot; + &quot;&lt;/b&gt;&lt;/th&gt;&quot; + &quot;&lt;th&gt;&lt;b&gt;&quot; + &quot;Role&quot; + &quot;&lt;/b&gt;&lt;/th&gt;&quot; + &quot;&lt;/tr&gt;&quot; + &quot;&lt;tr&gt;&quot; + &quot;&lt;td&gt;&quot; + &quot;Aiden&quot; + &quot;&lt;/td&gt;&quot; + &quot;&lt;td&gt;&quot; + &quot;Scrum Master&quot; + &quot;&lt;/td&gt;&quot; + &quot;&lt;/tr&gt;&quot; + &quot;&lt;tr&gt;&quot; + &quot;&lt;td&gt;&quot; + &quot;Dash&quot; + &quot;&lt;/td&gt;&quot; + &quot;&lt;td&gt;&quot; + &quot;Backend Developer&quot; + &quot;&lt;/td&gt;&quot; + &quot;&lt;/tr&gt;&quot; + &quot;&lt;tr&gt;&quot; + &quot;&lt;td&gt;&quot; + &quot;Sabine&quot; + &quot;&lt;/td&gt;&quot; + &quot;&lt;td&gt;&quot; + &quot;Frontend Developer&quot; + &quot;&lt;/td&gt;&quot; + &quot;&lt;/tr&gt;&quot; + &quot;&lt;tr&gt;&quot; + &quot;&lt;td&gt;&quot; + &quot;Aiden&quot; + &quot;&lt;/td&gt;&quot; + &quot;&lt;td&gt;&quot; + &quot;Backend Developer&quot; + &quot;&lt;/td&gt;&quot; + &quot;&lt;/tr&gt;&quot; + &quot;&lt;/table&gt;&quot; ) } $$.html(htmlsource()); . . NameRole . Aiden | Scrum Master | . Dash | Backend Developer | . Sabine | Frontend Developer | . Aiden | Backend Developer | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/markdown/2022/09/21/Java_Test.html",
            "relUrl": "/jupyter/markdown/2022/09/21/Java_Test.html",
            "date": " • Sep 21, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "Time Box",
            "content": ". Week Review Ticket Points . TRI 1 | . 0 | Week 0 Review Ticket | Tools and Setup | . 1 | Week 1 Review Ticket | Intro to Python, Bash, and Fastpages Frontend Development | . 2 | Week 2 Review Ticket | Dictionaries, Lists, Loops, and HTML Fragments | . 3 | Week 3 Review Ticket | AppLab Planning/Blogging, AppLab Creation, Plan for end of Tri project | . 4 | Week 4 Review Ticket | Python Web Server Project, Focus and Habits, Collaboration | . 5 | Week 5 Review Ticket | UI Starters, Agile, Javascript, Frontend | . 6 | Week 6 Review Ticket | Deployment, MCQs | . 7 | Week 7 Review Ticket | N/A | . TRI 2 | . 13 | Binary Hacks | Tools and Issues | . . lmao imagine keeping an up to date time box .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2022/09/18/timebox.html",
            "relUrl": "/markdown/2022/09/18/timebox.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Week 4 Video Presentation",
            "content": "",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2022/09/18/Week_4_Video.html",
            "relUrl": "/markdown/2022/09/18/Week_4_Video.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "Week 4 Review Ticket - Python Web Server Project",
            "content": "Psychology and the Good Life Goals: (ACTUALLY DO THESE, EFFORT -&gt; HAPPINESS) Create something fun outside of class (SUPERSCRUMMERS) | Fun game for groups to play | More team building with the team | Make a substantial impact on the Robotics club | Offer help to classmates (particularly in psych) | 8-10hrs of sleep | . | Video Review | Collaboration My group is completely random as I hadn&#39;t known any of them aside from Dash | Not entirely sure about common interests | There is some variance in gender and a lot in culture. | Unsure of skill sets, but they are all interested in Computer Science | . | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2022/09/18/Week_4_Review_Ticket.html",
            "relUrl": "/markdown/review_ticket/2022/09/18/Week_4_Review_Ticket.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "Sprint Backlog",
            "content": "Sprint Backlog: . Current Sprint: Python Web Server Project . Make video | Show local hosted servers | . Super Scrummers . I have actually no idea what we’re doing | . Other: . Create task planning | Figure out collaboration | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2022/09/12/Sprint_Backlog.html",
            "relUrl": "/markdown/2022/09/12/Sprint_Backlog.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "Week 3 - Creative Development",
            "content": "Week 3 Review Ticket - Creative Development . AppLab Planning | AppLab Creation: The RNG Test(click for code) function Code() { hideElement(&quot;buttonContinue&quot;); hideElement(&quot;buttonRestart&quot;); hideElement(&quot;textTitle&quot;); var ans1 = &quot;nothing&quot;; var ans2 = &quot;nothing&quot;; var ans3 = &quot;nothing&quot;; var ans4 = &quot;nothing&quot;; var socialCredit = 0; var ans = 0; setText(&quot;textScore&quot;, &quot;Score: 0&quot;); function Correctans() { Hidebuttons(); setScreen(&quot;screenCorrect&quot;); showElement(&quot;buttonContinue&quot;); socialCredit += 15; Questions(); setText(&quot;textScore&quot;, &quot;Score: &quot;+socialCredit); } function Incorrectans() { Hidebuttons(); setScreen(&quot;screenIncorrect&quot;); showElement(&quot;buttonRestart&quot;); socialCredit = &quot;-30,000,000&quot;; onEvent(&quot;buttonRestart&quot;, &quot;click&quot;, function( ) { Code(); }); } function Questioncheck() { onEvent(&quot;buttonTL&quot;, &quot;click&quot;, function( ) { if (ans1 === &quot;correct&quot;) { Correctans(); } else { Incorrectans(); } }); onEvent(&quot;buttonTR&quot;, &quot;click&quot;, function( ) { if (ans2 === &quot;correct&quot;) { Correctans(); } else { Incorrectans(); } }); onEvent(&quot;buttonBL&quot;, &quot;click&quot;, function( ) { if (ans3 === &quot;correct&quot;) { Correctans(); } else { Incorrectans(); } }); onEvent(&quot;buttonBR&quot;, &quot;click&quot;, function( ) { if (ans4 === &quot;correct&quot;) { Correctans(); } else { Incorrectans(); } }); } function Randomans() { ans = randomNumber(0, 3); if (ans === 0) { ans1 = &quot;correct&quot;; ans2 = &quot;incorrect&quot;; ans3 = &quot;incorrect&quot;; ans4 = &quot;incorrect&quot;; } else if (ans === 1) { ans2 = &quot;correct&quot;; ans1 = &quot;incorrect&quot;; ans3 = &quot;incorrect&quot;; ans4 = &quot;incorrect&quot;; } else if (ans === 2) { ans3 = &quot;correct&quot;; ans1 = &quot;incorrect&quot;; ans2 = &quot;incorrect&quot;; ans4 = &quot;incorrect&quot;; } else { ans4 = &quot;correct&quot;; ans1 = &quot;incorrect&quot;; ans2 = &quot;incorrect&quot;; ans3 = &quot;incorrect&quot;; } } function Showbuttons() { setScreen(&quot;screenQuestions&quot;); showElement(&quot;buttonTL&quot;); showElement(&quot;buttonTR&quot;); showElement(&quot;buttonBL&quot;); showElement(&quot;buttonBR&quot;); showElement(&quot;boxQuestions&quot;); setPosition(&quot;buttonTL&quot;, 6, 275, 150, 70); setPosition(&quot;buttonTR&quot;, 164, 275, 150, 70); setPosition(&quot;buttonBL&quot;, 6, 353, 150, 70); setPosition(&quot;buttonBR&quot;, 164, 353, 150, 70); setPosition(&quot;boxQuestions&quot;, 30, 30, 260, 130); } function Showstart() { setScreen(&quot;screenStart&quot;); showElement(&quot;buttonStart&quot;); showElement(&quot;textTitle&quot;); } function Hidestart() { hideElement(&quot;buttonStart&quot;); hideElement(&quot;textTitle&quot;); } function Hidebuttons() { hideElement(&quot;buttonTL&quot;); hideElement(&quot;buttonTR&quot;); hideElement(&quot;buttonBL&quot;); hideElement(&quot;buttonBR&quot;); hideElement(&quot;boxQuestions&quot;); } function Questions() { if (socialCredit === 0) { setText(&quot;boxQuestions&quot;, &quot;Heads or Tails?&quot;); setText(&quot;buttonTL&quot;, &quot;Heads&quot;); setText(&quot;buttonTR&quot;, &quot;Tails&quot;); setText(&quot;buttonBL&quot;, &quot;Both&quot;); setText(&quot;buttonBR&quot;, &quot;Neither&quot;); var x = randomNumber(0, 1); if (x === 0) { ans1 = &quot;correct&quot;; } else if (x === 1) { ans2 = &quot;correct&quot;; } Questioncheck(); } else if (socialCredit === 15) { Randomans(); onEvent(&quot;buttonContinue&quot;, &quot;click&quot;, function() { hideElement(&quot;buttonContinue&quot;); Showbuttons(); setText(&quot;boxQuestions&quot;, &quot;Pick a number 1 - 4&quot;); setText(&quot;buttonTL&quot;, &quot;1&quot;); setText(&quot;buttonTR&quot;, &quot;2&quot;); setText(&quot;buttonBL&quot;, &quot;3&quot;); setText(&quot;buttonBR&quot;, &quot;4&quot;); }); } else if (socialCredit === 30) { Randomans(); onEvent(&quot;buttonContinue&quot;, &quot;click&quot;, function() { hideElement(&quot;buttonContinue&quot;); Showbuttons(); setText(&quot;boxQuestions&quot;, &quot;Which is correct?&quot;); setText(&quot;buttonTL&quot;, &quot;This one&quot;); setText(&quot;buttonTR&quot;, &quot;This one&quot;); setText(&quot;buttonBL&quot;, &quot;This one&quot;); setText(&quot;buttonBR&quot;, &quot;This one&quot;); }); } else { setScreen(&quot;screenVicroy&quot;); } } Showstart(); Hidebuttons(); onEvent(&quot;buttonStart&quot;, &quot;click&quot;, function( ) { Showbuttons(); Hidestart(); Questions(); }); } Code(); | Create Task Planning | Sprint backlog | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2022/09/10/Week_3_Review_Ticket.html",
            "relUrl": "/markdown/review_ticket/2022/09/10/Week_3_Review_Ticket.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "Week 3 - Create Task Planning",
            "content": "Requirements: . Code Analysis: (4.A) Clearly state program&#39;s purpose, functionality, inputs, and outputs (written response) | Video showing program functioning (CAN NOT BE SCREENSHOTS) Input | Program functionality | Output | . | . | Data Abstraction: (3.B) Two segments: Data storage (list) | Stored data being used as part of fulfilling the program&#39;s purpose | . | Identify the name of the list | Describe the data within the list and how it relates to the program | . | Managing Complexity: (3.C) Program code segment that uses a list to simplify otherwise needlessly complex code (like the python quiz for loop) | Explain how the list simplifies the code, and how to code it would be coded differently without the list (written) | . | Procedural Abstraction: (3.B) Use abstraction to simplify programs A procedure with at least one parameter that affects the functionality of the procedure | Show where the procedure is being called | . | Describe the function of the procedure and how it simplifies the program | . | Algorithm Implementation: (2.B) An algorithm including... Sequencing | Selection | Iteration | . | Explain the steps of the algorithm with great detail | . | Testing: (4.C) Describe two calls to the procedure. Each call must pass a different argument that cause a different segment of code in the algorithm to execute. | Describe the condition being tested by each call to the procedure. | Identify the result of each call. | . | . Collaboration Rules: . 2 students working on the same program Pair programming | Dividing a complex program into different parts | . | Giving feedback | Providing debugging assistance | Citing code from a peer &quot;A collaborative peer&quot; to protect anonymity | . | . Planning: TETRIS . Concern: I have started this with javascript for the flask website but is it possible to use python instead for flask? | Requirements: Purpose: To entertain? idk | Functionality: | List: different shapes and colors, use a randomizer to pull from lists | Input: user key inputs: arrow keys, spacebar | Procedure: shape-selection procedure that randomizes the shape and then the color. | Output: blocks on screen and stuff | Algorithm: To check for the positions of each block and if each row is filled | . | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/markdown/2022/09/10/Create_Task_Planning.html",
            "relUrl": "/jupyter/markdown/2022/09/10/Create_Task_Planning.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post56": {
            "title": "Week 3 - AppLab Planning",
            "content": "AppLab Planning - RNG Test . Plans: Russian roulette? | Coin flip? | A “quiz” that uses random functions to randomize the correct answer | . | Progress: Tried to make a list for the questions but decided not to because I’m not that familiar with Java. | Made basic title and question screens, and a “Start” button to switch from one to the other. Made a 50/50 question for heads or tails, with two other answers that are always wrong. | Added questions and started to work on an answer randomization system that assigns a number from 0-3 to the variable “x”, and the correct answer would correspond to one of the 4 possible values for x. | Implemented the questions to the screen using setScreen commands and made a sort of recursive loop for setting the questions and verifying the answer. Also added victory and failure screens. | Added a score tracker (social credit) at the bottom of the screen that increases by 15 for each correct answer. The questions use an “if” function to check the value of the score, and sets the text to the proper question based on it. | | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2022/09/10/AppLab_Planning.html",
            "relUrl": "/markdown/2022/09/10/AppLab_Planning.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post57": {
            "title": "Loops, Dictionaries, and Lists",
            "content": "For Loop Test . This algorithm loops the given block of code for a known number of cycles. In this case it is twice because we have appended two dictionaries to the list. . InfoDb = [] # Data structure with keys and values # Append to list a Dictionary of key/values related to a person and their hobbies InfoDb.append({ &quot;FirstName&quot;: &quot;Aiden&quot;, &quot;LastName&quot;: &quot;Huynh&quot;, &quot;DOB&quot;: &quot;May 12&quot;, &quot;Residence&quot;: &quot;Escondido&quot;, &quot;Email&quot;: &quot;ah5993909@gmail.com&quot;, &quot;Hobbies&quot;: [&quot;Gaming&quot;, &quot;Video Editing&quot;] }) # Append a 2nd dictionary InfoDb.append({ &quot;FirstName&quot;: &quot;Avinh&quot;, &quot;LastName&quot;: &quot;Huynh&quot;, &quot;DOB&quot;: &quot;December 27&quot;, &quot;Residence&quot;: &quot;Escondido&quot;, &quot;Email&quot;: &quot;avinhahuynh@gmail.com&quot;, &quot;Hobbies&quot;: [&quot;Gaming&quot;, &quot;Streaming&quot;] }) # Prints all of the dictionary values def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # comma adds space between two values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t adds an indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print() # Loop algorithm def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Aiden Huynh Residence: Escondido Birth Day: May 12 Hobbies: Gaming, Video Editing Avinh Huynh Residence: Escondido Birth Day: December 27 Hobbies: Gaming, Streaming . While Loop Test . This algorithm only loops while a certain condition is met. In this case, it will only loop while the variable &quot;i&quot; is less than the number of items in the list given by the len command. The way we make this function is by adding one to &quot;i&quot; at the end of each loop, making it increase by one for each cycle until eventually becoming equal to the number of items in the list, thus ending the loop. . InfoDb = [] # Data structure with keys and values # Append to list a Dictionary of key/values related to a person and their hobbies InfoDb.append({ &quot;FirstName&quot;: &quot;Aiden&quot;, &quot;LastName&quot;: &quot;Huynh&quot;, &quot;DOB&quot;: &quot;May 12&quot;, &quot;Residence&quot;: &quot;Escondido&quot;, &quot;Email&quot;: &quot;ah5993909@gmail.com&quot;, &quot;Hobbies&quot;: [&quot;Gaming&quot;, &quot;Video Editing&quot;] }) # Append a 2nd dictionary InfoDb.append({ &quot;FirstName&quot;: &quot;Avinh&quot;, &quot;LastName&quot;: &quot;Huynh&quot;, &quot;DOB&quot;: &quot;December 27&quot;, &quot;Residence&quot;: &quot;Escondido&quot;, &quot;Email&quot;: &quot;avinhahuynh@gmail.com&quot;, &quot;Hobbies&quot;: [&quot;Gaming&quot;, &quot;Streaming&quot;] }) # Prints all of the dictionary values def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # comma adds space between two values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t adds an indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print() # While Loop -&gt; While a specified condition is met (i &lt; len(InfoDb)), it will loop def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output Aiden Huynh Residence: Escondido Birth Day: May 12 Hobbies: Gaming, Video Editing Avinh Huynh Residence: Escondido Birth Day: December 27 Hobbies: Gaming, Streaming . Recursive Loop Test . Functions pretty much the same as the above while loop, except it runs itself within the loop to add 1 to i. . InfoDb = [] # Data structure with keys and values # Append to list a Dictionary of key/values related to a person and their hobbies InfoDb.append({ &quot;FirstName&quot;: &quot;Aiden&quot;, &quot;LastName&quot;: &quot;Huynh&quot;, &quot;DOB&quot;: &quot;May 12&quot;, &quot;Residence&quot;: &quot;Escondido&quot;, &quot;Email&quot;: &quot;ah5993909@gmail.com&quot;, &quot;Hobbies&quot;: [&quot;Gaming&quot;, &quot;Video Editing&quot;] }) # Append a 2nd dictionary InfoDb.append({ &quot;FirstName&quot;: &quot;Avinh&quot;, &quot;LastName&quot;: &quot;Huynh&quot;, &quot;DOB&quot;: &quot;December 27&quot;, &quot;Residence&quot;: &quot;Escondido&quot;, &quot;Email&quot;: &quot;avinhahuynh@gmail.com&quot;, &quot;Hobbies&quot;: [&quot;Gaming&quot;, &quot;Streaming&quot;] }) # Prints all of the dictionary values def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # comma adds space between two values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t adds an indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print() # Recursive Loop -&gt; keeps incrementing on each call (n+1) until exit condition is met def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Aiden Huynh Residence: Escondido Birth Day: May 12 Hobbies: Gaming, Video Editing Avinh Huynh Residence: Escondido Birth Day: December 27 Hobbies: Gaming, Streaming . Reversed List . GList = [ [&quot;Apple&quot;, &quot;1.32&quot;], [&quot;Orange&quot;, &quot;1.45&quot;], [&quot;Banana&quot;, &quot;0.62&quot;], [&quot;Strawberry&quot;, &quot;0.11&quot;], [&quot;Blueberry&quot;, &quot;0.02&quot;], [&quot;Pineapple&quot;, &quot;2.18&quot;], [&quot;Watermelon&quot;, &quot;4.98&quot;], [&quot;Kiwi&quot;, &quot;1.07&quot;], [&quot;Mango&quot;, &quot;1.32&quot;], [&quot;Grape&quot;, &quot;0.03&quot;] ] # Reverses the list GList.reverse() print(GList) . [[&#39;Grape&#39;, &#39;0.03&#39;], [&#39;Mango&#39;, &#39;1.32&#39;], [&#39;Kiwi&#39;, &#39;1.07&#39;], [&#39;Watermelon&#39;, &#39;4.98&#39;], [&#39;Pineapple&#39;, &#39;2.18&#39;], [&#39;Blueberry&#39;, &#39;0.02&#39;], [&#39;Strawberry&#39;, &#39;0.11&#39;], [&#39;Banana&#39;, &#39;0.62&#39;], [&#39;Orange&#39;, &#39;1.45&#39;], [&#39;Apple&#39;, &#39;1.32&#39;]] . Randomized List . import random # Imports various commands for randomization # List of fruits and their prices GList = [ [&quot;Apple&quot;, &quot;1.32&quot;], [&quot;Orange&quot;, &quot;1.45&quot;], [&quot;Banana&quot;, &quot;0.62&quot;], [&quot;Strawberry&quot;, &quot;0.11&quot;], [&quot;Blueberry&quot;, &quot;0.02&quot;], [&quot;Pineapple&quot;, &quot;2.18&quot;], [&quot;Watermelon&quot;, &quot;4.98&quot;], [&quot;Kiwi&quot;, &quot;1.07&quot;], [&quot;Mango&quot;, &quot;1.32&quot;], [&quot;Grape&quot;, &quot;0.03&quot;] ] # Randomizes (shuffles) the list random.shuffle(GList) print(GList) . [[&#39;Strawberry&#39;, &#39;0.11&#39;], [&#39;Mango&#39;, &#39;1.32&#39;], [&#39;Orange&#39;, &#39;1.45&#39;], [&#39;Watermelon&#39;, &#39;4.98&#39;], [&#39;Grape&#39;, &#39;0.03&#39;], [&#39;Banana&#39;, &#39;0.62&#39;], [&#39;Blueberry&#39;, &#39;0.02&#39;], [&#39;Kiwi&#39;, &#39;1.07&#39;], [&#39;Pineapple&#39;, &#39;2.18&#39;], [&#39;Apple&#39;, &#39;1.32&#39;]] . Random Grocery List Generator . Uses lists and a loop to generate a specified number of fruits and their respective prices, along with the sum of all of the prices. . import random # List of fruits and their prices GList = [ [&quot;Apple&quot;, &quot;1.32&quot;], [&quot;Orange&quot;, &quot;1.45&quot;], [&quot;Banana&quot;, &quot;0.62&quot;], [&quot;Strawberry&quot;, &quot;0.11&quot;], [&quot;Blueberry&quot;, &quot;0.02&quot;], [&quot;Pineapple&quot;, &quot;2.18&quot;], [&quot;Watermelon&quot;, &quot;4.98&quot;], [&quot;Kiwi&quot;, &quot;1.07&quot;], [&quot;Mango&quot;, &quot;1.32&quot;], [&quot;Grape&quot;, &quot;0.03&quot;] ] print(&quot;Input the desired number of fruits (esc to cancel):&quot;) fruitCount = input() # Prompts user on the desired amount of fruits # k defines the number of fruits to pull, and by setting that equal to the input(), we pull only the amount desired by the user selectedPairs = random.choices(GList, k=int(fruitCount)) # int() is used because k must be an integer, did not do this in line 18 because input() must be a string to be printed print(&quot;You selected &quot;+fruitCount+&quot; fruits:&quot;) # This section defines the first term as the fruit and second as the corresponding price, allowing us to use each part separately for pricePair in selectedPairs: fruit = pricePair[0] price = pricePair[1] print(fruit+&quot;: $&quot;+price) # Calculates the sum of the prices n = float(price) sum = sum+n total = round(sum, 2) print(&quot;Your total is: $&quot;+str(total)) sum = 0 . Input the desired number of fruits (esc to cancel): You selected 10 fruits: Strawberry: $0.11 Apple: $1.32 Strawberry: $0.11 Blueberry: $0.02 Grape: $0.03 Apple: $1.32 Pineapple: $2.18 Strawberry: $0.11 Mango: $1.32 Banana: $0.62 Your total is: $7.14 . Quiz using lists . Basic Python Quiz .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/markdown/2022/09/05/dictionaries-test.html",
            "relUrl": "/jupyter/markdown/2022/09/05/dictionaries-test.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post58": {
            "title": "Week 2 - Data Abstraction & HTML Fragments",
            "content": "Week 2 Review Ticket - Data Abstraction &amp; HTML Fragments . Data Abstraction For Loop Test | With Loop Test | Recursive Loop | Reversed List | Randomized List | Randomized Grocery List (Application of lists and other stuff) | Test with lists (from Week 1) | | &quot;Actually Important Table&quot; Time Box on Home Page (Click for code) Code for table . &lt;html&gt; &lt;head&gt; &lt;style&gt; table { font-family: arial, sans-serif; border-collapse: collapse; width: 100%; } td, th { border: 1px solid #dddddd; text-align: left; padding: 8px; } tr:nth-child(even) { background-color: #dddddd; } tr:nth-child(odd) { background-color: #ffffff; } &lt;/style&gt; &lt;/head&gt; &lt;table&gt; &lt;tr&gt; &lt;th&gt;Week&lt;/th&gt; &lt;th&gt;Review Ticket&lt;/th&gt; &lt;th&gt;Points&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;0&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://aidenhuynh.github.io/CS_Swag/markdown/2022/09/03/Week_0_Hacks.html&quot;&gt;Week 0 - Review Ticket&lt;/a&gt;&lt;/td&gt; &lt;td&gt;Tools and Setup&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://aidenhuynh.github.io/CS_Swag/markdown/2022/09/04/Week_1_Hacks.html&quot;&gt;Week 1 - Review Ticket&lt;/a&gt;&lt;/td&gt; &lt;td&gt;Intro to Python, Bash, and Fastpages Frontend Development&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://aidenhuynh.github.io/CS_Swag/markdown/2022/09/05/Week_2_Review_Ticket.html&quot;&gt;Week 2 - Review Ticket&lt;/a&gt;&lt;/td&gt; &lt;td&gt;Dictionaries, Lists, Loops, and HTML Fragments&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;3&lt;/td&gt; &lt;td&gt;incomplete&lt;/td&gt; &lt;td&gt;AppLab Planning/Blogging, AppLab Creation, Plan for end of Tri project&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/html&gt; . | Remote theme change Before: Very unreadable because I think that&#39;s kind of funny. After: I actually really like these changes, however they get rid of the top bars for searching, tags, and the about me. Also, the images that are too large (for example, on my Week 0 Hacks) get stretched or squished to fit. Then again, I also think this is kind of funny. | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2022/09/05/Week_2_Review_Ticket.html",
            "relUrl": "/markdown/review_ticket/2022/09/05/Week_2_Review_Ticket.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post59": {
            "title": "Week 1 - Intro to Python, Bash, and Fastpages Frontend Development",
            "content": "Week 1 Review Ticket - Intro to Python, Bash, and Fastpages . Bash Hacks | My Python Quiz (using lists) | Fastpages Frontend Development _notebook file | _post with image (it&#39;s at the bottom) | _docx file | Edited &quot;About me&quot; section | | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/review_ticket/2022/09/04/Week_1_Hacks.html",
            "relUrl": "/markdown/review_ticket/2022/09/04/Week_1_Hacks.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post60": {
            "title": "Week 1 - Bash Hacks",
            "content": "Week 1 - Bash Hacks . A conditional command can help to verify the versions of programs and tools | To verify Anaconda and its installed version, conda list can be used | git add will download the needed files from the repository, git commit will commit to the repository, and git push will push the changes to the repository. | Scripts can be run to automate various tasks such as the installation of programs (like a .exe file). | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2022/09/04/Week_1_Bash.html",
            "relUrl": "/markdown/2022/09/04/Week_1_Bash.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post61": {
            "title": "Basic Python Quiz",
            "content": "import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 6 correct = 0 firstQ = False print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) while firstQ == False: rsp = question_with_response(&quot;Are you ready to take a test?&quot;) rsp.lower() if rsp == &quot;yes&quot;: print(getpass.getuser() +&quot;: yes&quot;) print(&quot;Great!&quot;) firstQ = True elif rsp == &quot;no&quot;: print(getpass.getuser() +&quot;: no&quot;) print(&quot;Too bad!&quot;) firstQ = True else: print(&quot;It&#39;s a yes or no question.&quot;) questionsList = [ [&quot;What command is used to include other functions that were previously developed?&quot;, &quot;import&quot;], [&quot;What command is used to evaluate correct or incorrect response in this example?&quot;, &quot;if&quot;], [&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;, &quot;expression&quot;], [&quot;What command is used to define functions?&quot;, &quot;def&quot;], [&quot;What are two or more lines of code called?&quot;, &quot;sequence&quot;], [&quot;What command is used to show text on your screen?&quot;, &quot;print&quot;] ] for QAPair in questionsList: question = QAPair[0] answer = QAPair[1] rsp = question_with_response(question) rsp.lower() if rsp == answer: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) quotient=correct/questions percentage=round((quotient * 100), 2) print(getpass.getuser()+&quot;, you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) print(&quot;That&#39;s&quot;, percentage,&quot;%!&quot;) percentList = [ [100,&quot;Perfect!&quot;], [90,&quot;Great!&quot;], [80,&quot;Nice!&quot;], [70,&quot;Could be better&quot;], [60,&quot;Needs improvement&quot;], ] for numbersPair in percentList: numbers = numbersPair[0] note = numbersPair[1] if numbers + 10 &gt; percentage &gt;= numbers: print(note) if 60 &gt; percentage &gt; 0: print(&quot;Skill issue?&quot;) elif percentage ==0: print(&quot;Very cool!!&quot;) # I am so cool . Hello, Aiden running /Users/Aiden/opt/anaconda3/bin/python You will be asked 6 questions. Question: Are you ready to take a test? Aiden: yes Great! Question: What command is used to include other functions that were previously developed? def is incorrect! Question: What command is used to evaluate correct or incorrect response in this example? is incorrect! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? is incorrect! Question: What command is used to define functions? is incorrect! Question: What are two or more lines of code called? is incorrect! Question: What command is used to show text on your screen? is incorrect! Aiden, you scored 0/6 That&#39;s 0.0 %! Very cool!! .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/markdown/2022/09/04/Python_Quiz.html",
            "relUrl": "/jupyter/markdown/2022/09/04/Python_Quiz.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post62": {
            "title": "Psychology Ch 9 Corrections",
            "content": "Q # Question &amp; Analysis Why? . E . X . A . M . P . L . E . | Question: . What did Lev Vygotsky state about children’s learning? . Correct Answer (write it out, not just the letter!): . Social contact is essential to intellectual development . Why the correct answer is right (content based explanation): . Vygotsky’s theory about the zone of proximal development indicates that children learn from mentors or coaches. . Why your answer was wrong (re-word the q to make your wrong ans right): . Q: What did Albert Bandura suggest about the way children learn? . A: He said that children learn through observational learning, or imitation. . If your wrong answer cannot be made correct, just explain: . Children learn by imitating others was my incorrect choice, but Vygotsky is not the one who says this, this is more along the lines of what Albert Bandura’s theories suggest. . Textbook page you referenced for your explanation: Chapter 1 Sec 2 (pg. 15) . | Choose one: . Didn’t study . Read question wrong . Absent when taught . Never understood concept . Other (specify) . | . | Question: . Which of the following techniques used by professional therapists are highly likely to promote the construction of false memories? . Correct Answer (write it out, not just the letter!): . Hypnosis, imagination-enhancing techniques, and drug-induced recall. . Why the correct answer is right (content based explanation): . All of these techniques can implant false memories. Those with vivid imaginations were found to be more susceptible to “imagination inflation,” where repeatedly imagining nonexistent events creates false memories. Therefore, enhancing imagination would increase the amount of false memories. Drug-induced recall and hypnosis have been criticized heavily by psychologists, to the point of being agreed upon as unreliable by several large organizations. . Why your answer was wrong (re-word the q to make your wrong ans right): . What psychotherapy practice(?) used by professional therapists are highly likely to promote the construction of false memories? . If your wrong answer cannot be made correct, just explain: . Textbook page you referenced for your explanation: . 383, 388 . | Choose one: . Didn’t study . Read question wrong . Absent when taught . Never understood concept . Other . (Answer said “all of the above, but only two were above so I just chose one”) . | . | | | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/2022/09/04/Psychology-Ch-9-Corrections.html",
            "relUrl": "/2022/09/04/Psychology-Ch-9-Corrections.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post63": {
            "title": "First Jupyter Post",
            "content": "import getpass swag = &quot;what&#39;s up gamers&quot; print(swag) def cool(sample): print(sample) ans = input() return ans rsp = cool(&quot;Blog: Say something cool&quot;) if rsp == &quot;something cool&quot;: print(getpass.getuser()+&quot;: &quot;+rsp) print(&quot;Blog: haha very clever 😐&quot;) else: print(getpass.getuser()+&quot;: &quot;+rsp) print(&quot;Blog: haha yeah that is pretty cool!&quot;) . what&#39;s up gamers Blog: Say something cool Aiden: poggers .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/2022/09/03/first.html",
            "relUrl": "/jupyter/2022/09/03/first.html",
            "date": " • Sep 3, 2022"
        }
        
    
  
    
        ,"post64": {
            "title": "Week 0 Review Ticket - Tools and Setup",
            "content": "Week 0 Review Ticket - Tools and Setup . My GitHub | FastPages Blog | My First Markdown/HTML Post | My First Jupyter Post | Proof of IDE (VSCode) | My Insights | bruh | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2022/09/03/Week_0_Hacks.html",
            "relUrl": "/markdown/2022/09/03/Week_0_Hacks.html",
            "date": " • Sep 3, 2022"
        }
        
    
  
    
        ,"post65": {
            "title": "First Post?! (with markdown)",
            "content": "Swag! . This is my first post (wowzers!) . list of things that i know i have to do for next week currently but will probably drastically change as the week progresses but I don’t know how to make something more useful than a table so this is what we get for now . Class Monday Tuesday Whensday Thursday FriDay . BC | labor day | just check the calendar man | – | learning check probably | – | . US history! | labor day | this class doesnt do homework lol | – | leanring rhceck peboablty |   | . Am ;pt | labor day | Thesis and parachute! | – | – | lit circle read 20pg/day :() | . Psycholololology | labor day | notso npts | nots notes | uh oh testing time D: | idk | . CS P wit mort | labor day | i have | np odea | wjat o, doing | - | . (thanks to Dash for showing me how to make a table with markdown) .",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2022/09/02/iamdash.html",
            "relUrl": "/markdown/2022/09/02/iamdash.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post66": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Enter bits below: . | Submit | . | . Plus/Minus Binary Octal Hexadecimal Decimal . | 00000000 | 0 | 0 | 0 | . | .",
            "url": "https://aidenhuynh.github.io/CS_Swag/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  
    
        ,"post67": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://aidenhuynh.github.io/CS_Swag/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post68": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://aidenhuynh.github.io/CS_Swag/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "😂😂😂 WHO DID THIS 😂😂😂",
          "content": "I am Aiden Huynh (pronounced “win”), creator of this website. Yep. I did this. SAMPLE TEXT .",
          "url": "https://aidenhuynh.github.io/CS_Swag/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  

  

  
  

  
      ,"page15": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://aidenhuynh.github.io/CS_Swag/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}